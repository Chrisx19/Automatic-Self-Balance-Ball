
Balance1D.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000501c  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  0800521c  0800521c  0001521c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005270  08005270  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005270  08005270  00015270  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005278  08005278  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005278  08005278  00015278  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800527c  0800527c  0001527c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005280  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000150  20000070  080052f0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c0  080052f0  000201c0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fa62  00000000  00000000  0002009e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001cd3  00000000  00000000  0002fb00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d50  00000000  00000000  000317d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c98  00000000  00000000  00032528  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002865c  00000000  00000000  000331c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010461  00000000  00000000  0005b81c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00100f0e  00000000  00000000  0006bc7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0016cb8b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c70  00000000  00000000  0016cbdc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000070 	.word	0x20000070
 800021c:	00000000 	.word	0x00000000
 8000220:	08005204 	.word	0x08005204

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000074 	.word	0x20000074
 800023c:	08005204 	.word	0x08005204

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b974 	b.w	80005f0 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	468e      	mov	lr, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14d      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032e:	428a      	cmp	r2, r1
 8000330:	4694      	mov	ip, r2
 8000332:	d969      	bls.n	8000408 <__udivmoddi4+0xe8>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b152      	cbz	r2, 8000350 <__udivmoddi4+0x30>
 800033a:	fa01 f302 	lsl.w	r3, r1, r2
 800033e:	f1c2 0120 	rsb	r1, r2, #32
 8000342:	fa20 f101 	lsr.w	r1, r0, r1
 8000346:	fa0c fc02 	lsl.w	ip, ip, r2
 800034a:	ea41 0e03 	orr.w	lr, r1, r3
 800034e:	4094      	lsls	r4, r2
 8000350:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000354:	0c21      	lsrs	r1, r4, #16
 8000356:	fbbe f6f8 	udiv	r6, lr, r8
 800035a:	fa1f f78c 	uxth.w	r7, ip
 800035e:	fb08 e316 	mls	r3, r8, r6, lr
 8000362:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000366:	fb06 f107 	mul.w	r1, r6, r7
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f106 30ff 	add.w	r0, r6, #4294967295
 8000376:	f080 811f 	bcs.w	80005b8 <__udivmoddi4+0x298>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 811c 	bls.w	80005b8 <__udivmoddi4+0x298>
 8000380:	3e02      	subs	r6, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a5b      	subs	r3, r3, r1
 8000386:	b2a4      	uxth	r4, r4
 8000388:	fbb3 f0f8 	udiv	r0, r3, r8
 800038c:	fb08 3310 	mls	r3, r8, r0, r3
 8000390:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000394:	fb00 f707 	mul.w	r7, r0, r7
 8000398:	42a7      	cmp	r7, r4
 800039a:	d90a      	bls.n	80003b2 <__udivmoddi4+0x92>
 800039c:	eb1c 0404 	adds.w	r4, ip, r4
 80003a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a4:	f080 810a 	bcs.w	80005bc <__udivmoddi4+0x29c>
 80003a8:	42a7      	cmp	r7, r4
 80003aa:	f240 8107 	bls.w	80005bc <__udivmoddi4+0x29c>
 80003ae:	4464      	add	r4, ip
 80003b0:	3802      	subs	r0, #2
 80003b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b6:	1be4      	subs	r4, r4, r7
 80003b8:	2600      	movs	r6, #0
 80003ba:	b11d      	cbz	r5, 80003c4 <__udivmoddi4+0xa4>
 80003bc:	40d4      	lsrs	r4, r2
 80003be:	2300      	movs	r3, #0
 80003c0:	e9c5 4300 	strd	r4, r3, [r5]
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d909      	bls.n	80003e2 <__udivmoddi4+0xc2>
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	f000 80ef 	beq.w	80005b2 <__udivmoddi4+0x292>
 80003d4:	2600      	movs	r6, #0
 80003d6:	e9c5 0100 	strd	r0, r1, [r5]
 80003da:	4630      	mov	r0, r6
 80003dc:	4631      	mov	r1, r6
 80003de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e2:	fab3 f683 	clz	r6, r3
 80003e6:	2e00      	cmp	r6, #0
 80003e8:	d14a      	bne.n	8000480 <__udivmoddi4+0x160>
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d302      	bcc.n	80003f4 <__udivmoddi4+0xd4>
 80003ee:	4282      	cmp	r2, r0
 80003f0:	f200 80f9 	bhi.w	80005e6 <__udivmoddi4+0x2c6>
 80003f4:	1a84      	subs	r4, r0, r2
 80003f6:	eb61 0303 	sbc.w	r3, r1, r3
 80003fa:	2001      	movs	r0, #1
 80003fc:	469e      	mov	lr, r3
 80003fe:	2d00      	cmp	r5, #0
 8000400:	d0e0      	beq.n	80003c4 <__udivmoddi4+0xa4>
 8000402:	e9c5 4e00 	strd	r4, lr, [r5]
 8000406:	e7dd      	b.n	80003c4 <__udivmoddi4+0xa4>
 8000408:	b902      	cbnz	r2, 800040c <__udivmoddi4+0xec>
 800040a:	deff      	udf	#255	; 0xff
 800040c:	fab2 f282 	clz	r2, r2
 8000410:	2a00      	cmp	r2, #0
 8000412:	f040 8092 	bne.w	800053a <__udivmoddi4+0x21a>
 8000416:	eba1 010c 	sub.w	r1, r1, ip
 800041a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800041e:	fa1f fe8c 	uxth.w	lr, ip
 8000422:	2601      	movs	r6, #1
 8000424:	0c20      	lsrs	r0, r4, #16
 8000426:	fbb1 f3f7 	udiv	r3, r1, r7
 800042a:	fb07 1113 	mls	r1, r7, r3, r1
 800042e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000432:	fb0e f003 	mul.w	r0, lr, r3
 8000436:	4288      	cmp	r0, r1
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x12c>
 800043a:	eb1c 0101 	adds.w	r1, ip, r1
 800043e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x12a>
 8000444:	4288      	cmp	r0, r1
 8000446:	f200 80cb 	bhi.w	80005e0 <__udivmoddi4+0x2c0>
 800044a:	4643      	mov	r3, r8
 800044c:	1a09      	subs	r1, r1, r0
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb1 f0f7 	udiv	r0, r1, r7
 8000454:	fb07 1110 	mls	r1, r7, r0, r1
 8000458:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800045c:	fb0e fe00 	mul.w	lr, lr, r0
 8000460:	45a6      	cmp	lr, r4
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x156>
 8000464:	eb1c 0404 	adds.w	r4, ip, r4
 8000468:	f100 31ff 	add.w	r1, r0, #4294967295
 800046c:	d202      	bcs.n	8000474 <__udivmoddi4+0x154>
 800046e:	45a6      	cmp	lr, r4
 8000470:	f200 80bb 	bhi.w	80005ea <__udivmoddi4+0x2ca>
 8000474:	4608      	mov	r0, r1
 8000476:	eba4 040e 	sub.w	r4, r4, lr
 800047a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800047e:	e79c      	b.n	80003ba <__udivmoddi4+0x9a>
 8000480:	f1c6 0720 	rsb	r7, r6, #32
 8000484:	40b3      	lsls	r3, r6
 8000486:	fa22 fc07 	lsr.w	ip, r2, r7
 800048a:	ea4c 0c03 	orr.w	ip, ip, r3
 800048e:	fa20 f407 	lsr.w	r4, r0, r7
 8000492:	fa01 f306 	lsl.w	r3, r1, r6
 8000496:	431c      	orrs	r4, r3
 8000498:	40f9      	lsrs	r1, r7
 800049a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800049e:	fa00 f306 	lsl.w	r3, r0, r6
 80004a2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004a6:	0c20      	lsrs	r0, r4, #16
 80004a8:	fa1f fe8c 	uxth.w	lr, ip
 80004ac:	fb09 1118 	mls	r1, r9, r8, r1
 80004b0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004b4:	fb08 f00e 	mul.w	r0, r8, lr
 80004b8:	4288      	cmp	r0, r1
 80004ba:	fa02 f206 	lsl.w	r2, r2, r6
 80004be:	d90b      	bls.n	80004d8 <__udivmoddi4+0x1b8>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c8:	f080 8088 	bcs.w	80005dc <__udivmoddi4+0x2bc>
 80004cc:	4288      	cmp	r0, r1
 80004ce:	f240 8085 	bls.w	80005dc <__udivmoddi4+0x2bc>
 80004d2:	f1a8 0802 	sub.w	r8, r8, #2
 80004d6:	4461      	add	r1, ip
 80004d8:	1a09      	subs	r1, r1, r0
 80004da:	b2a4      	uxth	r4, r4
 80004dc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004e0:	fb09 1110 	mls	r1, r9, r0, r1
 80004e4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004e8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ec:	458e      	cmp	lr, r1
 80004ee:	d908      	bls.n	8000502 <__udivmoddi4+0x1e2>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004f8:	d26c      	bcs.n	80005d4 <__udivmoddi4+0x2b4>
 80004fa:	458e      	cmp	lr, r1
 80004fc:	d96a      	bls.n	80005d4 <__udivmoddi4+0x2b4>
 80004fe:	3802      	subs	r0, #2
 8000500:	4461      	add	r1, ip
 8000502:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000506:	fba0 9402 	umull	r9, r4, r0, r2
 800050a:	eba1 010e 	sub.w	r1, r1, lr
 800050e:	42a1      	cmp	r1, r4
 8000510:	46c8      	mov	r8, r9
 8000512:	46a6      	mov	lr, r4
 8000514:	d356      	bcc.n	80005c4 <__udivmoddi4+0x2a4>
 8000516:	d053      	beq.n	80005c0 <__udivmoddi4+0x2a0>
 8000518:	b15d      	cbz	r5, 8000532 <__udivmoddi4+0x212>
 800051a:	ebb3 0208 	subs.w	r2, r3, r8
 800051e:	eb61 010e 	sbc.w	r1, r1, lr
 8000522:	fa01 f707 	lsl.w	r7, r1, r7
 8000526:	fa22 f306 	lsr.w	r3, r2, r6
 800052a:	40f1      	lsrs	r1, r6
 800052c:	431f      	orrs	r7, r3
 800052e:	e9c5 7100 	strd	r7, r1, [r5]
 8000532:	2600      	movs	r6, #0
 8000534:	4631      	mov	r1, r6
 8000536:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	40d8      	lsrs	r0, r3
 8000540:	fa0c fc02 	lsl.w	ip, ip, r2
 8000544:	fa21 f303 	lsr.w	r3, r1, r3
 8000548:	4091      	lsls	r1, r2
 800054a:	4301      	orrs	r1, r0
 800054c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000550:	fa1f fe8c 	uxth.w	lr, ip
 8000554:	fbb3 f0f7 	udiv	r0, r3, r7
 8000558:	fb07 3610 	mls	r6, r7, r0, r3
 800055c:	0c0b      	lsrs	r3, r1, #16
 800055e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000562:	fb00 f60e 	mul.w	r6, r0, lr
 8000566:	429e      	cmp	r6, r3
 8000568:	fa04 f402 	lsl.w	r4, r4, r2
 800056c:	d908      	bls.n	8000580 <__udivmoddi4+0x260>
 800056e:	eb1c 0303 	adds.w	r3, ip, r3
 8000572:	f100 38ff 	add.w	r8, r0, #4294967295
 8000576:	d22f      	bcs.n	80005d8 <__udivmoddi4+0x2b8>
 8000578:	429e      	cmp	r6, r3
 800057a:	d92d      	bls.n	80005d8 <__udivmoddi4+0x2b8>
 800057c:	3802      	subs	r0, #2
 800057e:	4463      	add	r3, ip
 8000580:	1b9b      	subs	r3, r3, r6
 8000582:	b289      	uxth	r1, r1
 8000584:	fbb3 f6f7 	udiv	r6, r3, r7
 8000588:	fb07 3316 	mls	r3, r7, r6, r3
 800058c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000590:	fb06 f30e 	mul.w	r3, r6, lr
 8000594:	428b      	cmp	r3, r1
 8000596:	d908      	bls.n	80005aa <__udivmoddi4+0x28a>
 8000598:	eb1c 0101 	adds.w	r1, ip, r1
 800059c:	f106 38ff 	add.w	r8, r6, #4294967295
 80005a0:	d216      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 80005a2:	428b      	cmp	r3, r1
 80005a4:	d914      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 80005a6:	3e02      	subs	r6, #2
 80005a8:	4461      	add	r1, ip
 80005aa:	1ac9      	subs	r1, r1, r3
 80005ac:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005b0:	e738      	b.n	8000424 <__udivmoddi4+0x104>
 80005b2:	462e      	mov	r6, r5
 80005b4:	4628      	mov	r0, r5
 80005b6:	e705      	b.n	80003c4 <__udivmoddi4+0xa4>
 80005b8:	4606      	mov	r6, r0
 80005ba:	e6e3      	b.n	8000384 <__udivmoddi4+0x64>
 80005bc:	4618      	mov	r0, r3
 80005be:	e6f8      	b.n	80003b2 <__udivmoddi4+0x92>
 80005c0:	454b      	cmp	r3, r9
 80005c2:	d2a9      	bcs.n	8000518 <__udivmoddi4+0x1f8>
 80005c4:	ebb9 0802 	subs.w	r8, r9, r2
 80005c8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005cc:	3801      	subs	r0, #1
 80005ce:	e7a3      	b.n	8000518 <__udivmoddi4+0x1f8>
 80005d0:	4646      	mov	r6, r8
 80005d2:	e7ea      	b.n	80005aa <__udivmoddi4+0x28a>
 80005d4:	4620      	mov	r0, r4
 80005d6:	e794      	b.n	8000502 <__udivmoddi4+0x1e2>
 80005d8:	4640      	mov	r0, r8
 80005da:	e7d1      	b.n	8000580 <__udivmoddi4+0x260>
 80005dc:	46d0      	mov	r8, sl
 80005de:	e77b      	b.n	80004d8 <__udivmoddi4+0x1b8>
 80005e0:	3b02      	subs	r3, #2
 80005e2:	4461      	add	r1, ip
 80005e4:	e732      	b.n	800044c <__udivmoddi4+0x12c>
 80005e6:	4630      	mov	r0, r6
 80005e8:	e709      	b.n	80003fe <__udivmoddi4+0xde>
 80005ea:	4464      	add	r4, ip
 80005ec:	3802      	subs	r0, #2
 80005ee:	e742      	b.n	8000476 <__udivmoddi4+0x156>

080005f0 <__aeabi_idiv0>:
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop

080005f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b092      	sub	sp, #72	; 0x48
 80005f8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005fa:	f000 fc7a 	bl	8000ef2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005fe:	f000 f855 	bl	80006ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000602:	f000 f9a9 	bl	8000958 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000606:	f000 f8ad 	bl	8000764 <MX_ADC1_Init>
  MX_USART3_UART_Init();
 800060a:	f000 f975 	bl	80008f8 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 800060e:	f000 f8fb 	bl	8000808 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000612:	2100      	movs	r1, #0
 8000614:	4820      	ldr	r0, [pc, #128]	; (8000698 <main+0xa4>)
 8000616:	f002 fd45 	bl	80030a4 <HAL_TIM_PWM_Start>

  char msg [64] = {0};
 800061a:	2300      	movs	r3, #0
 800061c:	607b      	str	r3, [r7, #4]
 800061e:	f107 0308 	add.w	r3, r7, #8
 8000622:	223c      	movs	r2, #60	; 0x3c
 8000624:	2100      	movs	r1, #0
 8000626:	4618      	mov	r0, r3
 8000628:	f004 f976 	bl	8004918 <memset>
//	  htim2.Instance -> CCR1 = 50; //middle
//	  HAL_Delay(1000);
//	  htim2.Instance -> CCR1 = 77;	//left


	  HAL_ADC_Start(&hadc1);
 800062c:	481b      	ldr	r0, [pc, #108]	; (800069c <main+0xa8>)
 800062e:	f000 fd25 	bl	800107c <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000632:	f04f 31ff 	mov.w	r1, #4294967295
 8000636:	4819      	ldr	r0, [pc, #100]	; (800069c <main+0xa8>)
 8000638:	f000 fdee 	bl	8001218 <HAL_ADC_PollForConversion>
//	  raw = HAL_ADC_GetValue(&hadc1) / 66.0483871 + 17;
	  raw = (HAL_ADC_GetValue(&hadc1) / (4095/63)) + 17;
 800063c:	4817      	ldr	r0, [pc, #92]	; (800069c <main+0xa8>)
 800063e:	f000 fe76 	bl	800132e <HAL_ADC_GetValue>
 8000642:	4603      	mov	r3, r0
 8000644:	4a16      	ldr	r2, [pc, #88]	; (80006a0 <main+0xac>)
 8000646:	fba2 2303 	umull	r2, r3, r2, r3
 800064a:	099b      	lsrs	r3, r3, #6
 800064c:	b29b      	uxth	r3, r3
 800064e:	3311      	adds	r3, #17
 8000650:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46

	  htim2.Instance -> CCR1 = raw;
 8000654:	4b10      	ldr	r3, [pc, #64]	; (8000698 <main+0xa4>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800065c:	635a      	str	r2, [r3, #52]	; 0x34

	  memset(msg, 0x00, 64);//default 0
 800065e:	1d3b      	adds	r3, r7, #4
 8000660:	2240      	movs	r2, #64	; 0x40
 8000662:	2100      	movs	r1, #0
 8000664:	4618      	mov	r0, r3
 8000666:	f004 f957 	bl	8004918 <memset>
	  sprintf(msg, "%hu\r\t\n", raw);
 800066a:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800066e:	1d3b      	adds	r3, r7, #4
 8000670:	490c      	ldr	r1, [pc, #48]	; (80006a4 <main+0xb0>)
 8000672:	4618      	mov	r0, r3
 8000674:	f004 f958 	bl	8004928 <siprintf>
	  HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000678:	1d3b      	adds	r3, r7, #4
 800067a:	4618      	mov	r0, r3
 800067c:	f7ff fde0 	bl	8000240 <strlen>
 8000680:	4603      	mov	r3, r0
 8000682:	b29a      	uxth	r2, r3
 8000684:	1d39      	adds	r1, r7, #4
 8000686:	f04f 33ff 	mov.w	r3, #4294967295
 800068a:	4807      	ldr	r0, [pc, #28]	; (80006a8 <main+0xb4>)
 800068c:	f003 fc7c 	bl	8003f88 <HAL_UART_Transmit>

	  HAL_Delay(100);
 8000690:	2064      	movs	r0, #100	; 0x64
 8000692:	f000 fc8b 	bl	8000fac <HAL_Delay>
	  HAL_ADC_Start(&hadc1);
 8000696:	e7c9      	b.n	800062c <main+0x38>
 8000698:	200000d4 	.word	0x200000d4
 800069c:	2000008c 	.word	0x2000008c
 80006a0:	fc0fc0fd 	.word	0xfc0fc0fd
 80006a4:	0800521c 	.word	0x0800521c
 80006a8:	20000120 	.word	0x20000120

080006ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b094      	sub	sp, #80	; 0x50
 80006b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006b2:	f107 031c 	add.w	r3, r7, #28
 80006b6:	2234      	movs	r2, #52	; 0x34
 80006b8:	2100      	movs	r1, #0
 80006ba:	4618      	mov	r0, r3
 80006bc:	f004 f92c 	bl	8004918 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006c0:	f107 0308 	add.w	r3, r7, #8
 80006c4:	2200      	movs	r2, #0
 80006c6:	601a      	str	r2, [r3, #0]
 80006c8:	605a      	str	r2, [r3, #4]
 80006ca:	609a      	str	r2, [r3, #8]
 80006cc:	60da      	str	r2, [r3, #12]
 80006ce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006d0:	4b22      	ldr	r3, [pc, #136]	; (800075c <SystemClock_Config+0xb0>)
 80006d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006d4:	4a21      	ldr	r2, [pc, #132]	; (800075c <SystemClock_Config+0xb0>)
 80006d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006da:	6413      	str	r3, [r2, #64]	; 0x40
 80006dc:	4b1f      	ldr	r3, [pc, #124]	; (800075c <SystemClock_Config+0xb0>)
 80006de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006e4:	607b      	str	r3, [r7, #4]
 80006e6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006e8:	4b1d      	ldr	r3, [pc, #116]	; (8000760 <SystemClock_Config+0xb4>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80006f0:	4a1b      	ldr	r2, [pc, #108]	; (8000760 <SystemClock_Config+0xb4>)
 80006f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006f6:	6013      	str	r3, [r2, #0]
 80006f8:	4b19      	ldr	r3, [pc, #100]	; (8000760 <SystemClock_Config+0xb4>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000700:	603b      	str	r3, [r7, #0]
 8000702:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000704:	2302      	movs	r3, #2
 8000706:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000708:	2301      	movs	r3, #1
 800070a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800070c:	2310      	movs	r3, #16
 800070e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000710:	2300      	movs	r3, #0
 8000712:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000714:	f107 031c 	add.w	r3, r7, #28
 8000718:	4618      	mov	r0, r3
 800071a:	f001 fb11 	bl	8001d40 <HAL_RCC_OscConfig>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d001      	beq.n	8000728 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8000724:	f000 fa2c 	bl	8000b80 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000728:	230f      	movs	r3, #15
 800072a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800072c:	2300      	movs	r3, #0
 800072e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000730:	2300      	movs	r3, #0
 8000732:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000734:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000738:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800073a:	2300      	movs	r3, #0
 800073c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800073e:	f107 0308 	add.w	r3, r7, #8
 8000742:	2100      	movs	r1, #0
 8000744:	4618      	mov	r0, r3
 8000746:	f001 fda9 	bl	800229c <HAL_RCC_ClockConfig>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8000750:	f000 fa16 	bl	8000b80 <Error_Handler>
  }
}
 8000754:	bf00      	nop
 8000756:	3750      	adds	r7, #80	; 0x50
 8000758:	46bd      	mov	sp, r7
 800075a:	bd80      	pop	{r7, pc}
 800075c:	40023800 	.word	0x40023800
 8000760:	40007000 	.word	0x40007000

08000764 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b084      	sub	sp, #16
 8000768:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800076a:	463b      	mov	r3, r7
 800076c:	2200      	movs	r2, #0
 800076e:	601a      	str	r2, [r3, #0]
 8000770:	605a      	str	r2, [r3, #4]
 8000772:	609a      	str	r2, [r3, #8]
 8000774:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000776:	4b21      	ldr	r3, [pc, #132]	; (80007fc <MX_ADC1_Init+0x98>)
 8000778:	4a21      	ldr	r2, [pc, #132]	; (8000800 <MX_ADC1_Init+0x9c>)
 800077a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800077c:	4b1f      	ldr	r3, [pc, #124]	; (80007fc <MX_ADC1_Init+0x98>)
 800077e:	2200      	movs	r2, #0
 8000780:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000782:	4b1e      	ldr	r3, [pc, #120]	; (80007fc <MX_ADC1_Init+0x98>)
 8000784:	2200      	movs	r2, #0
 8000786:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000788:	4b1c      	ldr	r3, [pc, #112]	; (80007fc <MX_ADC1_Init+0x98>)
 800078a:	2200      	movs	r2, #0
 800078c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800078e:	4b1b      	ldr	r3, [pc, #108]	; (80007fc <MX_ADC1_Init+0x98>)
 8000790:	2200      	movs	r2, #0
 8000792:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000794:	4b19      	ldr	r3, [pc, #100]	; (80007fc <MX_ADC1_Init+0x98>)
 8000796:	2200      	movs	r2, #0
 8000798:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800079c:	4b17      	ldr	r3, [pc, #92]	; (80007fc <MX_ADC1_Init+0x98>)
 800079e:	2200      	movs	r2, #0
 80007a0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007a2:	4b16      	ldr	r3, [pc, #88]	; (80007fc <MX_ADC1_Init+0x98>)
 80007a4:	4a17      	ldr	r2, [pc, #92]	; (8000804 <MX_ADC1_Init+0xa0>)
 80007a6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007a8:	4b14      	ldr	r3, [pc, #80]	; (80007fc <MX_ADC1_Init+0x98>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80007ae:	4b13      	ldr	r3, [pc, #76]	; (80007fc <MX_ADC1_Init+0x98>)
 80007b0:	2201      	movs	r2, #1
 80007b2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80007b4:	4b11      	ldr	r3, [pc, #68]	; (80007fc <MX_ADC1_Init+0x98>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007bc:	4b0f      	ldr	r3, [pc, #60]	; (80007fc <MX_ADC1_Init+0x98>)
 80007be:	2201      	movs	r2, #1
 80007c0:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007c2:	480e      	ldr	r0, [pc, #56]	; (80007fc <MX_ADC1_Init+0x98>)
 80007c4:	f000 fc16 	bl	8000ff4 <HAL_ADC_Init>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80007ce:	f000 f9d7 	bl	8000b80 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80007d2:	2303      	movs	r3, #3
 80007d4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007d6:	2301      	movs	r3, #1
 80007d8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80007da:	2300      	movs	r3, #0
 80007dc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007de:	463b      	mov	r3, r7
 80007e0:	4619      	mov	r1, r3
 80007e2:	4806      	ldr	r0, [pc, #24]	; (80007fc <MX_ADC1_Init+0x98>)
 80007e4:	f000 fdb0 	bl	8001348 <HAL_ADC_ConfigChannel>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80007ee:	f000 f9c7 	bl	8000b80 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007f2:	bf00      	nop
 80007f4:	3710      	adds	r7, #16
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	2000008c 	.word	0x2000008c
 8000800:	40012000 	.word	0x40012000
 8000804:	0f000001 	.word	0x0f000001

08000808 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b08e      	sub	sp, #56	; 0x38
 800080c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800080e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000812:	2200      	movs	r2, #0
 8000814:	601a      	str	r2, [r3, #0]
 8000816:	605a      	str	r2, [r3, #4]
 8000818:	609a      	str	r2, [r3, #8]
 800081a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800081c:	f107 031c 	add.w	r3, r7, #28
 8000820:	2200      	movs	r2, #0
 8000822:	601a      	str	r2, [r3, #0]
 8000824:	605a      	str	r2, [r3, #4]
 8000826:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000828:	463b      	mov	r3, r7
 800082a:	2200      	movs	r2, #0
 800082c:	601a      	str	r2, [r3, #0]
 800082e:	605a      	str	r2, [r3, #4]
 8000830:	609a      	str	r2, [r3, #8]
 8000832:	60da      	str	r2, [r3, #12]
 8000834:	611a      	str	r2, [r3, #16]
 8000836:	615a      	str	r2, [r3, #20]
 8000838:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800083a:	4b2e      	ldr	r3, [pc, #184]	; (80008f4 <MX_TIM2_Init+0xec>)
 800083c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000840:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 506.6666667-1;
 8000842:	4b2c      	ldr	r3, [pc, #176]	; (80008f4 <MX_TIM2_Init+0xec>)
 8000844:	f240 12f9 	movw	r2, #505	; 0x1f9
 8000848:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800084a:	4b2a      	ldr	r3, [pc, #168]	; (80008f4 <MX_TIM2_Init+0xec>)
 800084c:	2200      	movs	r2, #0
 800084e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 631.5789474-1;
 8000850:	4b28      	ldr	r3, [pc, #160]	; (80008f4 <MX_TIM2_Init+0xec>)
 8000852:	f240 2276 	movw	r2, #630	; 0x276
 8000856:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000858:	4b26      	ldr	r3, [pc, #152]	; (80008f4 <MX_TIM2_Init+0xec>)
 800085a:	2200      	movs	r2, #0
 800085c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800085e:	4b25      	ldr	r3, [pc, #148]	; (80008f4 <MX_TIM2_Init+0xec>)
 8000860:	2200      	movs	r2, #0
 8000862:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000864:	4823      	ldr	r0, [pc, #140]	; (80008f4 <MX_TIM2_Init+0xec>)
 8000866:	f002 fb65 	bl	8002f34 <HAL_TIM_Base_Init>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d001      	beq.n	8000874 <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 8000870:	f000 f986 	bl	8000b80 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000874:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000878:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800087a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800087e:	4619      	mov	r1, r3
 8000880:	481c      	ldr	r0, [pc, #112]	; (80008f4 <MX_TIM2_Init+0xec>)
 8000882:	f002 fe1d 	bl	80034c0 <HAL_TIM_ConfigClockSource>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d001      	beq.n	8000890 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 800088c:	f000 f978 	bl	8000b80 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000890:	4818      	ldr	r0, [pc, #96]	; (80008f4 <MX_TIM2_Init+0xec>)
 8000892:	f002 fba6 	bl	8002fe2 <HAL_TIM_PWM_Init>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d001      	beq.n	80008a0 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 800089c:	f000 f970 	bl	8000b80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008a0:	2300      	movs	r3, #0
 80008a2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008a4:	2300      	movs	r3, #0
 80008a6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80008a8:	f107 031c 	add.w	r3, r7, #28
 80008ac:	4619      	mov	r1, r3
 80008ae:	4811      	ldr	r0, [pc, #68]	; (80008f4 <MX_TIM2_Init+0xec>)
 80008b0:	f003 fa8e 	bl	8003dd0 <HAL_TIMEx_MasterConfigSynchronization>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d001      	beq.n	80008be <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 80008ba:	f000 f961 	bl	8000b80 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008be:	2360      	movs	r3, #96	; 0x60
 80008c0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80008c2:	2300      	movs	r3, #0
 80008c4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008c6:	2300      	movs	r3, #0
 80008c8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008ca:	2300      	movs	r3, #0
 80008cc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008ce:	463b      	mov	r3, r7
 80008d0:	2200      	movs	r2, #0
 80008d2:	4619      	mov	r1, r3
 80008d4:	4807      	ldr	r0, [pc, #28]	; (80008f4 <MX_TIM2_Init+0xec>)
 80008d6:	f002 fcdf 	bl	8003298 <HAL_TIM_PWM_ConfigChannel>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 80008e0:	f000 f94e 	bl	8000b80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80008e4:	4803      	ldr	r0, [pc, #12]	; (80008f4 <MX_TIM2_Init+0xec>)
 80008e6:	f000 f9d3 	bl	8000c90 <HAL_TIM_MspPostInit>

}
 80008ea:	bf00      	nop
 80008ec:	3738      	adds	r7, #56	; 0x38
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	200000d4 	.word	0x200000d4

080008f8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80008fc:	4b14      	ldr	r3, [pc, #80]	; (8000950 <MX_USART3_UART_Init+0x58>)
 80008fe:	4a15      	ldr	r2, [pc, #84]	; (8000954 <MX_USART3_UART_Init+0x5c>)
 8000900:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000902:	4b13      	ldr	r3, [pc, #76]	; (8000950 <MX_USART3_UART_Init+0x58>)
 8000904:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000908:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800090a:	4b11      	ldr	r3, [pc, #68]	; (8000950 <MX_USART3_UART_Init+0x58>)
 800090c:	2200      	movs	r2, #0
 800090e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000910:	4b0f      	ldr	r3, [pc, #60]	; (8000950 <MX_USART3_UART_Init+0x58>)
 8000912:	2200      	movs	r2, #0
 8000914:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000916:	4b0e      	ldr	r3, [pc, #56]	; (8000950 <MX_USART3_UART_Init+0x58>)
 8000918:	2200      	movs	r2, #0
 800091a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800091c:	4b0c      	ldr	r3, [pc, #48]	; (8000950 <MX_USART3_UART_Init+0x58>)
 800091e:	220c      	movs	r2, #12
 8000920:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000922:	4b0b      	ldr	r3, [pc, #44]	; (8000950 <MX_USART3_UART_Init+0x58>)
 8000924:	2200      	movs	r2, #0
 8000926:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000928:	4b09      	ldr	r3, [pc, #36]	; (8000950 <MX_USART3_UART_Init+0x58>)
 800092a:	2200      	movs	r2, #0
 800092c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800092e:	4b08      	ldr	r3, [pc, #32]	; (8000950 <MX_USART3_UART_Init+0x58>)
 8000930:	2200      	movs	r2, #0
 8000932:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000934:	4b06      	ldr	r3, [pc, #24]	; (8000950 <MX_USART3_UART_Init+0x58>)
 8000936:	2200      	movs	r2, #0
 8000938:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800093a:	4805      	ldr	r0, [pc, #20]	; (8000950 <MX_USART3_UART_Init+0x58>)
 800093c:	f003 fad6 	bl	8003eec <HAL_UART_Init>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d001      	beq.n	800094a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000946:	f000 f91b 	bl	8000b80 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800094a:	bf00      	nop
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	20000120 	.word	0x20000120
 8000954:	40004800 	.word	0x40004800

08000958 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b08c      	sub	sp, #48	; 0x30
 800095c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800095e:	f107 031c 	add.w	r3, r7, #28
 8000962:	2200      	movs	r2, #0
 8000964:	601a      	str	r2, [r3, #0]
 8000966:	605a      	str	r2, [r3, #4]
 8000968:	609a      	str	r2, [r3, #8]
 800096a:	60da      	str	r2, [r3, #12]
 800096c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800096e:	4b7f      	ldr	r3, [pc, #508]	; (8000b6c <MX_GPIO_Init+0x214>)
 8000970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000972:	4a7e      	ldr	r2, [pc, #504]	; (8000b6c <MX_GPIO_Init+0x214>)
 8000974:	f043 0304 	orr.w	r3, r3, #4
 8000978:	6313      	str	r3, [r2, #48]	; 0x30
 800097a:	4b7c      	ldr	r3, [pc, #496]	; (8000b6c <MX_GPIO_Init+0x214>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097e:	f003 0304 	and.w	r3, r3, #4
 8000982:	61bb      	str	r3, [r7, #24]
 8000984:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000986:	4b79      	ldr	r3, [pc, #484]	; (8000b6c <MX_GPIO_Init+0x214>)
 8000988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098a:	4a78      	ldr	r2, [pc, #480]	; (8000b6c <MX_GPIO_Init+0x214>)
 800098c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000990:	6313      	str	r3, [r2, #48]	; 0x30
 8000992:	4b76      	ldr	r3, [pc, #472]	; (8000b6c <MX_GPIO_Init+0x214>)
 8000994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000996:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800099a:	617b      	str	r3, [r7, #20]
 800099c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800099e:	4b73      	ldr	r3, [pc, #460]	; (8000b6c <MX_GPIO_Init+0x214>)
 80009a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a2:	4a72      	ldr	r2, [pc, #456]	; (8000b6c <MX_GPIO_Init+0x214>)
 80009a4:	f043 0301 	orr.w	r3, r3, #1
 80009a8:	6313      	str	r3, [r2, #48]	; 0x30
 80009aa:	4b70      	ldr	r3, [pc, #448]	; (8000b6c <MX_GPIO_Init+0x214>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ae:	f003 0301 	and.w	r3, r3, #1
 80009b2:	613b      	str	r3, [r7, #16]
 80009b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009b6:	4b6d      	ldr	r3, [pc, #436]	; (8000b6c <MX_GPIO_Init+0x214>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ba:	4a6c      	ldr	r2, [pc, #432]	; (8000b6c <MX_GPIO_Init+0x214>)
 80009bc:	f043 0302 	orr.w	r3, r3, #2
 80009c0:	6313      	str	r3, [r2, #48]	; 0x30
 80009c2:	4b6a      	ldr	r3, [pc, #424]	; (8000b6c <MX_GPIO_Init+0x214>)
 80009c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c6:	f003 0302 	and.w	r3, r3, #2
 80009ca:	60fb      	str	r3, [r7, #12]
 80009cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009ce:	4b67      	ldr	r3, [pc, #412]	; (8000b6c <MX_GPIO_Init+0x214>)
 80009d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d2:	4a66      	ldr	r2, [pc, #408]	; (8000b6c <MX_GPIO_Init+0x214>)
 80009d4:	f043 0308 	orr.w	r3, r3, #8
 80009d8:	6313      	str	r3, [r2, #48]	; 0x30
 80009da:	4b64      	ldr	r3, [pc, #400]	; (8000b6c <MX_GPIO_Init+0x214>)
 80009dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009de:	f003 0308 	and.w	r3, r3, #8
 80009e2:	60bb      	str	r3, [r7, #8]
 80009e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80009e6:	4b61      	ldr	r3, [pc, #388]	; (8000b6c <MX_GPIO_Init+0x214>)
 80009e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ea:	4a60      	ldr	r2, [pc, #384]	; (8000b6c <MX_GPIO_Init+0x214>)
 80009ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009f0:	6313      	str	r3, [r2, #48]	; 0x30
 80009f2:	4b5e      	ldr	r3, [pc, #376]	; (8000b6c <MX_GPIO_Init+0x214>)
 80009f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009fa:	607b      	str	r3, [r7, #4]
 80009fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80009fe:	2200      	movs	r2, #0
 8000a00:	f244 0181 	movw	r1, #16513	; 0x4081
 8000a04:	485a      	ldr	r0, [pc, #360]	; (8000b70 <MX_GPIO_Init+0x218>)
 8000a06:	f001 f981 	bl	8001d0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	2140      	movs	r1, #64	; 0x40
 8000a0e:	4859      	ldr	r0, [pc, #356]	; (8000b74 <MX_GPIO_Init+0x21c>)
 8000a10:	f001 f97c 	bl	8001d0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000a14:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a1a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000a1e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a20:	2300      	movs	r3, #0
 8000a22:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000a24:	f107 031c 	add.w	r3, r7, #28
 8000a28:	4619      	mov	r1, r3
 8000a2a:	4853      	ldr	r0, [pc, #332]	; (8000b78 <MX_GPIO_Init+0x220>)
 8000a2c:	f000 ffc2 	bl	80019b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000a30:	2332      	movs	r3, #50	; 0x32
 8000a32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a34:	2302      	movs	r3, #2
 8000a36:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a3c:	2303      	movs	r3, #3
 8000a3e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a40:	230b      	movs	r3, #11
 8000a42:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a44:	f107 031c 	add.w	r3, r7, #28
 8000a48:	4619      	mov	r1, r3
 8000a4a:	484b      	ldr	r0, [pc, #300]	; (8000b78 <MX_GPIO_Init+0x220>)
 8000a4c:	f000 ffb2 	bl	80019b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_CRS_DV_Pin;
 8000a50:	2382      	movs	r3, #130	; 0x82
 8000a52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a54:	2302      	movs	r3, #2
 8000a56:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a5c:	2303      	movs	r3, #3
 8000a5e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a60:	230b      	movs	r3, #11
 8000a62:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a64:	f107 031c 	add.w	r3, r7, #28
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4844      	ldr	r0, [pc, #272]	; (8000b7c <MX_GPIO_Init+0x224>)
 8000a6c:	f000 ffa2 	bl	80019b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000a70:	2304      	movs	r3, #4
 8000a72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a74:	2302      	movs	r3, #2
 8000a76:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a7c:	2303      	movs	r3, #3
 8000a7e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a80:	2307      	movs	r3, #7
 8000a82:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a84:	f107 031c 	add.w	r3, r7, #28
 8000a88:	4619      	mov	r1, r3
 8000a8a:	483c      	ldr	r0, [pc, #240]	; (8000b7c <MX_GPIO_Init+0x224>)
 8000a8c:	f000 ff92 	bl	80019b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000a90:	f244 0381 	movw	r3, #16513	; 0x4081
 8000a94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a96:	2301      	movs	r3, #1
 8000a98:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aa2:	f107 031c 	add.w	r3, r7, #28
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	4831      	ldr	r0, [pc, #196]	; (8000b70 <MX_GPIO_Init+0x218>)
 8000aaa:	f000 ff83 	bl	80019b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000aae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ab2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab4:	2302      	movs	r3, #2
 8000ab6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000abc:	2303      	movs	r3, #3
 8000abe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ac0:	230b      	movs	r3, #11
 8000ac2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000ac4:	f107 031c 	add.w	r3, r7, #28
 8000ac8:	4619      	mov	r1, r3
 8000aca:	4829      	ldr	r0, [pc, #164]	; (8000b70 <MX_GPIO_Init+0x218>)
 8000acc:	f000 ff72 	bl	80019b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000ad0:	2340      	movs	r3, #64	; 0x40
 8000ad2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ad4:	2301      	movs	r3, #1
 8000ad6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000adc:	2300      	movs	r3, #0
 8000ade:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000ae0:	f107 031c 	add.w	r3, r7, #28
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	4823      	ldr	r0, [pc, #140]	; (8000b74 <MX_GPIO_Init+0x21c>)
 8000ae8:	f000 ff64 	bl	80019b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000aec:	2380      	movs	r3, #128	; 0x80
 8000aee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000af0:	2300      	movs	r3, #0
 8000af2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af4:	2300      	movs	r3, #0
 8000af6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000af8:	f107 031c 	add.w	r3, r7, #28
 8000afc:	4619      	mov	r1, r3
 8000afe:	481d      	ldr	r0, [pc, #116]	; (8000b74 <MX_GPIO_Init+0x21c>)
 8000b00:	f000 ff58 	bl	80019b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000b04:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000b08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b0a:	2302      	movs	r3, #2
 8000b0c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b12:	2303      	movs	r3, #3
 8000b14:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000b16:	230a      	movs	r3, #10
 8000b18:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b1a:	f107 031c 	add.w	r3, r7, #28
 8000b1e:	4619      	mov	r1, r3
 8000b20:	4816      	ldr	r0, [pc, #88]	; (8000b7c <MX_GPIO_Init+0x224>)
 8000b22:	f000 ff47 	bl	80019b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000b26:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b30:	2300      	movs	r3, #0
 8000b32:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000b34:	f107 031c 	add.w	r3, r7, #28
 8000b38:	4619      	mov	r1, r3
 8000b3a:	4810      	ldr	r0, [pc, #64]	; (8000b7c <MX_GPIO_Init+0x224>)
 8000b3c:	f000 ff3a 	bl	80019b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000b40:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000b44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b46:	2302      	movs	r3, #2
 8000b48:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b4e:	2303      	movs	r3, #3
 8000b50:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b52:	230b      	movs	r3, #11
 8000b54:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b56:	f107 031c 	add.w	r3, r7, #28
 8000b5a:	4619      	mov	r1, r3
 8000b5c:	4805      	ldr	r0, [pc, #20]	; (8000b74 <MX_GPIO_Init+0x21c>)
 8000b5e:	f000 ff29 	bl	80019b4 <HAL_GPIO_Init>

}
 8000b62:	bf00      	nop
 8000b64:	3730      	adds	r7, #48	; 0x30
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	40023800 	.word	0x40023800
 8000b70:	40020400 	.word	0x40020400
 8000b74:	40021800 	.word	0x40021800
 8000b78:	40020800 	.word	0x40020800
 8000b7c:	40020000 	.word	0x40020000

08000b80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b84:	b672      	cpsid	i
}
 8000b86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b88:	e7fe      	b.n	8000b88 <Error_Handler+0x8>
	...

08000b8c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	b083      	sub	sp, #12
 8000b90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000b92:	4b0f      	ldr	r3, [pc, #60]	; (8000bd0 <HAL_MspInit+0x44>)
 8000b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b96:	4a0e      	ldr	r2, [pc, #56]	; (8000bd0 <HAL_MspInit+0x44>)
 8000b98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b9c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b9e:	4b0c      	ldr	r3, [pc, #48]	; (8000bd0 <HAL_MspInit+0x44>)
 8000ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ba2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ba6:	607b      	str	r3, [r7, #4]
 8000ba8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000baa:	4b09      	ldr	r3, [pc, #36]	; (8000bd0 <HAL_MspInit+0x44>)
 8000bac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bae:	4a08      	ldr	r2, [pc, #32]	; (8000bd0 <HAL_MspInit+0x44>)
 8000bb0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bb4:	6453      	str	r3, [r2, #68]	; 0x44
 8000bb6:	4b06      	ldr	r3, [pc, #24]	; (8000bd0 <HAL_MspInit+0x44>)
 8000bb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bbe:	603b      	str	r3, [r7, #0]
 8000bc0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bc2:	bf00      	nop
 8000bc4:	370c      	adds	r7, #12
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop
 8000bd0:	40023800 	.word	0x40023800

08000bd4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b08a      	sub	sp, #40	; 0x28
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bdc:	f107 0314 	add.w	r3, r7, #20
 8000be0:	2200      	movs	r2, #0
 8000be2:	601a      	str	r2, [r3, #0]
 8000be4:	605a      	str	r2, [r3, #4]
 8000be6:	609a      	str	r2, [r3, #8]
 8000be8:	60da      	str	r2, [r3, #12]
 8000bea:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	4a15      	ldr	r2, [pc, #84]	; (8000c48 <HAL_ADC_MspInit+0x74>)
 8000bf2:	4293      	cmp	r3, r2
 8000bf4:	d123      	bne.n	8000c3e <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000bf6:	4b15      	ldr	r3, [pc, #84]	; (8000c4c <HAL_ADC_MspInit+0x78>)
 8000bf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bfa:	4a14      	ldr	r2, [pc, #80]	; (8000c4c <HAL_ADC_MspInit+0x78>)
 8000bfc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c00:	6453      	str	r3, [r2, #68]	; 0x44
 8000c02:	4b12      	ldr	r3, [pc, #72]	; (8000c4c <HAL_ADC_MspInit+0x78>)
 8000c04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c0a:	613b      	str	r3, [r7, #16]
 8000c0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c0e:	4b0f      	ldr	r3, [pc, #60]	; (8000c4c <HAL_ADC_MspInit+0x78>)
 8000c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c12:	4a0e      	ldr	r2, [pc, #56]	; (8000c4c <HAL_ADC_MspInit+0x78>)
 8000c14:	f043 0301 	orr.w	r3, r3, #1
 8000c18:	6313      	str	r3, [r2, #48]	; 0x30
 8000c1a:	4b0c      	ldr	r3, [pc, #48]	; (8000c4c <HAL_ADC_MspInit+0x78>)
 8000c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1e:	f003 0301 	and.w	r3, r3, #1
 8000c22:	60fb      	str	r3, [r7, #12]
 8000c24:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000c26:	2308      	movs	r3, #8
 8000c28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c2a:	2303      	movs	r3, #3
 8000c2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c32:	f107 0314 	add.w	r3, r7, #20
 8000c36:	4619      	mov	r1, r3
 8000c38:	4805      	ldr	r0, [pc, #20]	; (8000c50 <HAL_ADC_MspInit+0x7c>)
 8000c3a:	f000 febb 	bl	80019b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000c3e:	bf00      	nop
 8000c40:	3728      	adds	r7, #40	; 0x28
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	40012000 	.word	0x40012000
 8000c4c:	40023800 	.word	0x40023800
 8000c50:	40020000 	.word	0x40020000

08000c54 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c54:	b480      	push	{r7}
 8000c56:	b085      	sub	sp, #20
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000c64:	d10b      	bne.n	8000c7e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000c66:	4b09      	ldr	r3, [pc, #36]	; (8000c8c <HAL_TIM_Base_MspInit+0x38>)
 8000c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c6a:	4a08      	ldr	r2, [pc, #32]	; (8000c8c <HAL_TIM_Base_MspInit+0x38>)
 8000c6c:	f043 0301 	orr.w	r3, r3, #1
 8000c70:	6413      	str	r3, [r2, #64]	; 0x40
 8000c72:	4b06      	ldr	r3, [pc, #24]	; (8000c8c <HAL_TIM_Base_MspInit+0x38>)
 8000c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c76:	f003 0301 	and.w	r3, r3, #1
 8000c7a:	60fb      	str	r3, [r7, #12]
 8000c7c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000c7e:	bf00      	nop
 8000c80:	3714      	adds	r7, #20
 8000c82:	46bd      	mov	sp, r7
 8000c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c88:	4770      	bx	lr
 8000c8a:	bf00      	nop
 8000c8c:	40023800 	.word	0x40023800

08000c90 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b088      	sub	sp, #32
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c98:	f107 030c 	add.w	r3, r7, #12
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	601a      	str	r2, [r3, #0]
 8000ca0:	605a      	str	r2, [r3, #4]
 8000ca2:	609a      	str	r2, [r3, #8]
 8000ca4:	60da      	str	r2, [r3, #12]
 8000ca6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000cb0:	d11b      	bne.n	8000cea <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cb2:	4b10      	ldr	r3, [pc, #64]	; (8000cf4 <HAL_TIM_MspPostInit+0x64>)
 8000cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb6:	4a0f      	ldr	r2, [pc, #60]	; (8000cf4 <HAL_TIM_MspPostInit+0x64>)
 8000cb8:	f043 0301 	orr.w	r3, r3, #1
 8000cbc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cbe:	4b0d      	ldr	r3, [pc, #52]	; (8000cf4 <HAL_TIM_MspPostInit+0x64>)
 8000cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc2:	f003 0301 	and.w	r3, r3, #1
 8000cc6:	60bb      	str	r3, [r7, #8]
 8000cc8:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000cca:	2320      	movs	r3, #32
 8000ccc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cce:	2302      	movs	r3, #2
 8000cd0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000cda:	2301      	movs	r3, #1
 8000cdc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cde:	f107 030c 	add.w	r3, r7, #12
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	4804      	ldr	r0, [pc, #16]	; (8000cf8 <HAL_TIM_MspPostInit+0x68>)
 8000ce6:	f000 fe65 	bl	80019b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000cea:	bf00      	nop
 8000cec:	3720      	adds	r7, #32
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	40023800 	.word	0x40023800
 8000cf8:	40020000 	.word	0x40020000

08000cfc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b0ae      	sub	sp, #184	; 0xb8
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d04:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000d08:	2200      	movs	r2, #0
 8000d0a:	601a      	str	r2, [r3, #0]
 8000d0c:	605a      	str	r2, [r3, #4]
 8000d0e:	609a      	str	r2, [r3, #8]
 8000d10:	60da      	str	r2, [r3, #12]
 8000d12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d14:	f107 0314 	add.w	r3, r7, #20
 8000d18:	2290      	movs	r2, #144	; 0x90
 8000d1a:	2100      	movs	r1, #0
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f003 fdfb 	bl	8004918 <memset>
  if(huart->Instance==USART3)
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	4a22      	ldr	r2, [pc, #136]	; (8000db0 <HAL_UART_MspInit+0xb4>)
 8000d28:	4293      	cmp	r3, r2
 8000d2a:	d13c      	bne.n	8000da6 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000d2c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d30:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000d32:	2300      	movs	r3, #0
 8000d34:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d36:	f107 0314 	add.w	r3, r7, #20
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f001 fcd2 	bl	80026e4 <HAL_RCCEx_PeriphCLKConfig>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d001      	beq.n	8000d4a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000d46:	f7ff ff1b 	bl	8000b80 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d4a:	4b1a      	ldr	r3, [pc, #104]	; (8000db4 <HAL_UART_MspInit+0xb8>)
 8000d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d4e:	4a19      	ldr	r2, [pc, #100]	; (8000db4 <HAL_UART_MspInit+0xb8>)
 8000d50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d54:	6413      	str	r3, [r2, #64]	; 0x40
 8000d56:	4b17      	ldr	r3, [pc, #92]	; (8000db4 <HAL_UART_MspInit+0xb8>)
 8000d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d5a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d5e:	613b      	str	r3, [r7, #16]
 8000d60:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d62:	4b14      	ldr	r3, [pc, #80]	; (8000db4 <HAL_UART_MspInit+0xb8>)
 8000d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d66:	4a13      	ldr	r2, [pc, #76]	; (8000db4 <HAL_UART_MspInit+0xb8>)
 8000d68:	f043 0308 	orr.w	r3, r3, #8
 8000d6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d6e:	4b11      	ldr	r3, [pc, #68]	; (8000db4 <HAL_UART_MspInit+0xb8>)
 8000d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d72:	f003 0308 	and.w	r3, r3, #8
 8000d76:	60fb      	str	r3, [r7, #12]
 8000d78:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000d7a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d7e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d82:	2302      	movs	r3, #2
 8000d84:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d8e:	2303      	movs	r3, #3
 8000d90:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000d94:	2307      	movs	r3, #7
 8000d96:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d9a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000d9e:	4619      	mov	r1, r3
 8000da0:	4805      	ldr	r0, [pc, #20]	; (8000db8 <HAL_UART_MspInit+0xbc>)
 8000da2:	f000 fe07 	bl	80019b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000da6:	bf00      	nop
 8000da8:	37b8      	adds	r7, #184	; 0xb8
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	40004800 	.word	0x40004800
 8000db4:	40023800 	.word	0x40023800
 8000db8:	40020c00 	.word	0x40020c00

08000dbc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000dc0:	e7fe      	b.n	8000dc0 <NMI_Handler+0x4>

08000dc2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dc2:	b480      	push	{r7}
 8000dc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dc6:	e7fe      	b.n	8000dc6 <HardFault_Handler+0x4>

08000dc8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dcc:	e7fe      	b.n	8000dcc <MemManage_Handler+0x4>

08000dce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dce:	b480      	push	{r7}
 8000dd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dd2:	e7fe      	b.n	8000dd2 <BusFault_Handler+0x4>

08000dd4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dd8:	e7fe      	b.n	8000dd8 <UsageFault_Handler+0x4>

08000dda <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dda:	b480      	push	{r7}
 8000ddc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dde:	bf00      	nop
 8000de0:	46bd      	mov	sp, r7
 8000de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de6:	4770      	bx	lr

08000de8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dec:	bf00      	nop
 8000dee:	46bd      	mov	sp, r7
 8000df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df4:	4770      	bx	lr

08000df6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000df6:	b480      	push	{r7}
 8000df8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dfa:	bf00      	nop
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e02:	4770      	bx	lr

08000e04 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e08:	f000 f8b0 	bl	8000f6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e0c:	bf00      	nop
 8000e0e:	bd80      	pop	{r7, pc}

08000e10 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b086      	sub	sp, #24
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e18:	4a14      	ldr	r2, [pc, #80]	; (8000e6c <_sbrk+0x5c>)
 8000e1a:	4b15      	ldr	r3, [pc, #84]	; (8000e70 <_sbrk+0x60>)
 8000e1c:	1ad3      	subs	r3, r2, r3
 8000e1e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e20:	697b      	ldr	r3, [r7, #20]
 8000e22:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e24:	4b13      	ldr	r3, [pc, #76]	; (8000e74 <_sbrk+0x64>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d102      	bne.n	8000e32 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e2c:	4b11      	ldr	r3, [pc, #68]	; (8000e74 <_sbrk+0x64>)
 8000e2e:	4a12      	ldr	r2, [pc, #72]	; (8000e78 <_sbrk+0x68>)
 8000e30:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e32:	4b10      	ldr	r3, [pc, #64]	; (8000e74 <_sbrk+0x64>)
 8000e34:	681a      	ldr	r2, [r3, #0]
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	4413      	add	r3, r2
 8000e3a:	693a      	ldr	r2, [r7, #16]
 8000e3c:	429a      	cmp	r2, r3
 8000e3e:	d207      	bcs.n	8000e50 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e40:	f003 fd40 	bl	80048c4 <__errno>
 8000e44:	4603      	mov	r3, r0
 8000e46:	220c      	movs	r2, #12
 8000e48:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e4a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e4e:	e009      	b.n	8000e64 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e50:	4b08      	ldr	r3, [pc, #32]	; (8000e74 <_sbrk+0x64>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e56:	4b07      	ldr	r3, [pc, #28]	; (8000e74 <_sbrk+0x64>)
 8000e58:	681a      	ldr	r2, [r3, #0]
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	4413      	add	r3, r2
 8000e5e:	4a05      	ldr	r2, [pc, #20]	; (8000e74 <_sbrk+0x64>)
 8000e60:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e62:	68fb      	ldr	r3, [r7, #12]
}
 8000e64:	4618      	mov	r0, r3
 8000e66:	3718      	adds	r7, #24
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	20080000 	.word	0x20080000
 8000e70:	00000400 	.word	0x00000400
 8000e74:	200001a8 	.word	0x200001a8
 8000e78:	200001c0 	.word	0x200001c0

08000e7c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e80:	4b06      	ldr	r3, [pc, #24]	; (8000e9c <SystemInit+0x20>)
 8000e82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e86:	4a05      	ldr	r2, [pc, #20]	; (8000e9c <SystemInit+0x20>)
 8000e88:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e8c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e90:	bf00      	nop
 8000e92:	46bd      	mov	sp, r7
 8000e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e98:	4770      	bx	lr
 8000e9a:	bf00      	nop
 8000e9c:	e000ed00 	.word	0xe000ed00

08000ea0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000ea0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ed8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ea4:	480d      	ldr	r0, [pc, #52]	; (8000edc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000ea6:	490e      	ldr	r1, [pc, #56]	; (8000ee0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ea8:	4a0e      	ldr	r2, [pc, #56]	; (8000ee4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000eaa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000eac:	e002      	b.n	8000eb4 <LoopCopyDataInit>

08000eae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000eae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000eb0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000eb2:	3304      	adds	r3, #4

08000eb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000eb4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000eb6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000eb8:	d3f9      	bcc.n	8000eae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000eba:	4a0b      	ldr	r2, [pc, #44]	; (8000ee8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ebc:	4c0b      	ldr	r4, [pc, #44]	; (8000eec <LoopFillZerobss+0x26>)
  movs r3, #0
 8000ebe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ec0:	e001      	b.n	8000ec6 <LoopFillZerobss>

08000ec2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ec2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ec4:	3204      	adds	r2, #4

08000ec6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ec6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ec8:	d3fb      	bcc.n	8000ec2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000eca:	f7ff ffd7 	bl	8000e7c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ece:	f003 fcff 	bl	80048d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ed2:	f7ff fb8f 	bl	80005f4 <main>
  bx  lr    
 8000ed6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ed8:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000edc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ee0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000ee4:	08005280 	.word	0x08005280
  ldr r2, =_sbss
 8000ee8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000eec:	200001c0 	.word	0x200001c0

08000ef0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ef0:	e7fe      	b.n	8000ef0 <ADC_IRQHandler>

08000ef2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ef2:	b580      	push	{r7, lr}
 8000ef4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ef6:	2003      	movs	r0, #3
 8000ef8:	f000 fd28 	bl	800194c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000efc:	2000      	movs	r0, #0
 8000efe:	f000 f805 	bl	8000f0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f02:	f7ff fe43 	bl	8000b8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f06:	2300      	movs	r3, #0
}
 8000f08:	4618      	mov	r0, r3
 8000f0a:	bd80      	pop	{r7, pc}

08000f0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b082      	sub	sp, #8
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f14:	4b12      	ldr	r3, [pc, #72]	; (8000f60 <HAL_InitTick+0x54>)
 8000f16:	681a      	ldr	r2, [r3, #0]
 8000f18:	4b12      	ldr	r3, [pc, #72]	; (8000f64 <HAL_InitTick+0x58>)
 8000f1a:	781b      	ldrb	r3, [r3, #0]
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f22:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f26:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f000 fd35 	bl	800199a <HAL_SYSTICK_Config>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d001      	beq.n	8000f3a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f36:	2301      	movs	r3, #1
 8000f38:	e00e      	b.n	8000f58 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	2b0f      	cmp	r3, #15
 8000f3e:	d80a      	bhi.n	8000f56 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f40:	2200      	movs	r2, #0
 8000f42:	6879      	ldr	r1, [r7, #4]
 8000f44:	f04f 30ff 	mov.w	r0, #4294967295
 8000f48:	f000 fd0b 	bl	8001962 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f4c:	4a06      	ldr	r2, [pc, #24]	; (8000f68 <HAL_InitTick+0x5c>)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f52:	2300      	movs	r3, #0
 8000f54:	e000      	b.n	8000f58 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f56:	2301      	movs	r3, #1
}
 8000f58:	4618      	mov	r0, r3
 8000f5a:	3708      	adds	r7, #8
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	20000000 	.word	0x20000000
 8000f64:	20000008 	.word	0x20000008
 8000f68:	20000004 	.word	0x20000004

08000f6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f70:	4b06      	ldr	r3, [pc, #24]	; (8000f8c <HAL_IncTick+0x20>)
 8000f72:	781b      	ldrb	r3, [r3, #0]
 8000f74:	461a      	mov	r2, r3
 8000f76:	4b06      	ldr	r3, [pc, #24]	; (8000f90 <HAL_IncTick+0x24>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	4413      	add	r3, r2
 8000f7c:	4a04      	ldr	r2, [pc, #16]	; (8000f90 <HAL_IncTick+0x24>)
 8000f7e:	6013      	str	r3, [r2, #0]
}
 8000f80:	bf00      	nop
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop
 8000f8c:	20000008 	.word	0x20000008
 8000f90:	200001ac 	.word	0x200001ac

08000f94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  return uwTick;
 8000f98:	4b03      	ldr	r3, [pc, #12]	; (8000fa8 <HAL_GetTick+0x14>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
}
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop
 8000fa8:	200001ac 	.word	0x200001ac

08000fac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b084      	sub	sp, #16
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fb4:	f7ff ffee 	bl	8000f94 <HAL_GetTick>
 8000fb8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fc4:	d005      	beq.n	8000fd2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fc6:	4b0a      	ldr	r3, [pc, #40]	; (8000ff0 <HAL_Delay+0x44>)
 8000fc8:	781b      	ldrb	r3, [r3, #0]
 8000fca:	461a      	mov	r2, r3
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	4413      	add	r3, r2
 8000fd0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000fd2:	bf00      	nop
 8000fd4:	f7ff ffde 	bl	8000f94 <HAL_GetTick>
 8000fd8:	4602      	mov	r2, r0
 8000fda:	68bb      	ldr	r3, [r7, #8]
 8000fdc:	1ad3      	subs	r3, r2, r3
 8000fde:	68fa      	ldr	r2, [r7, #12]
 8000fe0:	429a      	cmp	r2, r3
 8000fe2:	d8f7      	bhi.n	8000fd4 <HAL_Delay+0x28>
  {
  }
}
 8000fe4:	bf00      	nop
 8000fe6:	bf00      	nop
 8000fe8:	3710      	adds	r7, #16
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	20000008 	.word	0x20000008

08000ff4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b084      	sub	sp, #16
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	2b00      	cmp	r3, #0
 8001004:	d101      	bne.n	800100a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001006:	2301      	movs	r3, #1
 8001008:	e031      	b.n	800106e <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800100e:	2b00      	cmp	r3, #0
 8001010:	d109      	bne.n	8001026 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001012:	6878      	ldr	r0, [r7, #4]
 8001014:	f7ff fdde 	bl	8000bd4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	2200      	movs	r2, #0
 800101c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	2200      	movs	r2, #0
 8001022:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800102a:	f003 0310 	and.w	r3, r3, #16
 800102e:	2b00      	cmp	r3, #0
 8001030:	d116      	bne.n	8001060 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001036:	4b10      	ldr	r3, [pc, #64]	; (8001078 <HAL_ADC_Init+0x84>)
 8001038:	4013      	ands	r3, r2
 800103a:	f043 0202 	orr.w	r2, r3, #2
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001042:	6878      	ldr	r0, [r7, #4]
 8001044:	f000 fad6 	bl	80015f4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	2200      	movs	r2, #0
 800104c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001052:	f023 0303 	bic.w	r3, r3, #3
 8001056:	f043 0201 	orr.w	r2, r3, #1
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	641a      	str	r2, [r3, #64]	; 0x40
 800105e:	e001      	b.n	8001064 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001060:	2301      	movs	r3, #1
 8001062:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	2200      	movs	r2, #0
 8001068:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800106c:	7bfb      	ldrb	r3, [r7, #15]
}
 800106e:	4618      	mov	r0, r3
 8001070:	3710      	adds	r7, #16
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	ffffeefd 	.word	0xffffeefd

0800107c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800107c:	b480      	push	{r7}
 800107e:	b085      	sub	sp, #20
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8001084:	2300      	movs	r3, #0
 8001086:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800108e:	2b01      	cmp	r3, #1
 8001090:	d101      	bne.n	8001096 <HAL_ADC_Start+0x1a>
 8001092:	2302      	movs	r3, #2
 8001094:	e0ad      	b.n	80011f2 <HAL_ADC_Start+0x176>
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	2201      	movs	r2, #1
 800109a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	689b      	ldr	r3, [r3, #8]
 80010a4:	f003 0301 	and.w	r3, r3, #1
 80010a8:	2b01      	cmp	r3, #1
 80010aa:	d018      	beq.n	80010de <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	689a      	ldr	r2, [r3, #8]
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f042 0201 	orr.w	r2, r2, #1
 80010ba:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80010bc:	4b50      	ldr	r3, [pc, #320]	; (8001200 <HAL_ADC_Start+0x184>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4a50      	ldr	r2, [pc, #320]	; (8001204 <HAL_ADC_Start+0x188>)
 80010c2:	fba2 2303 	umull	r2, r3, r2, r3
 80010c6:	0c9a      	lsrs	r2, r3, #18
 80010c8:	4613      	mov	r3, r2
 80010ca:	005b      	lsls	r3, r3, #1
 80010cc:	4413      	add	r3, r2
 80010ce:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 80010d0:	e002      	b.n	80010d8 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	3b01      	subs	r3, #1
 80010d6:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d1f9      	bne.n	80010d2 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	689b      	ldr	r3, [r3, #8]
 80010e4:	f003 0301 	and.w	r3, r3, #1
 80010e8:	2b01      	cmp	r3, #1
 80010ea:	d175      	bne.n	80011d8 <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80010f0:	4b45      	ldr	r3, [pc, #276]	; (8001208 <HAL_ADC_Start+0x18c>)
 80010f2:	4013      	ands	r3, r2
 80010f4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001106:	2b00      	cmp	r3, #0
 8001108:	d007      	beq.n	800111a <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800110e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001112:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800111e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001122:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001126:	d106      	bne.n	8001136 <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800112c:	f023 0206 	bic.w	r2, r3, #6
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	645a      	str	r2, [r3, #68]	; 0x44
 8001134:	e002      	b.n	800113c <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	2200      	movs	r2, #0
 800113a:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	2200      	movs	r2, #0
 8001140:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800114c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 800114e:	4b2f      	ldr	r3, [pc, #188]	; (800120c <HAL_ADC_Start+0x190>)
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	f003 031f 	and.w	r3, r3, #31
 8001156:	2b00      	cmp	r3, #0
 8001158:	d10f      	bne.n	800117a <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	689b      	ldr	r3, [r3, #8]
 8001160:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001164:	2b00      	cmp	r3, #0
 8001166:	d143      	bne.n	80011f0 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	689a      	ldr	r2, [r3, #8]
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001176:	609a      	str	r2, [r3, #8]
 8001178:	e03a      	b.n	80011f0 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	4a24      	ldr	r2, [pc, #144]	; (8001210 <HAL_ADC_Start+0x194>)
 8001180:	4293      	cmp	r3, r2
 8001182:	d10e      	bne.n	80011a2 <HAL_ADC_Start+0x126>
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	689b      	ldr	r3, [r3, #8]
 800118a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800118e:	2b00      	cmp	r3, #0
 8001190:	d107      	bne.n	80011a2 <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	689a      	ldr	r2, [r3, #8]
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80011a0:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 80011a2:	4b1a      	ldr	r3, [pc, #104]	; (800120c <HAL_ADC_Start+0x190>)
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	f003 0310 	and.w	r3, r3, #16
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d120      	bne.n	80011f0 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	4a18      	ldr	r2, [pc, #96]	; (8001214 <HAL_ADC_Start+0x198>)
 80011b4:	4293      	cmp	r3, r2
 80011b6:	d11b      	bne.n	80011f0 <HAL_ADC_Start+0x174>
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	689b      	ldr	r3, [r3, #8]
 80011be:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d114      	bne.n	80011f0 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	689a      	ldr	r2, [r3, #8]
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80011d4:	609a      	str	r2, [r3, #8]
 80011d6:	e00b      	b.n	80011f0 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011dc:	f043 0210 	orr.w	r2, r3, #16
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011e8:	f043 0201 	orr.w	r2, r3, #1
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80011f0:	2300      	movs	r3, #0
}
 80011f2:	4618      	mov	r0, r3
 80011f4:	3714      	adds	r7, #20
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr
 80011fe:	bf00      	nop
 8001200:	20000000 	.word	0x20000000
 8001204:	431bde83 	.word	0x431bde83
 8001208:	fffff8fe 	.word	0xfffff8fe
 800120c:	40012300 	.word	0x40012300
 8001210:	40012000 	.word	0x40012000
 8001214:	40012200 	.word	0x40012200

08001218 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b084      	sub	sp, #16
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
 8001220:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001222:	2300      	movs	r3, #0
 8001224:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	689b      	ldr	r3, [r3, #8]
 800122c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001230:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001234:	d113      	bne.n	800125e <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	689b      	ldr	r3, [r3, #8]
 800123c:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001240:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001244:	d10b      	bne.n	800125e <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800124a:	f043 0220 	orr.w	r2, r3, #32
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	2200      	movs	r2, #0
 8001256:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 800125a:	2301      	movs	r3, #1
 800125c:	e063      	b.n	8001326 <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 800125e:	f7ff fe99 	bl	8000f94 <HAL_GetTick>
 8001262:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001264:	e021      	b.n	80012aa <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	f1b3 3fff 	cmp.w	r3, #4294967295
 800126c:	d01d      	beq.n	80012aa <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	2b00      	cmp	r3, #0
 8001272:	d007      	beq.n	8001284 <HAL_ADC_PollForConversion+0x6c>
 8001274:	f7ff fe8e 	bl	8000f94 <HAL_GetTick>
 8001278:	4602      	mov	r2, r0
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	1ad3      	subs	r3, r2, r3
 800127e:	683a      	ldr	r2, [r7, #0]
 8001280:	429a      	cmp	r2, r3
 8001282:	d212      	bcs.n	80012aa <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f003 0302 	and.w	r3, r3, #2
 800128e:	2b02      	cmp	r3, #2
 8001290:	d00b      	beq.n	80012aa <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001296:	f043 0204 	orr.w	r2, r3, #4
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	2200      	movs	r2, #0
 80012a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 80012a6:	2303      	movs	r3, #3
 80012a8:	e03d      	b.n	8001326 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f003 0302 	and.w	r3, r3, #2
 80012b4:	2b02      	cmp	r3, #2
 80012b6:	d1d6      	bne.n	8001266 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f06f 0212 	mvn.w	r2, #18
 80012c0:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	689b      	ldr	r3, [r3, #8]
 80012d4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d123      	bne.n	8001324 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d11f      	bne.n	8001324 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012ea:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d006      	beq.n	8001300 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	689b      	ldr	r3, [r3, #8]
 80012f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d111      	bne.n	8001324 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001304:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001310:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001314:	2b00      	cmp	r3, #0
 8001316:	d105      	bne.n	8001324 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800131c:	f043 0201 	orr.w	r2, r3, #1
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001324:	2300      	movs	r3, #0
}
 8001326:	4618      	mov	r0, r3
 8001328:	3710      	adds	r7, #16
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}

0800132e <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800132e:	b480      	push	{r7}
 8001330:	b083      	sub	sp, #12
 8001332:	af00      	add	r7, sp, #0
 8001334:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800133c:	4618      	mov	r0, r3
 800133e:	370c      	adds	r7, #12
 8001340:	46bd      	mov	sp, r7
 8001342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001346:	4770      	bx	lr

08001348 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001348:	b480      	push	{r7}
 800134a:	b085      	sub	sp, #20
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
 8001350:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8001352:	2300      	movs	r3, #0
 8001354:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800135c:	2b01      	cmp	r3, #1
 800135e:	d101      	bne.n	8001364 <HAL_ADC_ConfigChannel+0x1c>
 8001360:	2302      	movs	r3, #2
 8001362:	e136      	b.n	80015d2 <HAL_ADC_ConfigChannel+0x28a>
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	2201      	movs	r2, #1
 8001368:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	2b09      	cmp	r3, #9
 8001372:	d93a      	bls.n	80013ea <HAL_ADC_ConfigChannel+0xa2>
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800137c:	d035      	beq.n	80013ea <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	68d9      	ldr	r1, [r3, #12]
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	b29b      	uxth	r3, r3
 800138a:	461a      	mov	r2, r3
 800138c:	4613      	mov	r3, r2
 800138e:	005b      	lsls	r3, r3, #1
 8001390:	4413      	add	r3, r2
 8001392:	3b1e      	subs	r3, #30
 8001394:	2207      	movs	r2, #7
 8001396:	fa02 f303 	lsl.w	r3, r2, r3
 800139a:	43da      	mvns	r2, r3
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	400a      	ands	r2, r1
 80013a2:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4a8d      	ldr	r2, [pc, #564]	; (80015e0 <HAL_ADC_ConfigChannel+0x298>)
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d10a      	bne.n	80013c4 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	68d9      	ldr	r1, [r3, #12]
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	689b      	ldr	r3, [r3, #8]
 80013b8:	061a      	lsls	r2, r3, #24
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	430a      	orrs	r2, r1
 80013c0:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80013c2:	e035      	b.n	8001430 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	68d9      	ldr	r1, [r3, #12]
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	689a      	ldr	r2, [r3, #8]
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	b29b      	uxth	r3, r3
 80013d4:	4618      	mov	r0, r3
 80013d6:	4603      	mov	r3, r0
 80013d8:	005b      	lsls	r3, r3, #1
 80013da:	4403      	add	r3, r0
 80013dc:	3b1e      	subs	r3, #30
 80013de:	409a      	lsls	r2, r3
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	430a      	orrs	r2, r1
 80013e6:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80013e8:	e022      	b.n	8001430 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	6919      	ldr	r1, [r3, #16]
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	b29b      	uxth	r3, r3
 80013f6:	461a      	mov	r2, r3
 80013f8:	4613      	mov	r3, r2
 80013fa:	005b      	lsls	r3, r3, #1
 80013fc:	4413      	add	r3, r2
 80013fe:	2207      	movs	r2, #7
 8001400:	fa02 f303 	lsl.w	r3, r2, r3
 8001404:	43da      	mvns	r2, r3
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	400a      	ands	r2, r1
 800140c:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	6919      	ldr	r1, [r3, #16]
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	689a      	ldr	r2, [r3, #8]
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	b29b      	uxth	r3, r3
 800141e:	4618      	mov	r0, r3
 8001420:	4603      	mov	r3, r0
 8001422:	005b      	lsls	r3, r3, #1
 8001424:	4403      	add	r3, r0
 8001426:	409a      	lsls	r2, r3
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	430a      	orrs	r2, r1
 800142e:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	2b06      	cmp	r3, #6
 8001436:	d824      	bhi.n	8001482 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	685a      	ldr	r2, [r3, #4]
 8001442:	4613      	mov	r3, r2
 8001444:	009b      	lsls	r3, r3, #2
 8001446:	4413      	add	r3, r2
 8001448:	3b05      	subs	r3, #5
 800144a:	221f      	movs	r2, #31
 800144c:	fa02 f303 	lsl.w	r3, r2, r3
 8001450:	43da      	mvns	r2, r3
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	400a      	ands	r2, r1
 8001458:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	b29b      	uxth	r3, r3
 8001466:	4618      	mov	r0, r3
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	685a      	ldr	r2, [r3, #4]
 800146c:	4613      	mov	r3, r2
 800146e:	009b      	lsls	r3, r3, #2
 8001470:	4413      	add	r3, r2
 8001472:	3b05      	subs	r3, #5
 8001474:	fa00 f203 	lsl.w	r2, r0, r3
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	430a      	orrs	r2, r1
 800147e:	635a      	str	r2, [r3, #52]	; 0x34
 8001480:	e04c      	b.n	800151c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	2b0c      	cmp	r3, #12
 8001488:	d824      	bhi.n	80014d4 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	685a      	ldr	r2, [r3, #4]
 8001494:	4613      	mov	r3, r2
 8001496:	009b      	lsls	r3, r3, #2
 8001498:	4413      	add	r3, r2
 800149a:	3b23      	subs	r3, #35	; 0x23
 800149c:	221f      	movs	r2, #31
 800149e:	fa02 f303 	lsl.w	r3, r2, r3
 80014a2:	43da      	mvns	r2, r3
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	400a      	ands	r2, r1
 80014aa:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	b29b      	uxth	r3, r3
 80014b8:	4618      	mov	r0, r3
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	685a      	ldr	r2, [r3, #4]
 80014be:	4613      	mov	r3, r2
 80014c0:	009b      	lsls	r3, r3, #2
 80014c2:	4413      	add	r3, r2
 80014c4:	3b23      	subs	r3, #35	; 0x23
 80014c6:	fa00 f203 	lsl.w	r2, r0, r3
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	430a      	orrs	r2, r1
 80014d0:	631a      	str	r2, [r3, #48]	; 0x30
 80014d2:	e023      	b.n	800151c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	685a      	ldr	r2, [r3, #4]
 80014de:	4613      	mov	r3, r2
 80014e0:	009b      	lsls	r3, r3, #2
 80014e2:	4413      	add	r3, r2
 80014e4:	3b41      	subs	r3, #65	; 0x41
 80014e6:	221f      	movs	r2, #31
 80014e8:	fa02 f303 	lsl.w	r3, r2, r3
 80014ec:	43da      	mvns	r2, r3
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	400a      	ands	r2, r1
 80014f4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	b29b      	uxth	r3, r3
 8001502:	4618      	mov	r0, r3
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	685a      	ldr	r2, [r3, #4]
 8001508:	4613      	mov	r3, r2
 800150a:	009b      	lsls	r3, r3, #2
 800150c:	4413      	add	r3, r2
 800150e:	3b41      	subs	r3, #65	; 0x41
 8001510:	fa00 f203 	lsl.w	r2, r0, r3
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	430a      	orrs	r2, r1
 800151a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a30      	ldr	r2, [pc, #192]	; (80015e4 <HAL_ADC_ConfigChannel+0x29c>)
 8001522:	4293      	cmp	r3, r2
 8001524:	d10a      	bne.n	800153c <HAL_ADC_ConfigChannel+0x1f4>
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800152e:	d105      	bne.n	800153c <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8001530:	4b2d      	ldr	r3, [pc, #180]	; (80015e8 <HAL_ADC_ConfigChannel+0x2a0>)
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	4a2c      	ldr	r2, [pc, #176]	; (80015e8 <HAL_ADC_ConfigChannel+0x2a0>)
 8001536:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800153a:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4a28      	ldr	r2, [pc, #160]	; (80015e4 <HAL_ADC_ConfigChannel+0x29c>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d10f      	bne.n	8001566 <HAL_ADC_ConfigChannel+0x21e>
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	2b12      	cmp	r3, #18
 800154c:	d10b      	bne.n	8001566 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 800154e:	4b26      	ldr	r3, [pc, #152]	; (80015e8 <HAL_ADC_ConfigChannel+0x2a0>)
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	4a25      	ldr	r2, [pc, #148]	; (80015e8 <HAL_ADC_ConfigChannel+0x2a0>)
 8001554:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001558:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800155a:	4b23      	ldr	r3, [pc, #140]	; (80015e8 <HAL_ADC_ConfigChannel+0x2a0>)
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	4a22      	ldr	r2, [pc, #136]	; (80015e8 <HAL_ADC_ConfigChannel+0x2a0>)
 8001560:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001564:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4a1e      	ldr	r2, [pc, #120]	; (80015e4 <HAL_ADC_ConfigChannel+0x29c>)
 800156c:	4293      	cmp	r3, r2
 800156e:	d12b      	bne.n	80015c8 <HAL_ADC_ConfigChannel+0x280>
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a1a      	ldr	r2, [pc, #104]	; (80015e0 <HAL_ADC_ConfigChannel+0x298>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d003      	beq.n	8001582 <HAL_ADC_ConfigChannel+0x23a>
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	2b11      	cmp	r3, #17
 8001580:	d122      	bne.n	80015c8 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8001582:	4b19      	ldr	r3, [pc, #100]	; (80015e8 <HAL_ADC_ConfigChannel+0x2a0>)
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	4a18      	ldr	r2, [pc, #96]	; (80015e8 <HAL_ADC_ConfigChannel+0x2a0>)
 8001588:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800158c:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800158e:	4b16      	ldr	r3, [pc, #88]	; (80015e8 <HAL_ADC_ConfigChannel+0x2a0>)
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	4a15      	ldr	r2, [pc, #84]	; (80015e8 <HAL_ADC_ConfigChannel+0x2a0>)
 8001594:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001598:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4a10      	ldr	r2, [pc, #64]	; (80015e0 <HAL_ADC_ConfigChannel+0x298>)
 80015a0:	4293      	cmp	r3, r2
 80015a2:	d111      	bne.n	80015c8 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80015a4:	4b11      	ldr	r3, [pc, #68]	; (80015ec <HAL_ADC_ConfigChannel+0x2a4>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4a11      	ldr	r2, [pc, #68]	; (80015f0 <HAL_ADC_ConfigChannel+0x2a8>)
 80015aa:	fba2 2303 	umull	r2, r3, r2, r3
 80015ae:	0c9a      	lsrs	r2, r3, #18
 80015b0:	4613      	mov	r3, r2
 80015b2:	009b      	lsls	r3, r3, #2
 80015b4:	4413      	add	r3, r2
 80015b6:	005b      	lsls	r3, r3, #1
 80015b8:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80015ba:	e002      	b.n	80015c2 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	3b01      	subs	r3, #1
 80015c0:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d1f9      	bne.n	80015bc <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2200      	movs	r2, #0
 80015cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80015d0:	2300      	movs	r3, #0
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	3714      	adds	r7, #20
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr
 80015de:	bf00      	nop
 80015e0:	10000012 	.word	0x10000012
 80015e4:	40012000 	.word	0x40012000
 80015e8:	40012300 	.word	0x40012300
 80015ec:	20000000 	.word	0x20000000
 80015f0:	431bde83 	.word	0x431bde83

080015f4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b083      	sub	sp, #12
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80015fc:	4b78      	ldr	r3, [pc, #480]	; (80017e0 <ADC_Init+0x1ec>)
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	4a77      	ldr	r2, [pc, #476]	; (80017e0 <ADC_Init+0x1ec>)
 8001602:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001606:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8001608:	4b75      	ldr	r3, [pc, #468]	; (80017e0 <ADC_Init+0x1ec>)
 800160a:	685a      	ldr	r2, [r3, #4]
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	4973      	ldr	r1, [pc, #460]	; (80017e0 <ADC_Init+0x1ec>)
 8001612:	4313      	orrs	r3, r2
 8001614:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	685a      	ldr	r2, [r3, #4]
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001624:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	6859      	ldr	r1, [r3, #4]
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	691b      	ldr	r3, [r3, #16]
 8001630:	021a      	lsls	r2, r3, #8
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	430a      	orrs	r2, r1
 8001638:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	685a      	ldr	r2, [r3, #4]
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001648:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	6859      	ldr	r1, [r3, #4]
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	689a      	ldr	r2, [r3, #8]
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	430a      	orrs	r2, r1
 800165a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	689a      	ldr	r2, [r3, #8]
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800166a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	6899      	ldr	r1, [r3, #8]
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	68da      	ldr	r2, [r3, #12]
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	430a      	orrs	r2, r1
 800167c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001682:	4a58      	ldr	r2, [pc, #352]	; (80017e4 <ADC_Init+0x1f0>)
 8001684:	4293      	cmp	r3, r2
 8001686:	d022      	beq.n	80016ce <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	689a      	ldr	r2, [r3, #8]
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001696:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	6899      	ldr	r1, [r3, #8]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	430a      	orrs	r2, r1
 80016a8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	689a      	ldr	r2, [r3, #8]
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80016b8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	6899      	ldr	r1, [r3, #8]
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	430a      	orrs	r2, r1
 80016ca:	609a      	str	r2, [r3, #8]
 80016cc:	e00f      	b.n	80016ee <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	689a      	ldr	r2, [r3, #8]
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80016dc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	689a      	ldr	r2, [r3, #8]
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80016ec:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	689a      	ldr	r2, [r3, #8]
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f022 0202 	bic.w	r2, r2, #2
 80016fc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	6899      	ldr	r1, [r3, #8]
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	699b      	ldr	r3, [r3, #24]
 8001708:	005a      	lsls	r2, r3, #1
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	430a      	orrs	r2, r1
 8001710:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d01b      	beq.n	8001754 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	685a      	ldr	r2, [r3, #4]
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800172a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	685a      	ldr	r2, [r3, #4]
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800173a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	6859      	ldr	r1, [r3, #4]
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001746:	3b01      	subs	r3, #1
 8001748:	035a      	lsls	r2, r3, #13
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	430a      	orrs	r2, r1
 8001750:	605a      	str	r2, [r3, #4]
 8001752:	e007      	b.n	8001764 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	685a      	ldr	r2, [r3, #4]
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001762:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001772:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	69db      	ldr	r3, [r3, #28]
 800177e:	3b01      	subs	r3, #1
 8001780:	051a      	lsls	r2, r3, #20
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	430a      	orrs	r2, r1
 8001788:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	689a      	ldr	r2, [r3, #8]
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001798:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	6899      	ldr	r1, [r3, #8]
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80017a6:	025a      	lsls	r2, r3, #9
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	430a      	orrs	r2, r1
 80017ae:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	689a      	ldr	r2, [r3, #8]
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80017be:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	6899      	ldr	r1, [r3, #8]
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	695b      	ldr	r3, [r3, #20]
 80017ca:	029a      	lsls	r2, r3, #10
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	430a      	orrs	r2, r1
 80017d2:	609a      	str	r2, [r3, #8]
}
 80017d4:	bf00      	nop
 80017d6:	370c      	adds	r7, #12
 80017d8:	46bd      	mov	sp, r7
 80017da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017de:	4770      	bx	lr
 80017e0:	40012300 	.word	0x40012300
 80017e4:	0f000001 	.word	0x0f000001

080017e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b085      	sub	sp, #20
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	f003 0307 	and.w	r3, r3, #7
 80017f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017f8:	4b0b      	ldr	r3, [pc, #44]	; (8001828 <__NVIC_SetPriorityGrouping+0x40>)
 80017fa:	68db      	ldr	r3, [r3, #12]
 80017fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017fe:	68ba      	ldr	r2, [r7, #8]
 8001800:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001804:	4013      	ands	r3, r2
 8001806:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800180c:	68bb      	ldr	r3, [r7, #8]
 800180e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001810:	4b06      	ldr	r3, [pc, #24]	; (800182c <__NVIC_SetPriorityGrouping+0x44>)
 8001812:	4313      	orrs	r3, r2
 8001814:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001816:	4a04      	ldr	r2, [pc, #16]	; (8001828 <__NVIC_SetPriorityGrouping+0x40>)
 8001818:	68bb      	ldr	r3, [r7, #8]
 800181a:	60d3      	str	r3, [r2, #12]
}
 800181c:	bf00      	nop
 800181e:	3714      	adds	r7, #20
 8001820:	46bd      	mov	sp, r7
 8001822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001826:	4770      	bx	lr
 8001828:	e000ed00 	.word	0xe000ed00
 800182c:	05fa0000 	.word	0x05fa0000

08001830 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001830:	b480      	push	{r7}
 8001832:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001834:	4b04      	ldr	r3, [pc, #16]	; (8001848 <__NVIC_GetPriorityGrouping+0x18>)
 8001836:	68db      	ldr	r3, [r3, #12]
 8001838:	0a1b      	lsrs	r3, r3, #8
 800183a:	f003 0307 	and.w	r3, r3, #7
}
 800183e:	4618      	mov	r0, r3
 8001840:	46bd      	mov	sp, r7
 8001842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001846:	4770      	bx	lr
 8001848:	e000ed00 	.word	0xe000ed00

0800184c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800184c:	b480      	push	{r7}
 800184e:	b083      	sub	sp, #12
 8001850:	af00      	add	r7, sp, #0
 8001852:	4603      	mov	r3, r0
 8001854:	6039      	str	r1, [r7, #0]
 8001856:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001858:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800185c:	2b00      	cmp	r3, #0
 800185e:	db0a      	blt.n	8001876 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	b2da      	uxtb	r2, r3
 8001864:	490c      	ldr	r1, [pc, #48]	; (8001898 <__NVIC_SetPriority+0x4c>)
 8001866:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800186a:	0112      	lsls	r2, r2, #4
 800186c:	b2d2      	uxtb	r2, r2
 800186e:	440b      	add	r3, r1
 8001870:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001874:	e00a      	b.n	800188c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	b2da      	uxtb	r2, r3
 800187a:	4908      	ldr	r1, [pc, #32]	; (800189c <__NVIC_SetPriority+0x50>)
 800187c:	79fb      	ldrb	r3, [r7, #7]
 800187e:	f003 030f 	and.w	r3, r3, #15
 8001882:	3b04      	subs	r3, #4
 8001884:	0112      	lsls	r2, r2, #4
 8001886:	b2d2      	uxtb	r2, r2
 8001888:	440b      	add	r3, r1
 800188a:	761a      	strb	r2, [r3, #24]
}
 800188c:	bf00      	nop
 800188e:	370c      	adds	r7, #12
 8001890:	46bd      	mov	sp, r7
 8001892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001896:	4770      	bx	lr
 8001898:	e000e100 	.word	0xe000e100
 800189c:	e000ed00 	.word	0xe000ed00

080018a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b089      	sub	sp, #36	; 0x24
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	60f8      	str	r0, [r7, #12]
 80018a8:	60b9      	str	r1, [r7, #8]
 80018aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	f003 0307 	and.w	r3, r3, #7
 80018b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018b4:	69fb      	ldr	r3, [r7, #28]
 80018b6:	f1c3 0307 	rsb	r3, r3, #7
 80018ba:	2b04      	cmp	r3, #4
 80018bc:	bf28      	it	cs
 80018be:	2304      	movcs	r3, #4
 80018c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018c2:	69fb      	ldr	r3, [r7, #28]
 80018c4:	3304      	adds	r3, #4
 80018c6:	2b06      	cmp	r3, #6
 80018c8:	d902      	bls.n	80018d0 <NVIC_EncodePriority+0x30>
 80018ca:	69fb      	ldr	r3, [r7, #28]
 80018cc:	3b03      	subs	r3, #3
 80018ce:	e000      	b.n	80018d2 <NVIC_EncodePriority+0x32>
 80018d0:	2300      	movs	r3, #0
 80018d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018d4:	f04f 32ff 	mov.w	r2, #4294967295
 80018d8:	69bb      	ldr	r3, [r7, #24]
 80018da:	fa02 f303 	lsl.w	r3, r2, r3
 80018de:	43da      	mvns	r2, r3
 80018e0:	68bb      	ldr	r3, [r7, #8]
 80018e2:	401a      	ands	r2, r3
 80018e4:	697b      	ldr	r3, [r7, #20]
 80018e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018e8:	f04f 31ff 	mov.w	r1, #4294967295
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	fa01 f303 	lsl.w	r3, r1, r3
 80018f2:	43d9      	mvns	r1, r3
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018f8:	4313      	orrs	r3, r2
         );
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	3724      	adds	r7, #36	; 0x24
 80018fe:	46bd      	mov	sp, r7
 8001900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001904:	4770      	bx	lr
	...

08001908 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b082      	sub	sp, #8
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	3b01      	subs	r3, #1
 8001914:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001918:	d301      	bcc.n	800191e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800191a:	2301      	movs	r3, #1
 800191c:	e00f      	b.n	800193e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800191e:	4a0a      	ldr	r2, [pc, #40]	; (8001948 <SysTick_Config+0x40>)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	3b01      	subs	r3, #1
 8001924:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001926:	210f      	movs	r1, #15
 8001928:	f04f 30ff 	mov.w	r0, #4294967295
 800192c:	f7ff ff8e 	bl	800184c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001930:	4b05      	ldr	r3, [pc, #20]	; (8001948 <SysTick_Config+0x40>)
 8001932:	2200      	movs	r2, #0
 8001934:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001936:	4b04      	ldr	r3, [pc, #16]	; (8001948 <SysTick_Config+0x40>)
 8001938:	2207      	movs	r2, #7
 800193a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800193c:	2300      	movs	r3, #0
}
 800193e:	4618      	mov	r0, r3
 8001940:	3708      	adds	r7, #8
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	e000e010 	.word	0xe000e010

0800194c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b082      	sub	sp, #8
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001954:	6878      	ldr	r0, [r7, #4]
 8001956:	f7ff ff47 	bl	80017e8 <__NVIC_SetPriorityGrouping>
}
 800195a:	bf00      	nop
 800195c:	3708      	adds	r7, #8
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}

08001962 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001962:	b580      	push	{r7, lr}
 8001964:	b086      	sub	sp, #24
 8001966:	af00      	add	r7, sp, #0
 8001968:	4603      	mov	r3, r0
 800196a:	60b9      	str	r1, [r7, #8]
 800196c:	607a      	str	r2, [r7, #4]
 800196e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001970:	2300      	movs	r3, #0
 8001972:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001974:	f7ff ff5c 	bl	8001830 <__NVIC_GetPriorityGrouping>
 8001978:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800197a:	687a      	ldr	r2, [r7, #4]
 800197c:	68b9      	ldr	r1, [r7, #8]
 800197e:	6978      	ldr	r0, [r7, #20]
 8001980:	f7ff ff8e 	bl	80018a0 <NVIC_EncodePriority>
 8001984:	4602      	mov	r2, r0
 8001986:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800198a:	4611      	mov	r1, r2
 800198c:	4618      	mov	r0, r3
 800198e:	f7ff ff5d 	bl	800184c <__NVIC_SetPriority>
}
 8001992:	bf00      	nop
 8001994:	3718      	adds	r7, #24
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}

0800199a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800199a:	b580      	push	{r7, lr}
 800199c:	b082      	sub	sp, #8
 800199e:	af00      	add	r7, sp, #0
 80019a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019a2:	6878      	ldr	r0, [r7, #4]
 80019a4:	f7ff ffb0 	bl	8001908 <SysTick_Config>
 80019a8:	4603      	mov	r3, r0
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	3708      	adds	r7, #8
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}
	...

080019b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b089      	sub	sp, #36	; 0x24
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
 80019bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80019be:	2300      	movs	r3, #0
 80019c0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80019c2:	2300      	movs	r3, #0
 80019c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80019c6:	2300      	movs	r3, #0
 80019c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80019ca:	2300      	movs	r3, #0
 80019cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80019ce:	2300      	movs	r3, #0
 80019d0:	61fb      	str	r3, [r7, #28]
 80019d2:	e175      	b.n	8001cc0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80019d4:	2201      	movs	r2, #1
 80019d6:	69fb      	ldr	r3, [r7, #28]
 80019d8:	fa02 f303 	lsl.w	r3, r2, r3
 80019dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	697a      	ldr	r2, [r7, #20]
 80019e4:	4013      	ands	r3, r2
 80019e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80019e8:	693a      	ldr	r2, [r7, #16]
 80019ea:	697b      	ldr	r3, [r7, #20]
 80019ec:	429a      	cmp	r2, r3
 80019ee:	f040 8164 	bne.w	8001cba <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	f003 0303 	and.w	r3, r3, #3
 80019fa:	2b01      	cmp	r3, #1
 80019fc:	d005      	beq.n	8001a0a <HAL_GPIO_Init+0x56>
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	f003 0303 	and.w	r3, r3, #3
 8001a06:	2b02      	cmp	r3, #2
 8001a08:	d130      	bne.n	8001a6c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	689b      	ldr	r3, [r3, #8]
 8001a0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001a10:	69fb      	ldr	r3, [r7, #28]
 8001a12:	005b      	lsls	r3, r3, #1
 8001a14:	2203      	movs	r2, #3
 8001a16:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1a:	43db      	mvns	r3, r3
 8001a1c:	69ba      	ldr	r2, [r7, #24]
 8001a1e:	4013      	ands	r3, r2
 8001a20:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	68da      	ldr	r2, [r3, #12]
 8001a26:	69fb      	ldr	r3, [r7, #28]
 8001a28:	005b      	lsls	r3, r3, #1
 8001a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2e:	69ba      	ldr	r2, [r7, #24]
 8001a30:	4313      	orrs	r3, r2
 8001a32:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	69ba      	ldr	r2, [r7, #24]
 8001a38:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a40:	2201      	movs	r2, #1
 8001a42:	69fb      	ldr	r3, [r7, #28]
 8001a44:	fa02 f303 	lsl.w	r3, r2, r3
 8001a48:	43db      	mvns	r3, r3
 8001a4a:	69ba      	ldr	r2, [r7, #24]
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	091b      	lsrs	r3, r3, #4
 8001a56:	f003 0201 	and.w	r2, r3, #1
 8001a5a:	69fb      	ldr	r3, [r7, #28]
 8001a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a60:	69ba      	ldr	r2, [r7, #24]
 8001a62:	4313      	orrs	r3, r2
 8001a64:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	69ba      	ldr	r2, [r7, #24]
 8001a6a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	f003 0303 	and.w	r3, r3, #3
 8001a74:	2b03      	cmp	r3, #3
 8001a76:	d017      	beq.n	8001aa8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	68db      	ldr	r3, [r3, #12]
 8001a7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001a7e:	69fb      	ldr	r3, [r7, #28]
 8001a80:	005b      	lsls	r3, r3, #1
 8001a82:	2203      	movs	r2, #3
 8001a84:	fa02 f303 	lsl.w	r3, r2, r3
 8001a88:	43db      	mvns	r3, r3
 8001a8a:	69ba      	ldr	r2, [r7, #24]
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	689a      	ldr	r2, [r3, #8]
 8001a94:	69fb      	ldr	r3, [r7, #28]
 8001a96:	005b      	lsls	r3, r3, #1
 8001a98:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9c:	69ba      	ldr	r2, [r7, #24]
 8001a9e:	4313      	orrs	r3, r2
 8001aa0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	69ba      	ldr	r2, [r7, #24]
 8001aa6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	f003 0303 	and.w	r3, r3, #3
 8001ab0:	2b02      	cmp	r3, #2
 8001ab2:	d123      	bne.n	8001afc <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001ab4:	69fb      	ldr	r3, [r7, #28]
 8001ab6:	08da      	lsrs	r2, r3, #3
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	3208      	adds	r2, #8
 8001abc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ac0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001ac2:	69fb      	ldr	r3, [r7, #28]
 8001ac4:	f003 0307 	and.w	r3, r3, #7
 8001ac8:	009b      	lsls	r3, r3, #2
 8001aca:	220f      	movs	r2, #15
 8001acc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad0:	43db      	mvns	r3, r3
 8001ad2:	69ba      	ldr	r2, [r7, #24]
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	691a      	ldr	r2, [r3, #16]
 8001adc:	69fb      	ldr	r3, [r7, #28]
 8001ade:	f003 0307 	and.w	r3, r3, #7
 8001ae2:	009b      	lsls	r3, r3, #2
 8001ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae8:	69ba      	ldr	r2, [r7, #24]
 8001aea:	4313      	orrs	r3, r2
 8001aec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001aee:	69fb      	ldr	r3, [r7, #28]
 8001af0:	08da      	lsrs	r2, r3, #3
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	3208      	adds	r2, #8
 8001af6:	69b9      	ldr	r1, [r7, #24]
 8001af8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001b02:	69fb      	ldr	r3, [r7, #28]
 8001b04:	005b      	lsls	r3, r3, #1
 8001b06:	2203      	movs	r2, #3
 8001b08:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0c:	43db      	mvns	r3, r3
 8001b0e:	69ba      	ldr	r2, [r7, #24]
 8001b10:	4013      	ands	r3, r2
 8001b12:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	f003 0203 	and.w	r2, r3, #3
 8001b1c:	69fb      	ldr	r3, [r7, #28]
 8001b1e:	005b      	lsls	r3, r3, #1
 8001b20:	fa02 f303 	lsl.w	r3, r2, r3
 8001b24:	69ba      	ldr	r2, [r7, #24]
 8001b26:	4313      	orrs	r3, r2
 8001b28:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	69ba      	ldr	r2, [r7, #24]
 8001b2e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	f000 80be 	beq.w	8001cba <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b3e:	4b66      	ldr	r3, [pc, #408]	; (8001cd8 <HAL_GPIO_Init+0x324>)
 8001b40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b42:	4a65      	ldr	r2, [pc, #404]	; (8001cd8 <HAL_GPIO_Init+0x324>)
 8001b44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b48:	6453      	str	r3, [r2, #68]	; 0x44
 8001b4a:	4b63      	ldr	r3, [pc, #396]	; (8001cd8 <HAL_GPIO_Init+0x324>)
 8001b4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b52:	60fb      	str	r3, [r7, #12]
 8001b54:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001b56:	4a61      	ldr	r2, [pc, #388]	; (8001cdc <HAL_GPIO_Init+0x328>)
 8001b58:	69fb      	ldr	r3, [r7, #28]
 8001b5a:	089b      	lsrs	r3, r3, #2
 8001b5c:	3302      	adds	r3, #2
 8001b5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b62:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001b64:	69fb      	ldr	r3, [r7, #28]
 8001b66:	f003 0303 	and.w	r3, r3, #3
 8001b6a:	009b      	lsls	r3, r3, #2
 8001b6c:	220f      	movs	r2, #15
 8001b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b72:	43db      	mvns	r3, r3
 8001b74:	69ba      	ldr	r2, [r7, #24]
 8001b76:	4013      	ands	r3, r2
 8001b78:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	4a58      	ldr	r2, [pc, #352]	; (8001ce0 <HAL_GPIO_Init+0x32c>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d037      	beq.n	8001bf2 <HAL_GPIO_Init+0x23e>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	4a57      	ldr	r2, [pc, #348]	; (8001ce4 <HAL_GPIO_Init+0x330>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d031      	beq.n	8001bee <HAL_GPIO_Init+0x23a>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	4a56      	ldr	r2, [pc, #344]	; (8001ce8 <HAL_GPIO_Init+0x334>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d02b      	beq.n	8001bea <HAL_GPIO_Init+0x236>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	4a55      	ldr	r2, [pc, #340]	; (8001cec <HAL_GPIO_Init+0x338>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d025      	beq.n	8001be6 <HAL_GPIO_Init+0x232>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	4a54      	ldr	r2, [pc, #336]	; (8001cf0 <HAL_GPIO_Init+0x33c>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d01f      	beq.n	8001be2 <HAL_GPIO_Init+0x22e>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	4a53      	ldr	r2, [pc, #332]	; (8001cf4 <HAL_GPIO_Init+0x340>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d019      	beq.n	8001bde <HAL_GPIO_Init+0x22a>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	4a52      	ldr	r2, [pc, #328]	; (8001cf8 <HAL_GPIO_Init+0x344>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d013      	beq.n	8001bda <HAL_GPIO_Init+0x226>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	4a51      	ldr	r2, [pc, #324]	; (8001cfc <HAL_GPIO_Init+0x348>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d00d      	beq.n	8001bd6 <HAL_GPIO_Init+0x222>
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	4a50      	ldr	r2, [pc, #320]	; (8001d00 <HAL_GPIO_Init+0x34c>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d007      	beq.n	8001bd2 <HAL_GPIO_Init+0x21e>
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	4a4f      	ldr	r2, [pc, #316]	; (8001d04 <HAL_GPIO_Init+0x350>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d101      	bne.n	8001bce <HAL_GPIO_Init+0x21a>
 8001bca:	2309      	movs	r3, #9
 8001bcc:	e012      	b.n	8001bf4 <HAL_GPIO_Init+0x240>
 8001bce:	230a      	movs	r3, #10
 8001bd0:	e010      	b.n	8001bf4 <HAL_GPIO_Init+0x240>
 8001bd2:	2308      	movs	r3, #8
 8001bd4:	e00e      	b.n	8001bf4 <HAL_GPIO_Init+0x240>
 8001bd6:	2307      	movs	r3, #7
 8001bd8:	e00c      	b.n	8001bf4 <HAL_GPIO_Init+0x240>
 8001bda:	2306      	movs	r3, #6
 8001bdc:	e00a      	b.n	8001bf4 <HAL_GPIO_Init+0x240>
 8001bde:	2305      	movs	r3, #5
 8001be0:	e008      	b.n	8001bf4 <HAL_GPIO_Init+0x240>
 8001be2:	2304      	movs	r3, #4
 8001be4:	e006      	b.n	8001bf4 <HAL_GPIO_Init+0x240>
 8001be6:	2303      	movs	r3, #3
 8001be8:	e004      	b.n	8001bf4 <HAL_GPIO_Init+0x240>
 8001bea:	2302      	movs	r3, #2
 8001bec:	e002      	b.n	8001bf4 <HAL_GPIO_Init+0x240>
 8001bee:	2301      	movs	r3, #1
 8001bf0:	e000      	b.n	8001bf4 <HAL_GPIO_Init+0x240>
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	69fa      	ldr	r2, [r7, #28]
 8001bf6:	f002 0203 	and.w	r2, r2, #3
 8001bfa:	0092      	lsls	r2, r2, #2
 8001bfc:	4093      	lsls	r3, r2
 8001bfe:	69ba      	ldr	r2, [r7, #24]
 8001c00:	4313      	orrs	r3, r2
 8001c02:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001c04:	4935      	ldr	r1, [pc, #212]	; (8001cdc <HAL_GPIO_Init+0x328>)
 8001c06:	69fb      	ldr	r3, [r7, #28]
 8001c08:	089b      	lsrs	r3, r3, #2
 8001c0a:	3302      	adds	r3, #2
 8001c0c:	69ba      	ldr	r2, [r7, #24]
 8001c0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c12:	4b3d      	ldr	r3, [pc, #244]	; (8001d08 <HAL_GPIO_Init+0x354>)
 8001c14:	689b      	ldr	r3, [r3, #8]
 8001c16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c18:	693b      	ldr	r3, [r7, #16]
 8001c1a:	43db      	mvns	r3, r3
 8001c1c:	69ba      	ldr	r2, [r7, #24]
 8001c1e:	4013      	ands	r3, r2
 8001c20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d003      	beq.n	8001c36 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001c2e:	69ba      	ldr	r2, [r7, #24]
 8001c30:	693b      	ldr	r3, [r7, #16]
 8001c32:	4313      	orrs	r3, r2
 8001c34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c36:	4a34      	ldr	r2, [pc, #208]	; (8001d08 <HAL_GPIO_Init+0x354>)
 8001c38:	69bb      	ldr	r3, [r7, #24]
 8001c3a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c3c:	4b32      	ldr	r3, [pc, #200]	; (8001d08 <HAL_GPIO_Init+0x354>)
 8001c3e:	68db      	ldr	r3, [r3, #12]
 8001c40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c42:	693b      	ldr	r3, [r7, #16]
 8001c44:	43db      	mvns	r3, r3
 8001c46:	69ba      	ldr	r2, [r7, #24]
 8001c48:	4013      	ands	r3, r2
 8001c4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d003      	beq.n	8001c60 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001c58:	69ba      	ldr	r2, [r7, #24]
 8001c5a:	693b      	ldr	r3, [r7, #16]
 8001c5c:	4313      	orrs	r3, r2
 8001c5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c60:	4a29      	ldr	r2, [pc, #164]	; (8001d08 <HAL_GPIO_Init+0x354>)
 8001c62:	69bb      	ldr	r3, [r7, #24]
 8001c64:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c66:	4b28      	ldr	r3, [pc, #160]	; (8001d08 <HAL_GPIO_Init+0x354>)
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c6c:	693b      	ldr	r3, [r7, #16]
 8001c6e:	43db      	mvns	r3, r3
 8001c70:	69ba      	ldr	r2, [r7, #24]
 8001c72:	4013      	ands	r3, r2
 8001c74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d003      	beq.n	8001c8a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001c82:	69ba      	ldr	r2, [r7, #24]
 8001c84:	693b      	ldr	r3, [r7, #16]
 8001c86:	4313      	orrs	r3, r2
 8001c88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c8a:	4a1f      	ldr	r2, [pc, #124]	; (8001d08 <HAL_GPIO_Init+0x354>)
 8001c8c:	69bb      	ldr	r3, [r7, #24]
 8001c8e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c90:	4b1d      	ldr	r3, [pc, #116]	; (8001d08 <HAL_GPIO_Init+0x354>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c96:	693b      	ldr	r3, [r7, #16]
 8001c98:	43db      	mvns	r3, r3
 8001c9a:	69ba      	ldr	r2, [r7, #24]
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d003      	beq.n	8001cb4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001cac:	69ba      	ldr	r2, [r7, #24]
 8001cae:	693b      	ldr	r3, [r7, #16]
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001cb4:	4a14      	ldr	r2, [pc, #80]	; (8001d08 <HAL_GPIO_Init+0x354>)
 8001cb6:	69bb      	ldr	r3, [r7, #24]
 8001cb8:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001cba:	69fb      	ldr	r3, [r7, #28]
 8001cbc:	3301      	adds	r3, #1
 8001cbe:	61fb      	str	r3, [r7, #28]
 8001cc0:	69fb      	ldr	r3, [r7, #28]
 8001cc2:	2b0f      	cmp	r3, #15
 8001cc4:	f67f ae86 	bls.w	80019d4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001cc8:	bf00      	nop
 8001cca:	bf00      	nop
 8001ccc:	3724      	adds	r7, #36	; 0x24
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr
 8001cd6:	bf00      	nop
 8001cd8:	40023800 	.word	0x40023800
 8001cdc:	40013800 	.word	0x40013800
 8001ce0:	40020000 	.word	0x40020000
 8001ce4:	40020400 	.word	0x40020400
 8001ce8:	40020800 	.word	0x40020800
 8001cec:	40020c00 	.word	0x40020c00
 8001cf0:	40021000 	.word	0x40021000
 8001cf4:	40021400 	.word	0x40021400
 8001cf8:	40021800 	.word	0x40021800
 8001cfc:	40021c00 	.word	0x40021c00
 8001d00:	40022000 	.word	0x40022000
 8001d04:	40022400 	.word	0x40022400
 8001d08:	40013c00 	.word	0x40013c00

08001d0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b083      	sub	sp, #12
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
 8001d14:	460b      	mov	r3, r1
 8001d16:	807b      	strh	r3, [r7, #2]
 8001d18:	4613      	mov	r3, r2
 8001d1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d1c:	787b      	ldrb	r3, [r7, #1]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d003      	beq.n	8001d2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d22:	887a      	ldrh	r2, [r7, #2]
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001d28:	e003      	b.n	8001d32 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001d2a:	887b      	ldrh	r3, [r7, #2]
 8001d2c:	041a      	lsls	r2, r3, #16
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	619a      	str	r2, [r3, #24]
}
 8001d32:	bf00      	nop
 8001d34:	370c      	adds	r7, #12
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr
	...

08001d40 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b086      	sub	sp, #24
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d101      	bne.n	8001d56 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001d52:	2301      	movs	r3, #1
 8001d54:	e29b      	b.n	800228e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f003 0301 	and.w	r3, r3, #1
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	f000 8087 	beq.w	8001e72 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d64:	4b96      	ldr	r3, [pc, #600]	; (8001fc0 <HAL_RCC_OscConfig+0x280>)
 8001d66:	689b      	ldr	r3, [r3, #8]
 8001d68:	f003 030c 	and.w	r3, r3, #12
 8001d6c:	2b04      	cmp	r3, #4
 8001d6e:	d00c      	beq.n	8001d8a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d70:	4b93      	ldr	r3, [pc, #588]	; (8001fc0 <HAL_RCC_OscConfig+0x280>)
 8001d72:	689b      	ldr	r3, [r3, #8]
 8001d74:	f003 030c 	and.w	r3, r3, #12
 8001d78:	2b08      	cmp	r3, #8
 8001d7a:	d112      	bne.n	8001da2 <HAL_RCC_OscConfig+0x62>
 8001d7c:	4b90      	ldr	r3, [pc, #576]	; (8001fc0 <HAL_RCC_OscConfig+0x280>)
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d84:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001d88:	d10b      	bne.n	8001da2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d8a:	4b8d      	ldr	r3, [pc, #564]	; (8001fc0 <HAL_RCC_OscConfig+0x280>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d06c      	beq.n	8001e70 <HAL_RCC_OscConfig+0x130>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d168      	bne.n	8001e70 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	e275      	b.n	800228e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001daa:	d106      	bne.n	8001dba <HAL_RCC_OscConfig+0x7a>
 8001dac:	4b84      	ldr	r3, [pc, #528]	; (8001fc0 <HAL_RCC_OscConfig+0x280>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a83      	ldr	r2, [pc, #524]	; (8001fc0 <HAL_RCC_OscConfig+0x280>)
 8001db2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001db6:	6013      	str	r3, [r2, #0]
 8001db8:	e02e      	b.n	8001e18 <HAL_RCC_OscConfig+0xd8>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d10c      	bne.n	8001ddc <HAL_RCC_OscConfig+0x9c>
 8001dc2:	4b7f      	ldr	r3, [pc, #508]	; (8001fc0 <HAL_RCC_OscConfig+0x280>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4a7e      	ldr	r2, [pc, #504]	; (8001fc0 <HAL_RCC_OscConfig+0x280>)
 8001dc8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001dcc:	6013      	str	r3, [r2, #0]
 8001dce:	4b7c      	ldr	r3, [pc, #496]	; (8001fc0 <HAL_RCC_OscConfig+0x280>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4a7b      	ldr	r2, [pc, #492]	; (8001fc0 <HAL_RCC_OscConfig+0x280>)
 8001dd4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001dd8:	6013      	str	r3, [r2, #0]
 8001dda:	e01d      	b.n	8001e18 <HAL_RCC_OscConfig+0xd8>
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001de4:	d10c      	bne.n	8001e00 <HAL_RCC_OscConfig+0xc0>
 8001de6:	4b76      	ldr	r3, [pc, #472]	; (8001fc0 <HAL_RCC_OscConfig+0x280>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4a75      	ldr	r2, [pc, #468]	; (8001fc0 <HAL_RCC_OscConfig+0x280>)
 8001dec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001df0:	6013      	str	r3, [r2, #0]
 8001df2:	4b73      	ldr	r3, [pc, #460]	; (8001fc0 <HAL_RCC_OscConfig+0x280>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4a72      	ldr	r2, [pc, #456]	; (8001fc0 <HAL_RCC_OscConfig+0x280>)
 8001df8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dfc:	6013      	str	r3, [r2, #0]
 8001dfe:	e00b      	b.n	8001e18 <HAL_RCC_OscConfig+0xd8>
 8001e00:	4b6f      	ldr	r3, [pc, #444]	; (8001fc0 <HAL_RCC_OscConfig+0x280>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a6e      	ldr	r2, [pc, #440]	; (8001fc0 <HAL_RCC_OscConfig+0x280>)
 8001e06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e0a:	6013      	str	r3, [r2, #0]
 8001e0c:	4b6c      	ldr	r3, [pc, #432]	; (8001fc0 <HAL_RCC_OscConfig+0x280>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a6b      	ldr	r2, [pc, #428]	; (8001fc0 <HAL_RCC_OscConfig+0x280>)
 8001e12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e16:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d013      	beq.n	8001e48 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e20:	f7ff f8b8 	bl	8000f94 <HAL_GetTick>
 8001e24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e26:	e008      	b.n	8001e3a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e28:	f7ff f8b4 	bl	8000f94 <HAL_GetTick>
 8001e2c:	4602      	mov	r2, r0
 8001e2e:	693b      	ldr	r3, [r7, #16]
 8001e30:	1ad3      	subs	r3, r2, r3
 8001e32:	2b64      	cmp	r3, #100	; 0x64
 8001e34:	d901      	bls.n	8001e3a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001e36:	2303      	movs	r3, #3
 8001e38:	e229      	b.n	800228e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e3a:	4b61      	ldr	r3, [pc, #388]	; (8001fc0 <HAL_RCC_OscConfig+0x280>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d0f0      	beq.n	8001e28 <HAL_RCC_OscConfig+0xe8>
 8001e46:	e014      	b.n	8001e72 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e48:	f7ff f8a4 	bl	8000f94 <HAL_GetTick>
 8001e4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e4e:	e008      	b.n	8001e62 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e50:	f7ff f8a0 	bl	8000f94 <HAL_GetTick>
 8001e54:	4602      	mov	r2, r0
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	1ad3      	subs	r3, r2, r3
 8001e5a:	2b64      	cmp	r3, #100	; 0x64
 8001e5c:	d901      	bls.n	8001e62 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001e5e:	2303      	movs	r3, #3
 8001e60:	e215      	b.n	800228e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e62:	4b57      	ldr	r3, [pc, #348]	; (8001fc0 <HAL_RCC_OscConfig+0x280>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d1f0      	bne.n	8001e50 <HAL_RCC_OscConfig+0x110>
 8001e6e:	e000      	b.n	8001e72 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f003 0302 	and.w	r3, r3, #2
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d069      	beq.n	8001f52 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e7e:	4b50      	ldr	r3, [pc, #320]	; (8001fc0 <HAL_RCC_OscConfig+0x280>)
 8001e80:	689b      	ldr	r3, [r3, #8]
 8001e82:	f003 030c 	and.w	r3, r3, #12
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d00b      	beq.n	8001ea2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e8a:	4b4d      	ldr	r3, [pc, #308]	; (8001fc0 <HAL_RCC_OscConfig+0x280>)
 8001e8c:	689b      	ldr	r3, [r3, #8]
 8001e8e:	f003 030c 	and.w	r3, r3, #12
 8001e92:	2b08      	cmp	r3, #8
 8001e94:	d11c      	bne.n	8001ed0 <HAL_RCC_OscConfig+0x190>
 8001e96:	4b4a      	ldr	r3, [pc, #296]	; (8001fc0 <HAL_RCC_OscConfig+0x280>)
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d116      	bne.n	8001ed0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ea2:	4b47      	ldr	r3, [pc, #284]	; (8001fc0 <HAL_RCC_OscConfig+0x280>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f003 0302 	and.w	r3, r3, #2
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d005      	beq.n	8001eba <HAL_RCC_OscConfig+0x17a>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	68db      	ldr	r3, [r3, #12]
 8001eb2:	2b01      	cmp	r3, #1
 8001eb4:	d001      	beq.n	8001eba <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	e1e9      	b.n	800228e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001eba:	4b41      	ldr	r3, [pc, #260]	; (8001fc0 <HAL_RCC_OscConfig+0x280>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	691b      	ldr	r3, [r3, #16]
 8001ec6:	00db      	lsls	r3, r3, #3
 8001ec8:	493d      	ldr	r1, [pc, #244]	; (8001fc0 <HAL_RCC_OscConfig+0x280>)
 8001eca:	4313      	orrs	r3, r2
 8001ecc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ece:	e040      	b.n	8001f52 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	68db      	ldr	r3, [r3, #12]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d023      	beq.n	8001f20 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ed8:	4b39      	ldr	r3, [pc, #228]	; (8001fc0 <HAL_RCC_OscConfig+0x280>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a38      	ldr	r2, [pc, #224]	; (8001fc0 <HAL_RCC_OscConfig+0x280>)
 8001ede:	f043 0301 	orr.w	r3, r3, #1
 8001ee2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ee4:	f7ff f856 	bl	8000f94 <HAL_GetTick>
 8001ee8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001eea:	e008      	b.n	8001efe <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001eec:	f7ff f852 	bl	8000f94 <HAL_GetTick>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	1ad3      	subs	r3, r2, r3
 8001ef6:	2b02      	cmp	r3, #2
 8001ef8:	d901      	bls.n	8001efe <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001efa:	2303      	movs	r3, #3
 8001efc:	e1c7      	b.n	800228e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001efe:	4b30      	ldr	r3, [pc, #192]	; (8001fc0 <HAL_RCC_OscConfig+0x280>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f003 0302 	and.w	r3, r3, #2
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d0f0      	beq.n	8001eec <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f0a:	4b2d      	ldr	r3, [pc, #180]	; (8001fc0 <HAL_RCC_OscConfig+0x280>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	691b      	ldr	r3, [r3, #16]
 8001f16:	00db      	lsls	r3, r3, #3
 8001f18:	4929      	ldr	r1, [pc, #164]	; (8001fc0 <HAL_RCC_OscConfig+0x280>)
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	600b      	str	r3, [r1, #0]
 8001f1e:	e018      	b.n	8001f52 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f20:	4b27      	ldr	r3, [pc, #156]	; (8001fc0 <HAL_RCC_OscConfig+0x280>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a26      	ldr	r2, [pc, #152]	; (8001fc0 <HAL_RCC_OscConfig+0x280>)
 8001f26:	f023 0301 	bic.w	r3, r3, #1
 8001f2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f2c:	f7ff f832 	bl	8000f94 <HAL_GetTick>
 8001f30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f32:	e008      	b.n	8001f46 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f34:	f7ff f82e 	bl	8000f94 <HAL_GetTick>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	693b      	ldr	r3, [r7, #16]
 8001f3c:	1ad3      	subs	r3, r2, r3
 8001f3e:	2b02      	cmp	r3, #2
 8001f40:	d901      	bls.n	8001f46 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001f42:	2303      	movs	r3, #3
 8001f44:	e1a3      	b.n	800228e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f46:	4b1e      	ldr	r3, [pc, #120]	; (8001fc0 <HAL_RCC_OscConfig+0x280>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f003 0302 	and.w	r3, r3, #2
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d1f0      	bne.n	8001f34 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f003 0308 	and.w	r3, r3, #8
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d038      	beq.n	8001fd0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	695b      	ldr	r3, [r3, #20]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d019      	beq.n	8001f9a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f66:	4b16      	ldr	r3, [pc, #88]	; (8001fc0 <HAL_RCC_OscConfig+0x280>)
 8001f68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f6a:	4a15      	ldr	r2, [pc, #84]	; (8001fc0 <HAL_RCC_OscConfig+0x280>)
 8001f6c:	f043 0301 	orr.w	r3, r3, #1
 8001f70:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f72:	f7ff f80f 	bl	8000f94 <HAL_GetTick>
 8001f76:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f78:	e008      	b.n	8001f8c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f7a:	f7ff f80b 	bl	8000f94 <HAL_GetTick>
 8001f7e:	4602      	mov	r2, r0
 8001f80:	693b      	ldr	r3, [r7, #16]
 8001f82:	1ad3      	subs	r3, r2, r3
 8001f84:	2b02      	cmp	r3, #2
 8001f86:	d901      	bls.n	8001f8c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001f88:	2303      	movs	r3, #3
 8001f8a:	e180      	b.n	800228e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f8c:	4b0c      	ldr	r3, [pc, #48]	; (8001fc0 <HAL_RCC_OscConfig+0x280>)
 8001f8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f90:	f003 0302 	and.w	r3, r3, #2
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d0f0      	beq.n	8001f7a <HAL_RCC_OscConfig+0x23a>
 8001f98:	e01a      	b.n	8001fd0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f9a:	4b09      	ldr	r3, [pc, #36]	; (8001fc0 <HAL_RCC_OscConfig+0x280>)
 8001f9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f9e:	4a08      	ldr	r2, [pc, #32]	; (8001fc0 <HAL_RCC_OscConfig+0x280>)
 8001fa0:	f023 0301 	bic.w	r3, r3, #1
 8001fa4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fa6:	f7fe fff5 	bl	8000f94 <HAL_GetTick>
 8001faa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fac:	e00a      	b.n	8001fc4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fae:	f7fe fff1 	bl	8000f94 <HAL_GetTick>
 8001fb2:	4602      	mov	r2, r0
 8001fb4:	693b      	ldr	r3, [r7, #16]
 8001fb6:	1ad3      	subs	r3, r2, r3
 8001fb8:	2b02      	cmp	r3, #2
 8001fba:	d903      	bls.n	8001fc4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001fbc:	2303      	movs	r3, #3
 8001fbe:	e166      	b.n	800228e <HAL_RCC_OscConfig+0x54e>
 8001fc0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fc4:	4b92      	ldr	r3, [pc, #584]	; (8002210 <HAL_RCC_OscConfig+0x4d0>)
 8001fc6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001fc8:	f003 0302 	and.w	r3, r3, #2
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d1ee      	bne.n	8001fae <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f003 0304 	and.w	r3, r3, #4
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	f000 80a4 	beq.w	8002126 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fde:	4b8c      	ldr	r3, [pc, #560]	; (8002210 <HAL_RCC_OscConfig+0x4d0>)
 8001fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d10d      	bne.n	8002006 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fea:	4b89      	ldr	r3, [pc, #548]	; (8002210 <HAL_RCC_OscConfig+0x4d0>)
 8001fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fee:	4a88      	ldr	r2, [pc, #544]	; (8002210 <HAL_RCC_OscConfig+0x4d0>)
 8001ff0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ff4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ff6:	4b86      	ldr	r3, [pc, #536]	; (8002210 <HAL_RCC_OscConfig+0x4d0>)
 8001ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ffa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ffe:	60bb      	str	r3, [r7, #8]
 8002000:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002002:	2301      	movs	r3, #1
 8002004:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002006:	4b83      	ldr	r3, [pc, #524]	; (8002214 <HAL_RCC_OscConfig+0x4d4>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800200e:	2b00      	cmp	r3, #0
 8002010:	d118      	bne.n	8002044 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002012:	4b80      	ldr	r3, [pc, #512]	; (8002214 <HAL_RCC_OscConfig+0x4d4>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4a7f      	ldr	r2, [pc, #508]	; (8002214 <HAL_RCC_OscConfig+0x4d4>)
 8002018:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800201c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800201e:	f7fe ffb9 	bl	8000f94 <HAL_GetTick>
 8002022:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002024:	e008      	b.n	8002038 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002026:	f7fe ffb5 	bl	8000f94 <HAL_GetTick>
 800202a:	4602      	mov	r2, r0
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	1ad3      	subs	r3, r2, r3
 8002030:	2b64      	cmp	r3, #100	; 0x64
 8002032:	d901      	bls.n	8002038 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002034:	2303      	movs	r3, #3
 8002036:	e12a      	b.n	800228e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002038:	4b76      	ldr	r3, [pc, #472]	; (8002214 <HAL_RCC_OscConfig+0x4d4>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002040:	2b00      	cmp	r3, #0
 8002042:	d0f0      	beq.n	8002026 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	689b      	ldr	r3, [r3, #8]
 8002048:	2b01      	cmp	r3, #1
 800204a:	d106      	bne.n	800205a <HAL_RCC_OscConfig+0x31a>
 800204c:	4b70      	ldr	r3, [pc, #448]	; (8002210 <HAL_RCC_OscConfig+0x4d0>)
 800204e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002050:	4a6f      	ldr	r2, [pc, #444]	; (8002210 <HAL_RCC_OscConfig+0x4d0>)
 8002052:	f043 0301 	orr.w	r3, r3, #1
 8002056:	6713      	str	r3, [r2, #112]	; 0x70
 8002058:	e02d      	b.n	80020b6 <HAL_RCC_OscConfig+0x376>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	689b      	ldr	r3, [r3, #8]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d10c      	bne.n	800207c <HAL_RCC_OscConfig+0x33c>
 8002062:	4b6b      	ldr	r3, [pc, #428]	; (8002210 <HAL_RCC_OscConfig+0x4d0>)
 8002064:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002066:	4a6a      	ldr	r2, [pc, #424]	; (8002210 <HAL_RCC_OscConfig+0x4d0>)
 8002068:	f023 0301 	bic.w	r3, r3, #1
 800206c:	6713      	str	r3, [r2, #112]	; 0x70
 800206e:	4b68      	ldr	r3, [pc, #416]	; (8002210 <HAL_RCC_OscConfig+0x4d0>)
 8002070:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002072:	4a67      	ldr	r2, [pc, #412]	; (8002210 <HAL_RCC_OscConfig+0x4d0>)
 8002074:	f023 0304 	bic.w	r3, r3, #4
 8002078:	6713      	str	r3, [r2, #112]	; 0x70
 800207a:	e01c      	b.n	80020b6 <HAL_RCC_OscConfig+0x376>
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	689b      	ldr	r3, [r3, #8]
 8002080:	2b05      	cmp	r3, #5
 8002082:	d10c      	bne.n	800209e <HAL_RCC_OscConfig+0x35e>
 8002084:	4b62      	ldr	r3, [pc, #392]	; (8002210 <HAL_RCC_OscConfig+0x4d0>)
 8002086:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002088:	4a61      	ldr	r2, [pc, #388]	; (8002210 <HAL_RCC_OscConfig+0x4d0>)
 800208a:	f043 0304 	orr.w	r3, r3, #4
 800208e:	6713      	str	r3, [r2, #112]	; 0x70
 8002090:	4b5f      	ldr	r3, [pc, #380]	; (8002210 <HAL_RCC_OscConfig+0x4d0>)
 8002092:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002094:	4a5e      	ldr	r2, [pc, #376]	; (8002210 <HAL_RCC_OscConfig+0x4d0>)
 8002096:	f043 0301 	orr.w	r3, r3, #1
 800209a:	6713      	str	r3, [r2, #112]	; 0x70
 800209c:	e00b      	b.n	80020b6 <HAL_RCC_OscConfig+0x376>
 800209e:	4b5c      	ldr	r3, [pc, #368]	; (8002210 <HAL_RCC_OscConfig+0x4d0>)
 80020a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020a2:	4a5b      	ldr	r2, [pc, #364]	; (8002210 <HAL_RCC_OscConfig+0x4d0>)
 80020a4:	f023 0301 	bic.w	r3, r3, #1
 80020a8:	6713      	str	r3, [r2, #112]	; 0x70
 80020aa:	4b59      	ldr	r3, [pc, #356]	; (8002210 <HAL_RCC_OscConfig+0x4d0>)
 80020ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020ae:	4a58      	ldr	r2, [pc, #352]	; (8002210 <HAL_RCC_OscConfig+0x4d0>)
 80020b0:	f023 0304 	bic.w	r3, r3, #4
 80020b4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	689b      	ldr	r3, [r3, #8]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d015      	beq.n	80020ea <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020be:	f7fe ff69 	bl	8000f94 <HAL_GetTick>
 80020c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020c4:	e00a      	b.n	80020dc <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020c6:	f7fe ff65 	bl	8000f94 <HAL_GetTick>
 80020ca:	4602      	mov	r2, r0
 80020cc:	693b      	ldr	r3, [r7, #16]
 80020ce:	1ad3      	subs	r3, r2, r3
 80020d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d901      	bls.n	80020dc <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80020d8:	2303      	movs	r3, #3
 80020da:	e0d8      	b.n	800228e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020dc:	4b4c      	ldr	r3, [pc, #304]	; (8002210 <HAL_RCC_OscConfig+0x4d0>)
 80020de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020e0:	f003 0302 	and.w	r3, r3, #2
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d0ee      	beq.n	80020c6 <HAL_RCC_OscConfig+0x386>
 80020e8:	e014      	b.n	8002114 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020ea:	f7fe ff53 	bl	8000f94 <HAL_GetTick>
 80020ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020f0:	e00a      	b.n	8002108 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020f2:	f7fe ff4f 	bl	8000f94 <HAL_GetTick>
 80020f6:	4602      	mov	r2, r0
 80020f8:	693b      	ldr	r3, [r7, #16]
 80020fa:	1ad3      	subs	r3, r2, r3
 80020fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002100:	4293      	cmp	r3, r2
 8002102:	d901      	bls.n	8002108 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002104:	2303      	movs	r3, #3
 8002106:	e0c2      	b.n	800228e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002108:	4b41      	ldr	r3, [pc, #260]	; (8002210 <HAL_RCC_OscConfig+0x4d0>)
 800210a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800210c:	f003 0302 	and.w	r3, r3, #2
 8002110:	2b00      	cmp	r3, #0
 8002112:	d1ee      	bne.n	80020f2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002114:	7dfb      	ldrb	r3, [r7, #23]
 8002116:	2b01      	cmp	r3, #1
 8002118:	d105      	bne.n	8002126 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800211a:	4b3d      	ldr	r3, [pc, #244]	; (8002210 <HAL_RCC_OscConfig+0x4d0>)
 800211c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800211e:	4a3c      	ldr	r2, [pc, #240]	; (8002210 <HAL_RCC_OscConfig+0x4d0>)
 8002120:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002124:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	699b      	ldr	r3, [r3, #24]
 800212a:	2b00      	cmp	r3, #0
 800212c:	f000 80ae 	beq.w	800228c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002130:	4b37      	ldr	r3, [pc, #220]	; (8002210 <HAL_RCC_OscConfig+0x4d0>)
 8002132:	689b      	ldr	r3, [r3, #8]
 8002134:	f003 030c 	and.w	r3, r3, #12
 8002138:	2b08      	cmp	r3, #8
 800213a:	d06d      	beq.n	8002218 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	699b      	ldr	r3, [r3, #24]
 8002140:	2b02      	cmp	r3, #2
 8002142:	d14b      	bne.n	80021dc <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002144:	4b32      	ldr	r3, [pc, #200]	; (8002210 <HAL_RCC_OscConfig+0x4d0>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a31      	ldr	r2, [pc, #196]	; (8002210 <HAL_RCC_OscConfig+0x4d0>)
 800214a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800214e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002150:	f7fe ff20 	bl	8000f94 <HAL_GetTick>
 8002154:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002156:	e008      	b.n	800216a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002158:	f7fe ff1c 	bl	8000f94 <HAL_GetTick>
 800215c:	4602      	mov	r2, r0
 800215e:	693b      	ldr	r3, [r7, #16]
 8002160:	1ad3      	subs	r3, r2, r3
 8002162:	2b02      	cmp	r3, #2
 8002164:	d901      	bls.n	800216a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002166:	2303      	movs	r3, #3
 8002168:	e091      	b.n	800228e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800216a:	4b29      	ldr	r3, [pc, #164]	; (8002210 <HAL_RCC_OscConfig+0x4d0>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002172:	2b00      	cmp	r3, #0
 8002174:	d1f0      	bne.n	8002158 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	69da      	ldr	r2, [r3, #28]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6a1b      	ldr	r3, [r3, #32]
 800217e:	431a      	orrs	r2, r3
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002184:	019b      	lsls	r3, r3, #6
 8002186:	431a      	orrs	r2, r3
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800218c:	085b      	lsrs	r3, r3, #1
 800218e:	3b01      	subs	r3, #1
 8002190:	041b      	lsls	r3, r3, #16
 8002192:	431a      	orrs	r2, r3
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002198:	061b      	lsls	r3, r3, #24
 800219a:	431a      	orrs	r2, r3
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a0:	071b      	lsls	r3, r3, #28
 80021a2:	491b      	ldr	r1, [pc, #108]	; (8002210 <HAL_RCC_OscConfig+0x4d0>)
 80021a4:	4313      	orrs	r3, r2
 80021a6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021a8:	4b19      	ldr	r3, [pc, #100]	; (8002210 <HAL_RCC_OscConfig+0x4d0>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a18      	ldr	r2, [pc, #96]	; (8002210 <HAL_RCC_OscConfig+0x4d0>)
 80021ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021b4:	f7fe feee 	bl	8000f94 <HAL_GetTick>
 80021b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021ba:	e008      	b.n	80021ce <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021bc:	f7fe feea 	bl	8000f94 <HAL_GetTick>
 80021c0:	4602      	mov	r2, r0
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	1ad3      	subs	r3, r2, r3
 80021c6:	2b02      	cmp	r3, #2
 80021c8:	d901      	bls.n	80021ce <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80021ca:	2303      	movs	r3, #3
 80021cc:	e05f      	b.n	800228e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021ce:	4b10      	ldr	r3, [pc, #64]	; (8002210 <HAL_RCC_OscConfig+0x4d0>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d0f0      	beq.n	80021bc <HAL_RCC_OscConfig+0x47c>
 80021da:	e057      	b.n	800228c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021dc:	4b0c      	ldr	r3, [pc, #48]	; (8002210 <HAL_RCC_OscConfig+0x4d0>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a0b      	ldr	r2, [pc, #44]	; (8002210 <HAL_RCC_OscConfig+0x4d0>)
 80021e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80021e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021e8:	f7fe fed4 	bl	8000f94 <HAL_GetTick>
 80021ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021ee:	e008      	b.n	8002202 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021f0:	f7fe fed0 	bl	8000f94 <HAL_GetTick>
 80021f4:	4602      	mov	r2, r0
 80021f6:	693b      	ldr	r3, [r7, #16]
 80021f8:	1ad3      	subs	r3, r2, r3
 80021fa:	2b02      	cmp	r3, #2
 80021fc:	d901      	bls.n	8002202 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80021fe:	2303      	movs	r3, #3
 8002200:	e045      	b.n	800228e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002202:	4b03      	ldr	r3, [pc, #12]	; (8002210 <HAL_RCC_OscConfig+0x4d0>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800220a:	2b00      	cmp	r3, #0
 800220c:	d1f0      	bne.n	80021f0 <HAL_RCC_OscConfig+0x4b0>
 800220e:	e03d      	b.n	800228c <HAL_RCC_OscConfig+0x54c>
 8002210:	40023800 	.word	0x40023800
 8002214:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002218:	4b1f      	ldr	r3, [pc, #124]	; (8002298 <HAL_RCC_OscConfig+0x558>)
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	699b      	ldr	r3, [r3, #24]
 8002222:	2b01      	cmp	r3, #1
 8002224:	d030      	beq.n	8002288 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002230:	429a      	cmp	r2, r3
 8002232:	d129      	bne.n	8002288 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800223e:	429a      	cmp	r2, r3
 8002240:	d122      	bne.n	8002288 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002242:	68fa      	ldr	r2, [r7, #12]
 8002244:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002248:	4013      	ands	r3, r2
 800224a:	687a      	ldr	r2, [r7, #4]
 800224c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800224e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002250:	4293      	cmp	r3, r2
 8002252:	d119      	bne.n	8002288 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800225e:	085b      	lsrs	r3, r3, #1
 8002260:	3b01      	subs	r3, #1
 8002262:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002264:	429a      	cmp	r2, r3
 8002266:	d10f      	bne.n	8002288 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002272:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002274:	429a      	cmp	r2, r3
 8002276:	d107      	bne.n	8002288 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002282:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002284:	429a      	cmp	r2, r3
 8002286:	d001      	beq.n	800228c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002288:	2301      	movs	r3, #1
 800228a:	e000      	b.n	800228e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 800228c:	2300      	movs	r3, #0
}
 800228e:	4618      	mov	r0, r3
 8002290:	3718      	adds	r7, #24
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}
 8002296:	bf00      	nop
 8002298:	40023800 	.word	0x40023800

0800229c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b084      	sub	sp, #16
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
 80022a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80022a6:	2300      	movs	r3, #0
 80022a8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d101      	bne.n	80022b4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80022b0:	2301      	movs	r3, #1
 80022b2:	e0d0      	b.n	8002456 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80022b4:	4b6a      	ldr	r3, [pc, #424]	; (8002460 <HAL_RCC_ClockConfig+0x1c4>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f003 030f 	and.w	r3, r3, #15
 80022bc:	683a      	ldr	r2, [r7, #0]
 80022be:	429a      	cmp	r2, r3
 80022c0:	d910      	bls.n	80022e4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022c2:	4b67      	ldr	r3, [pc, #412]	; (8002460 <HAL_RCC_ClockConfig+0x1c4>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f023 020f 	bic.w	r2, r3, #15
 80022ca:	4965      	ldr	r1, [pc, #404]	; (8002460 <HAL_RCC_ClockConfig+0x1c4>)
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	4313      	orrs	r3, r2
 80022d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022d2:	4b63      	ldr	r3, [pc, #396]	; (8002460 <HAL_RCC_ClockConfig+0x1c4>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f003 030f 	and.w	r3, r3, #15
 80022da:	683a      	ldr	r2, [r7, #0]
 80022dc:	429a      	cmp	r2, r3
 80022de:	d001      	beq.n	80022e4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80022e0:	2301      	movs	r3, #1
 80022e2:	e0b8      	b.n	8002456 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f003 0302 	and.w	r3, r3, #2
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d020      	beq.n	8002332 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f003 0304 	and.w	r3, r3, #4
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d005      	beq.n	8002308 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80022fc:	4b59      	ldr	r3, [pc, #356]	; (8002464 <HAL_RCC_ClockConfig+0x1c8>)
 80022fe:	689b      	ldr	r3, [r3, #8]
 8002300:	4a58      	ldr	r2, [pc, #352]	; (8002464 <HAL_RCC_ClockConfig+0x1c8>)
 8002302:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002306:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f003 0308 	and.w	r3, r3, #8
 8002310:	2b00      	cmp	r3, #0
 8002312:	d005      	beq.n	8002320 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002314:	4b53      	ldr	r3, [pc, #332]	; (8002464 <HAL_RCC_ClockConfig+0x1c8>)
 8002316:	689b      	ldr	r3, [r3, #8]
 8002318:	4a52      	ldr	r2, [pc, #328]	; (8002464 <HAL_RCC_ClockConfig+0x1c8>)
 800231a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800231e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002320:	4b50      	ldr	r3, [pc, #320]	; (8002464 <HAL_RCC_ClockConfig+0x1c8>)
 8002322:	689b      	ldr	r3, [r3, #8]
 8002324:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	689b      	ldr	r3, [r3, #8]
 800232c:	494d      	ldr	r1, [pc, #308]	; (8002464 <HAL_RCC_ClockConfig+0x1c8>)
 800232e:	4313      	orrs	r3, r2
 8002330:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f003 0301 	and.w	r3, r3, #1
 800233a:	2b00      	cmp	r3, #0
 800233c:	d040      	beq.n	80023c0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	2b01      	cmp	r3, #1
 8002344:	d107      	bne.n	8002356 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002346:	4b47      	ldr	r3, [pc, #284]	; (8002464 <HAL_RCC_ClockConfig+0x1c8>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800234e:	2b00      	cmp	r3, #0
 8002350:	d115      	bne.n	800237e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002352:	2301      	movs	r3, #1
 8002354:	e07f      	b.n	8002456 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	2b02      	cmp	r3, #2
 800235c:	d107      	bne.n	800236e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800235e:	4b41      	ldr	r3, [pc, #260]	; (8002464 <HAL_RCC_ClockConfig+0x1c8>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002366:	2b00      	cmp	r3, #0
 8002368:	d109      	bne.n	800237e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800236a:	2301      	movs	r3, #1
 800236c:	e073      	b.n	8002456 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800236e:	4b3d      	ldr	r3, [pc, #244]	; (8002464 <HAL_RCC_ClockConfig+0x1c8>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f003 0302 	and.w	r3, r3, #2
 8002376:	2b00      	cmp	r3, #0
 8002378:	d101      	bne.n	800237e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800237a:	2301      	movs	r3, #1
 800237c:	e06b      	b.n	8002456 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800237e:	4b39      	ldr	r3, [pc, #228]	; (8002464 <HAL_RCC_ClockConfig+0x1c8>)
 8002380:	689b      	ldr	r3, [r3, #8]
 8002382:	f023 0203 	bic.w	r2, r3, #3
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	4936      	ldr	r1, [pc, #216]	; (8002464 <HAL_RCC_ClockConfig+0x1c8>)
 800238c:	4313      	orrs	r3, r2
 800238e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002390:	f7fe fe00 	bl	8000f94 <HAL_GetTick>
 8002394:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002396:	e00a      	b.n	80023ae <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002398:	f7fe fdfc 	bl	8000f94 <HAL_GetTick>
 800239c:	4602      	mov	r2, r0
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	1ad3      	subs	r3, r2, r3
 80023a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d901      	bls.n	80023ae <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80023aa:	2303      	movs	r3, #3
 80023ac:	e053      	b.n	8002456 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023ae:	4b2d      	ldr	r3, [pc, #180]	; (8002464 <HAL_RCC_ClockConfig+0x1c8>)
 80023b0:	689b      	ldr	r3, [r3, #8]
 80023b2:	f003 020c 	and.w	r2, r3, #12
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	009b      	lsls	r3, r3, #2
 80023bc:	429a      	cmp	r2, r3
 80023be:	d1eb      	bne.n	8002398 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80023c0:	4b27      	ldr	r3, [pc, #156]	; (8002460 <HAL_RCC_ClockConfig+0x1c4>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f003 030f 	and.w	r3, r3, #15
 80023c8:	683a      	ldr	r2, [r7, #0]
 80023ca:	429a      	cmp	r2, r3
 80023cc:	d210      	bcs.n	80023f0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023ce:	4b24      	ldr	r3, [pc, #144]	; (8002460 <HAL_RCC_ClockConfig+0x1c4>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f023 020f 	bic.w	r2, r3, #15
 80023d6:	4922      	ldr	r1, [pc, #136]	; (8002460 <HAL_RCC_ClockConfig+0x1c4>)
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	4313      	orrs	r3, r2
 80023dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023de:	4b20      	ldr	r3, [pc, #128]	; (8002460 <HAL_RCC_ClockConfig+0x1c4>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f003 030f 	and.w	r3, r3, #15
 80023e6:	683a      	ldr	r2, [r7, #0]
 80023e8:	429a      	cmp	r2, r3
 80023ea:	d001      	beq.n	80023f0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80023ec:	2301      	movs	r3, #1
 80023ee:	e032      	b.n	8002456 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f003 0304 	and.w	r3, r3, #4
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d008      	beq.n	800240e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023fc:	4b19      	ldr	r3, [pc, #100]	; (8002464 <HAL_RCC_ClockConfig+0x1c8>)
 80023fe:	689b      	ldr	r3, [r3, #8]
 8002400:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	68db      	ldr	r3, [r3, #12]
 8002408:	4916      	ldr	r1, [pc, #88]	; (8002464 <HAL_RCC_ClockConfig+0x1c8>)
 800240a:	4313      	orrs	r3, r2
 800240c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f003 0308 	and.w	r3, r3, #8
 8002416:	2b00      	cmp	r3, #0
 8002418:	d009      	beq.n	800242e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800241a:	4b12      	ldr	r3, [pc, #72]	; (8002464 <HAL_RCC_ClockConfig+0x1c8>)
 800241c:	689b      	ldr	r3, [r3, #8]
 800241e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	691b      	ldr	r3, [r3, #16]
 8002426:	00db      	lsls	r3, r3, #3
 8002428:	490e      	ldr	r1, [pc, #56]	; (8002464 <HAL_RCC_ClockConfig+0x1c8>)
 800242a:	4313      	orrs	r3, r2
 800242c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800242e:	f000 f821 	bl	8002474 <HAL_RCC_GetSysClockFreq>
 8002432:	4602      	mov	r2, r0
 8002434:	4b0b      	ldr	r3, [pc, #44]	; (8002464 <HAL_RCC_ClockConfig+0x1c8>)
 8002436:	689b      	ldr	r3, [r3, #8]
 8002438:	091b      	lsrs	r3, r3, #4
 800243a:	f003 030f 	and.w	r3, r3, #15
 800243e:	490a      	ldr	r1, [pc, #40]	; (8002468 <HAL_RCC_ClockConfig+0x1cc>)
 8002440:	5ccb      	ldrb	r3, [r1, r3]
 8002442:	fa22 f303 	lsr.w	r3, r2, r3
 8002446:	4a09      	ldr	r2, [pc, #36]	; (800246c <HAL_RCC_ClockConfig+0x1d0>)
 8002448:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800244a:	4b09      	ldr	r3, [pc, #36]	; (8002470 <HAL_RCC_ClockConfig+0x1d4>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4618      	mov	r0, r3
 8002450:	f7fe fd5c 	bl	8000f0c <HAL_InitTick>

  return HAL_OK;
 8002454:	2300      	movs	r3, #0
}
 8002456:	4618      	mov	r0, r3
 8002458:	3710      	adds	r7, #16
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}
 800245e:	bf00      	nop
 8002460:	40023c00 	.word	0x40023c00
 8002464:	40023800 	.word	0x40023800
 8002468:	08005224 	.word	0x08005224
 800246c:	20000000 	.word	0x20000000
 8002470:	20000004 	.word	0x20000004

08002474 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002474:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002478:	b094      	sub	sp, #80	; 0x50
 800247a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800247c:	2300      	movs	r3, #0
 800247e:	647b      	str	r3, [r7, #68]	; 0x44
 8002480:	2300      	movs	r3, #0
 8002482:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002484:	2300      	movs	r3, #0
 8002486:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8002488:	2300      	movs	r3, #0
 800248a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800248c:	4b79      	ldr	r3, [pc, #484]	; (8002674 <HAL_RCC_GetSysClockFreq+0x200>)
 800248e:	689b      	ldr	r3, [r3, #8]
 8002490:	f003 030c 	and.w	r3, r3, #12
 8002494:	2b08      	cmp	r3, #8
 8002496:	d00d      	beq.n	80024b4 <HAL_RCC_GetSysClockFreq+0x40>
 8002498:	2b08      	cmp	r3, #8
 800249a:	f200 80e1 	bhi.w	8002660 <HAL_RCC_GetSysClockFreq+0x1ec>
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d002      	beq.n	80024a8 <HAL_RCC_GetSysClockFreq+0x34>
 80024a2:	2b04      	cmp	r3, #4
 80024a4:	d003      	beq.n	80024ae <HAL_RCC_GetSysClockFreq+0x3a>
 80024a6:	e0db      	b.n	8002660 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80024a8:	4b73      	ldr	r3, [pc, #460]	; (8002678 <HAL_RCC_GetSysClockFreq+0x204>)
 80024aa:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80024ac:	e0db      	b.n	8002666 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80024ae:	4b72      	ldr	r3, [pc, #456]	; (8002678 <HAL_RCC_GetSysClockFreq+0x204>)
 80024b0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80024b2:	e0d8      	b.n	8002666 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80024b4:	4b6f      	ldr	r3, [pc, #444]	; (8002674 <HAL_RCC_GetSysClockFreq+0x200>)
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80024bc:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80024be:	4b6d      	ldr	r3, [pc, #436]	; (8002674 <HAL_RCC_GetSysClockFreq+0x200>)
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d063      	beq.n	8002592 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024ca:	4b6a      	ldr	r3, [pc, #424]	; (8002674 <HAL_RCC_GetSysClockFreq+0x200>)
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	099b      	lsrs	r3, r3, #6
 80024d0:	2200      	movs	r2, #0
 80024d2:	63bb      	str	r3, [r7, #56]	; 0x38
 80024d4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80024d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024dc:	633b      	str	r3, [r7, #48]	; 0x30
 80024de:	2300      	movs	r3, #0
 80024e0:	637b      	str	r3, [r7, #52]	; 0x34
 80024e2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80024e6:	4622      	mov	r2, r4
 80024e8:	462b      	mov	r3, r5
 80024ea:	f04f 0000 	mov.w	r0, #0
 80024ee:	f04f 0100 	mov.w	r1, #0
 80024f2:	0159      	lsls	r1, r3, #5
 80024f4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80024f8:	0150      	lsls	r0, r2, #5
 80024fa:	4602      	mov	r2, r0
 80024fc:	460b      	mov	r3, r1
 80024fe:	4621      	mov	r1, r4
 8002500:	1a51      	subs	r1, r2, r1
 8002502:	6139      	str	r1, [r7, #16]
 8002504:	4629      	mov	r1, r5
 8002506:	eb63 0301 	sbc.w	r3, r3, r1
 800250a:	617b      	str	r3, [r7, #20]
 800250c:	f04f 0200 	mov.w	r2, #0
 8002510:	f04f 0300 	mov.w	r3, #0
 8002514:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002518:	4659      	mov	r1, fp
 800251a:	018b      	lsls	r3, r1, #6
 800251c:	4651      	mov	r1, sl
 800251e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002522:	4651      	mov	r1, sl
 8002524:	018a      	lsls	r2, r1, #6
 8002526:	4651      	mov	r1, sl
 8002528:	ebb2 0801 	subs.w	r8, r2, r1
 800252c:	4659      	mov	r1, fp
 800252e:	eb63 0901 	sbc.w	r9, r3, r1
 8002532:	f04f 0200 	mov.w	r2, #0
 8002536:	f04f 0300 	mov.w	r3, #0
 800253a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800253e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002542:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002546:	4690      	mov	r8, r2
 8002548:	4699      	mov	r9, r3
 800254a:	4623      	mov	r3, r4
 800254c:	eb18 0303 	adds.w	r3, r8, r3
 8002550:	60bb      	str	r3, [r7, #8]
 8002552:	462b      	mov	r3, r5
 8002554:	eb49 0303 	adc.w	r3, r9, r3
 8002558:	60fb      	str	r3, [r7, #12]
 800255a:	f04f 0200 	mov.w	r2, #0
 800255e:	f04f 0300 	mov.w	r3, #0
 8002562:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002566:	4629      	mov	r1, r5
 8002568:	028b      	lsls	r3, r1, #10
 800256a:	4621      	mov	r1, r4
 800256c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002570:	4621      	mov	r1, r4
 8002572:	028a      	lsls	r2, r1, #10
 8002574:	4610      	mov	r0, r2
 8002576:	4619      	mov	r1, r3
 8002578:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800257a:	2200      	movs	r2, #0
 800257c:	62bb      	str	r3, [r7, #40]	; 0x28
 800257e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002580:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002584:	f7fd feb4 	bl	80002f0 <__aeabi_uldivmod>
 8002588:	4602      	mov	r2, r0
 800258a:	460b      	mov	r3, r1
 800258c:	4613      	mov	r3, r2
 800258e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002590:	e058      	b.n	8002644 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002592:	4b38      	ldr	r3, [pc, #224]	; (8002674 <HAL_RCC_GetSysClockFreq+0x200>)
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	099b      	lsrs	r3, r3, #6
 8002598:	2200      	movs	r2, #0
 800259a:	4618      	mov	r0, r3
 800259c:	4611      	mov	r1, r2
 800259e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80025a2:	623b      	str	r3, [r7, #32]
 80025a4:	2300      	movs	r3, #0
 80025a6:	627b      	str	r3, [r7, #36]	; 0x24
 80025a8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80025ac:	4642      	mov	r2, r8
 80025ae:	464b      	mov	r3, r9
 80025b0:	f04f 0000 	mov.w	r0, #0
 80025b4:	f04f 0100 	mov.w	r1, #0
 80025b8:	0159      	lsls	r1, r3, #5
 80025ba:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80025be:	0150      	lsls	r0, r2, #5
 80025c0:	4602      	mov	r2, r0
 80025c2:	460b      	mov	r3, r1
 80025c4:	4641      	mov	r1, r8
 80025c6:	ebb2 0a01 	subs.w	sl, r2, r1
 80025ca:	4649      	mov	r1, r9
 80025cc:	eb63 0b01 	sbc.w	fp, r3, r1
 80025d0:	f04f 0200 	mov.w	r2, #0
 80025d4:	f04f 0300 	mov.w	r3, #0
 80025d8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80025dc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80025e0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80025e4:	ebb2 040a 	subs.w	r4, r2, sl
 80025e8:	eb63 050b 	sbc.w	r5, r3, fp
 80025ec:	f04f 0200 	mov.w	r2, #0
 80025f0:	f04f 0300 	mov.w	r3, #0
 80025f4:	00eb      	lsls	r3, r5, #3
 80025f6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80025fa:	00e2      	lsls	r2, r4, #3
 80025fc:	4614      	mov	r4, r2
 80025fe:	461d      	mov	r5, r3
 8002600:	4643      	mov	r3, r8
 8002602:	18e3      	adds	r3, r4, r3
 8002604:	603b      	str	r3, [r7, #0]
 8002606:	464b      	mov	r3, r9
 8002608:	eb45 0303 	adc.w	r3, r5, r3
 800260c:	607b      	str	r3, [r7, #4]
 800260e:	f04f 0200 	mov.w	r2, #0
 8002612:	f04f 0300 	mov.w	r3, #0
 8002616:	e9d7 4500 	ldrd	r4, r5, [r7]
 800261a:	4629      	mov	r1, r5
 800261c:	028b      	lsls	r3, r1, #10
 800261e:	4621      	mov	r1, r4
 8002620:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002624:	4621      	mov	r1, r4
 8002626:	028a      	lsls	r2, r1, #10
 8002628:	4610      	mov	r0, r2
 800262a:	4619      	mov	r1, r3
 800262c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800262e:	2200      	movs	r2, #0
 8002630:	61bb      	str	r3, [r7, #24]
 8002632:	61fa      	str	r2, [r7, #28]
 8002634:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002638:	f7fd fe5a 	bl	80002f0 <__aeabi_uldivmod>
 800263c:	4602      	mov	r2, r0
 800263e:	460b      	mov	r3, r1
 8002640:	4613      	mov	r3, r2
 8002642:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002644:	4b0b      	ldr	r3, [pc, #44]	; (8002674 <HAL_RCC_GetSysClockFreq+0x200>)
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	0c1b      	lsrs	r3, r3, #16
 800264a:	f003 0303 	and.w	r3, r3, #3
 800264e:	3301      	adds	r3, #1
 8002650:	005b      	lsls	r3, r3, #1
 8002652:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8002654:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002656:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002658:	fbb2 f3f3 	udiv	r3, r2, r3
 800265c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800265e:	e002      	b.n	8002666 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002660:	4b05      	ldr	r3, [pc, #20]	; (8002678 <HAL_RCC_GetSysClockFreq+0x204>)
 8002662:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002664:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002666:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002668:	4618      	mov	r0, r3
 800266a:	3750      	adds	r7, #80	; 0x50
 800266c:	46bd      	mov	sp, r7
 800266e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002672:	bf00      	nop
 8002674:	40023800 	.word	0x40023800
 8002678:	00f42400 	.word	0x00f42400

0800267c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800267c:	b480      	push	{r7}
 800267e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002680:	4b03      	ldr	r3, [pc, #12]	; (8002690 <HAL_RCC_GetHCLKFreq+0x14>)
 8002682:	681b      	ldr	r3, [r3, #0]
}
 8002684:	4618      	mov	r0, r3
 8002686:	46bd      	mov	sp, r7
 8002688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268c:	4770      	bx	lr
 800268e:	bf00      	nop
 8002690:	20000000 	.word	0x20000000

08002694 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002698:	f7ff fff0 	bl	800267c <HAL_RCC_GetHCLKFreq>
 800269c:	4602      	mov	r2, r0
 800269e:	4b05      	ldr	r3, [pc, #20]	; (80026b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80026a0:	689b      	ldr	r3, [r3, #8]
 80026a2:	0a9b      	lsrs	r3, r3, #10
 80026a4:	f003 0307 	and.w	r3, r3, #7
 80026a8:	4903      	ldr	r1, [pc, #12]	; (80026b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80026aa:	5ccb      	ldrb	r3, [r1, r3]
 80026ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	bd80      	pop	{r7, pc}
 80026b4:	40023800 	.word	0x40023800
 80026b8:	08005234 	.word	0x08005234

080026bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80026c0:	f7ff ffdc 	bl	800267c <HAL_RCC_GetHCLKFreq>
 80026c4:	4602      	mov	r2, r0
 80026c6:	4b05      	ldr	r3, [pc, #20]	; (80026dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80026c8:	689b      	ldr	r3, [r3, #8]
 80026ca:	0b5b      	lsrs	r3, r3, #13
 80026cc:	f003 0307 	and.w	r3, r3, #7
 80026d0:	4903      	ldr	r1, [pc, #12]	; (80026e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80026d2:	5ccb      	ldrb	r3, [r1, r3]
 80026d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026d8:	4618      	mov	r0, r3
 80026da:	bd80      	pop	{r7, pc}
 80026dc:	40023800 	.word	0x40023800
 80026e0:	08005234 	.word	0x08005234

080026e4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b088      	sub	sp, #32
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80026ec:	2300      	movs	r3, #0
 80026ee:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80026f0:	2300      	movs	r3, #0
 80026f2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80026f4:	2300      	movs	r3, #0
 80026f6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80026f8:	2300      	movs	r3, #0
 80026fa:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80026fc:	2300      	movs	r3, #0
 80026fe:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f003 0301 	and.w	r3, r3, #1
 8002708:	2b00      	cmp	r3, #0
 800270a:	d012      	beq.n	8002732 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800270c:	4b69      	ldr	r3, [pc, #420]	; (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800270e:	689b      	ldr	r3, [r3, #8]
 8002710:	4a68      	ldr	r2, [pc, #416]	; (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002712:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002716:	6093      	str	r3, [r2, #8]
 8002718:	4b66      	ldr	r3, [pc, #408]	; (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800271a:	689a      	ldr	r2, [r3, #8]
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002720:	4964      	ldr	r1, [pc, #400]	; (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002722:	4313      	orrs	r3, r2
 8002724:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800272a:	2b00      	cmp	r3, #0
 800272c:	d101      	bne.n	8002732 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800272e:	2301      	movs	r3, #1
 8002730:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800273a:	2b00      	cmp	r3, #0
 800273c:	d017      	beq.n	800276e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800273e:	4b5d      	ldr	r3, [pc, #372]	; (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002740:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002744:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800274c:	4959      	ldr	r1, [pc, #356]	; (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800274e:	4313      	orrs	r3, r2
 8002750:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002758:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800275c:	d101      	bne.n	8002762 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800275e:	2301      	movs	r3, #1
 8002760:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002766:	2b00      	cmp	r3, #0
 8002768:	d101      	bne.n	800276e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800276a:	2301      	movs	r3, #1
 800276c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002776:	2b00      	cmp	r3, #0
 8002778:	d017      	beq.n	80027aa <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800277a:	4b4e      	ldr	r3, [pc, #312]	; (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800277c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002780:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002788:	494a      	ldr	r1, [pc, #296]	; (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800278a:	4313      	orrs	r3, r2
 800278c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002794:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002798:	d101      	bne.n	800279e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800279a:	2301      	movs	r3, #1
 800279c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d101      	bne.n	80027aa <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80027a6:	2301      	movs	r3, #1
 80027a8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d001      	beq.n	80027ba <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80027b6:	2301      	movs	r3, #1
 80027b8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f003 0320 	and.w	r3, r3, #32
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	f000 808b 	beq.w	80028de <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80027c8:	4b3a      	ldr	r3, [pc, #232]	; (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027cc:	4a39      	ldr	r2, [pc, #228]	; (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027d2:	6413      	str	r3, [r2, #64]	; 0x40
 80027d4:	4b37      	ldr	r3, [pc, #220]	; (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027dc:	60bb      	str	r3, [r7, #8]
 80027de:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80027e0:	4b35      	ldr	r3, [pc, #212]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a34      	ldr	r2, [pc, #208]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80027e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027ea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027ec:	f7fe fbd2 	bl	8000f94 <HAL_GetTick>
 80027f0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80027f2:	e008      	b.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027f4:	f7fe fbce 	bl	8000f94 <HAL_GetTick>
 80027f8:	4602      	mov	r2, r0
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	1ad3      	subs	r3, r2, r3
 80027fe:	2b64      	cmp	r3, #100	; 0x64
 8002800:	d901      	bls.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002802:	2303      	movs	r3, #3
 8002804:	e38f      	b.n	8002f26 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002806:	4b2c      	ldr	r3, [pc, #176]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800280e:	2b00      	cmp	r3, #0
 8002810:	d0f0      	beq.n	80027f4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002812:	4b28      	ldr	r3, [pc, #160]	; (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002814:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002816:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800281a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800281c:	693b      	ldr	r3, [r7, #16]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d035      	beq.n	800288e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002826:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800282a:	693a      	ldr	r2, [r7, #16]
 800282c:	429a      	cmp	r2, r3
 800282e:	d02e      	beq.n	800288e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002830:	4b20      	ldr	r3, [pc, #128]	; (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002832:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002834:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002838:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800283a:	4b1e      	ldr	r3, [pc, #120]	; (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800283c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800283e:	4a1d      	ldr	r2, [pc, #116]	; (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002840:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002844:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002846:	4b1b      	ldr	r3, [pc, #108]	; (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002848:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800284a:	4a1a      	ldr	r2, [pc, #104]	; (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800284c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002850:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002852:	4a18      	ldr	r2, [pc, #96]	; (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002854:	693b      	ldr	r3, [r7, #16]
 8002856:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002858:	4b16      	ldr	r3, [pc, #88]	; (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800285a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800285c:	f003 0301 	and.w	r3, r3, #1
 8002860:	2b01      	cmp	r3, #1
 8002862:	d114      	bne.n	800288e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002864:	f7fe fb96 	bl	8000f94 <HAL_GetTick>
 8002868:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800286a:	e00a      	b.n	8002882 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800286c:	f7fe fb92 	bl	8000f94 <HAL_GetTick>
 8002870:	4602      	mov	r2, r0
 8002872:	697b      	ldr	r3, [r7, #20]
 8002874:	1ad3      	subs	r3, r2, r3
 8002876:	f241 3288 	movw	r2, #5000	; 0x1388
 800287a:	4293      	cmp	r3, r2
 800287c:	d901      	bls.n	8002882 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800287e:	2303      	movs	r3, #3
 8002880:	e351      	b.n	8002f26 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002882:	4b0c      	ldr	r3, [pc, #48]	; (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002884:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002886:	f003 0302 	and.w	r3, r3, #2
 800288a:	2b00      	cmp	r3, #0
 800288c:	d0ee      	beq.n	800286c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002892:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002896:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800289a:	d111      	bne.n	80028c0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800289c:	4b05      	ldr	r3, [pc, #20]	; (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800289e:	689b      	ldr	r3, [r3, #8]
 80028a0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80028a8:	4b04      	ldr	r3, [pc, #16]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80028aa:	400b      	ands	r3, r1
 80028ac:	4901      	ldr	r1, [pc, #4]	; (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028ae:	4313      	orrs	r3, r2
 80028b0:	608b      	str	r3, [r1, #8]
 80028b2:	e00b      	b.n	80028cc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80028b4:	40023800 	.word	0x40023800
 80028b8:	40007000 	.word	0x40007000
 80028bc:	0ffffcff 	.word	0x0ffffcff
 80028c0:	4bac      	ldr	r3, [pc, #688]	; (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80028c2:	689b      	ldr	r3, [r3, #8]
 80028c4:	4aab      	ldr	r2, [pc, #684]	; (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80028c6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80028ca:	6093      	str	r3, [r2, #8]
 80028cc:	4ba9      	ldr	r3, [pc, #676]	; (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80028ce:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028d8:	49a6      	ldr	r1, [pc, #664]	; (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80028da:	4313      	orrs	r3, r2
 80028dc:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f003 0310 	and.w	r3, r3, #16
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d010      	beq.n	800290c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80028ea:	4ba2      	ldr	r3, [pc, #648]	; (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80028ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80028f0:	4aa0      	ldr	r2, [pc, #640]	; (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80028f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80028f6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80028fa:	4b9e      	ldr	r3, [pc, #632]	; (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80028fc:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002904:	499b      	ldr	r1, [pc, #620]	; (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002906:	4313      	orrs	r3, r2
 8002908:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002914:	2b00      	cmp	r3, #0
 8002916:	d00a      	beq.n	800292e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002918:	4b96      	ldr	r3, [pc, #600]	; (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800291a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800291e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002926:	4993      	ldr	r1, [pc, #588]	; (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002928:	4313      	orrs	r3, r2
 800292a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002936:	2b00      	cmp	r3, #0
 8002938:	d00a      	beq.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800293a:	4b8e      	ldr	r3, [pc, #568]	; (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800293c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002940:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002948:	498a      	ldr	r1, [pc, #552]	; (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800294a:	4313      	orrs	r3, r2
 800294c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002958:	2b00      	cmp	r3, #0
 800295a:	d00a      	beq.n	8002972 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800295c:	4b85      	ldr	r3, [pc, #532]	; (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800295e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002962:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800296a:	4982      	ldr	r1, [pc, #520]	; (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800296c:	4313      	orrs	r3, r2
 800296e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800297a:	2b00      	cmp	r3, #0
 800297c:	d00a      	beq.n	8002994 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800297e:	4b7d      	ldr	r3, [pc, #500]	; (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002980:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002984:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800298c:	4979      	ldr	r1, [pc, #484]	; (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800298e:	4313      	orrs	r3, r2
 8002990:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800299c:	2b00      	cmp	r3, #0
 800299e:	d00a      	beq.n	80029b6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80029a0:	4b74      	ldr	r3, [pc, #464]	; (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80029a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029a6:	f023 0203 	bic.w	r2, r3, #3
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ae:	4971      	ldr	r1, [pc, #452]	; (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80029b0:	4313      	orrs	r3, r2
 80029b2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d00a      	beq.n	80029d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80029c2:	4b6c      	ldr	r3, [pc, #432]	; (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80029c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029c8:	f023 020c 	bic.w	r2, r3, #12
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029d0:	4968      	ldr	r1, [pc, #416]	; (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80029d2:	4313      	orrs	r3, r2
 80029d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d00a      	beq.n	80029fa <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80029e4:	4b63      	ldr	r3, [pc, #396]	; (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80029e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029ea:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029f2:	4960      	ldr	r1, [pc, #384]	; (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80029f4:	4313      	orrs	r3, r2
 80029f6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d00a      	beq.n	8002a1c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002a06:	4b5b      	ldr	r3, [pc, #364]	; (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a0c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a14:	4957      	ldr	r1, [pc, #348]	; (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a16:	4313      	orrs	r3, r2
 8002a18:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d00a      	beq.n	8002a3e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002a28:	4b52      	ldr	r3, [pc, #328]	; (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a2e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a36:	494f      	ldr	r1, [pc, #316]	; (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d00a      	beq.n	8002a60 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002a4a:	4b4a      	ldr	r3, [pc, #296]	; (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a50:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a58:	4946      	ldr	r1, [pc, #280]	; (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d00a      	beq.n	8002a82 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002a6c:	4b41      	ldr	r3, [pc, #260]	; (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a72:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a7a:	493e      	ldr	r1, [pc, #248]	; (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d00a      	beq.n	8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002a8e:	4b39      	ldr	r3, [pc, #228]	; (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a94:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a9c:	4935      	ldr	r1, [pc, #212]	; (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d00a      	beq.n	8002ac6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002ab0:	4b30      	ldr	r3, [pc, #192]	; (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ab2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ab6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002abe:	492d      	ldr	r1, [pc, #180]	; (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d011      	beq.n	8002af6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002ad2:	4b28      	ldr	r3, [pc, #160]	; (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ad4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ad8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ae0:	4924      	ldr	r1, [pc, #144]	; (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002aec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002af0:	d101      	bne.n	8002af6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002af2:	2301      	movs	r3, #1
 8002af4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f003 0308 	and.w	r3, r3, #8
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d001      	beq.n	8002b06 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002b02:	2301      	movs	r3, #1
 8002b04:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d00a      	beq.n	8002b28 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002b12:	4b18      	ldr	r3, [pc, #96]	; (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b18:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b20:	4914      	ldr	r1, [pc, #80]	; (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b22:	4313      	orrs	r3, r2
 8002b24:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d00b      	beq.n	8002b4c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002b34:	4b0f      	ldr	r3, [pc, #60]	; (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b3a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b44:	490b      	ldr	r1, [pc, #44]	; (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b46:	4313      	orrs	r3, r2
 8002b48:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d00f      	beq.n	8002b78 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002b58:	4b06      	ldr	r3, [pc, #24]	; (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b5e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b68:	4902      	ldr	r1, [pc, #8]	; (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002b70:	e002      	b.n	8002b78 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8002b72:	bf00      	nop
 8002b74:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d00b      	beq.n	8002b9c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002b84:	4b8a      	ldr	r3, [pc, #552]	; (8002db0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b86:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b8a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b94:	4986      	ldr	r1, [pc, #536]	; (8002db0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b96:	4313      	orrs	r3, r2
 8002b98:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d00b      	beq.n	8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002ba8:	4b81      	ldr	r3, [pc, #516]	; (8002db0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002baa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002bae:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002bb8:	497d      	ldr	r1, [pc, #500]	; (8002db0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002bc0:	69fb      	ldr	r3, [r7, #28]
 8002bc2:	2b01      	cmp	r3, #1
 8002bc4:	d006      	beq.n	8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	f000 80d6 	beq.w	8002d80 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002bd4:	4b76      	ldr	r3, [pc, #472]	; (8002db0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a75      	ldr	r2, [pc, #468]	; (8002db0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002bda:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002bde:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002be0:	f7fe f9d8 	bl	8000f94 <HAL_GetTick>
 8002be4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002be6:	e008      	b.n	8002bfa <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002be8:	f7fe f9d4 	bl	8000f94 <HAL_GetTick>
 8002bec:	4602      	mov	r2, r0
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	1ad3      	subs	r3, r2, r3
 8002bf2:	2b64      	cmp	r3, #100	; 0x64
 8002bf4:	d901      	bls.n	8002bfa <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002bf6:	2303      	movs	r3, #3
 8002bf8:	e195      	b.n	8002f26 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002bfa:	4b6d      	ldr	r3, [pc, #436]	; (8002db0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d1f0      	bne.n	8002be8 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f003 0301 	and.w	r3, r3, #1
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d021      	beq.n	8002c56 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d11d      	bne.n	8002c56 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002c1a:	4b65      	ldr	r3, [pc, #404]	; (8002db0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c20:	0c1b      	lsrs	r3, r3, #16
 8002c22:	f003 0303 	and.w	r3, r3, #3
 8002c26:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002c28:	4b61      	ldr	r3, [pc, #388]	; (8002db0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c2e:	0e1b      	lsrs	r3, r3, #24
 8002c30:	f003 030f 	and.w	r3, r3, #15
 8002c34:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	019a      	lsls	r2, r3, #6
 8002c3c:	693b      	ldr	r3, [r7, #16]
 8002c3e:	041b      	lsls	r3, r3, #16
 8002c40:	431a      	orrs	r2, r3
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	061b      	lsls	r3, r3, #24
 8002c46:	431a      	orrs	r2, r3
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	689b      	ldr	r3, [r3, #8]
 8002c4c:	071b      	lsls	r3, r3, #28
 8002c4e:	4958      	ldr	r1, [pc, #352]	; (8002db0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c50:	4313      	orrs	r3, r2
 8002c52:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d004      	beq.n	8002c6c <HAL_RCCEx_PeriphCLKConfig+0x588>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c66:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c6a:	d00a      	beq.n	8002c82 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d02e      	beq.n	8002cd6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c7c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c80:	d129      	bne.n	8002cd6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002c82:	4b4b      	ldr	r3, [pc, #300]	; (8002db0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c84:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c88:	0c1b      	lsrs	r3, r3, #16
 8002c8a:	f003 0303 	and.w	r3, r3, #3
 8002c8e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002c90:	4b47      	ldr	r3, [pc, #284]	; (8002db0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c92:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c96:	0f1b      	lsrs	r3, r3, #28
 8002c98:	f003 0307 	and.w	r3, r3, #7
 8002c9c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	019a      	lsls	r2, r3, #6
 8002ca4:	693b      	ldr	r3, [r7, #16]
 8002ca6:	041b      	lsls	r3, r3, #16
 8002ca8:	431a      	orrs	r2, r3
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	68db      	ldr	r3, [r3, #12]
 8002cae:	061b      	lsls	r3, r3, #24
 8002cb0:	431a      	orrs	r2, r3
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	071b      	lsls	r3, r3, #28
 8002cb6:	493e      	ldr	r1, [pc, #248]	; (8002db0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002cbe:	4b3c      	ldr	r3, [pc, #240]	; (8002db0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002cc0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002cc4:	f023 021f 	bic.w	r2, r3, #31
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ccc:	3b01      	subs	r3, #1
 8002cce:	4938      	ldr	r1, [pc, #224]	; (8002db0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d01d      	beq.n	8002d1e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002ce2:	4b33      	ldr	r3, [pc, #204]	; (8002db0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ce4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ce8:	0e1b      	lsrs	r3, r3, #24
 8002cea:	f003 030f 	and.w	r3, r3, #15
 8002cee:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002cf0:	4b2f      	ldr	r3, [pc, #188]	; (8002db0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002cf2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002cf6:	0f1b      	lsrs	r3, r3, #28
 8002cf8:	f003 0307 	and.w	r3, r3, #7
 8002cfc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	019a      	lsls	r2, r3, #6
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	691b      	ldr	r3, [r3, #16]
 8002d08:	041b      	lsls	r3, r3, #16
 8002d0a:	431a      	orrs	r2, r3
 8002d0c:	693b      	ldr	r3, [r7, #16]
 8002d0e:	061b      	lsls	r3, r3, #24
 8002d10:	431a      	orrs	r2, r3
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	071b      	lsls	r3, r3, #28
 8002d16:	4926      	ldr	r1, [pc, #152]	; (8002db0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d011      	beq.n	8002d4e <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	019a      	lsls	r2, r3, #6
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	691b      	ldr	r3, [r3, #16]
 8002d34:	041b      	lsls	r3, r3, #16
 8002d36:	431a      	orrs	r2, r3
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	68db      	ldr	r3, [r3, #12]
 8002d3c:	061b      	lsls	r3, r3, #24
 8002d3e:	431a      	orrs	r2, r3
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	689b      	ldr	r3, [r3, #8]
 8002d44:	071b      	lsls	r3, r3, #28
 8002d46:	491a      	ldr	r1, [pc, #104]	; (8002db0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002d4e:	4b18      	ldr	r3, [pc, #96]	; (8002db0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a17      	ldr	r2, [pc, #92]	; (8002db0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d54:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002d58:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d5a:	f7fe f91b 	bl	8000f94 <HAL_GetTick>
 8002d5e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002d60:	e008      	b.n	8002d74 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002d62:	f7fe f917 	bl	8000f94 <HAL_GetTick>
 8002d66:	4602      	mov	r2, r0
 8002d68:	697b      	ldr	r3, [r7, #20]
 8002d6a:	1ad3      	subs	r3, r2, r3
 8002d6c:	2b64      	cmp	r3, #100	; 0x64
 8002d6e:	d901      	bls.n	8002d74 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002d70:	2303      	movs	r3, #3
 8002d72:	e0d8      	b.n	8002f26 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002d74:	4b0e      	ldr	r3, [pc, #56]	; (8002db0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d0f0      	beq.n	8002d62 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002d80:	69bb      	ldr	r3, [r7, #24]
 8002d82:	2b01      	cmp	r3, #1
 8002d84:	f040 80ce 	bne.w	8002f24 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002d88:	4b09      	ldr	r3, [pc, #36]	; (8002db0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a08      	ldr	r2, [pc, #32]	; (8002db0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d8e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d92:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d94:	f7fe f8fe 	bl	8000f94 <HAL_GetTick>
 8002d98:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002d9a:	e00b      	b.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002d9c:	f7fe f8fa 	bl	8000f94 <HAL_GetTick>
 8002da0:	4602      	mov	r2, r0
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	1ad3      	subs	r3, r2, r3
 8002da6:	2b64      	cmp	r3, #100	; 0x64
 8002da8:	d904      	bls.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002daa:	2303      	movs	r3, #3
 8002dac:	e0bb      	b.n	8002f26 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8002dae:	bf00      	nop
 8002db0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002db4:	4b5e      	ldr	r3, [pc, #376]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002dbc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002dc0:	d0ec      	beq.n	8002d9c <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d003      	beq.n	8002dd6 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d009      	beq.n	8002dea <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d02e      	beq.n	8002e40 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d12a      	bne.n	8002e40 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002dea:	4b51      	ldr	r3, [pc, #324]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002dec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002df0:	0c1b      	lsrs	r3, r3, #16
 8002df2:	f003 0303 	and.w	r3, r3, #3
 8002df6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002df8:	4b4d      	ldr	r3, [pc, #308]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002dfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dfe:	0f1b      	lsrs	r3, r3, #28
 8002e00:	f003 0307 	and.w	r3, r3, #7
 8002e04:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	695b      	ldr	r3, [r3, #20]
 8002e0a:	019a      	lsls	r2, r3, #6
 8002e0c:	693b      	ldr	r3, [r7, #16]
 8002e0e:	041b      	lsls	r3, r3, #16
 8002e10:	431a      	orrs	r2, r3
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	699b      	ldr	r3, [r3, #24]
 8002e16:	061b      	lsls	r3, r3, #24
 8002e18:	431a      	orrs	r2, r3
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	071b      	lsls	r3, r3, #28
 8002e1e:	4944      	ldr	r1, [pc, #272]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002e20:	4313      	orrs	r3, r2
 8002e22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002e26:	4b42      	ldr	r3, [pc, #264]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002e28:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e2c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e34:	3b01      	subs	r3, #1
 8002e36:	021b      	lsls	r3, r3, #8
 8002e38:	493d      	ldr	r1, [pc, #244]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d022      	beq.n	8002e92 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e50:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002e54:	d11d      	bne.n	8002e92 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002e56:	4b36      	ldr	r3, [pc, #216]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002e58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e5c:	0e1b      	lsrs	r3, r3, #24
 8002e5e:	f003 030f 	and.w	r3, r3, #15
 8002e62:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002e64:	4b32      	ldr	r3, [pc, #200]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002e66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e6a:	0f1b      	lsrs	r3, r3, #28
 8002e6c:	f003 0307 	and.w	r3, r3, #7
 8002e70:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	695b      	ldr	r3, [r3, #20]
 8002e76:	019a      	lsls	r2, r3, #6
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6a1b      	ldr	r3, [r3, #32]
 8002e7c:	041b      	lsls	r3, r3, #16
 8002e7e:	431a      	orrs	r2, r3
 8002e80:	693b      	ldr	r3, [r7, #16]
 8002e82:	061b      	lsls	r3, r3, #24
 8002e84:	431a      	orrs	r2, r3
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	071b      	lsls	r3, r3, #28
 8002e8a:	4929      	ldr	r1, [pc, #164]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f003 0308 	and.w	r3, r3, #8
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d028      	beq.n	8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002e9e:	4b24      	ldr	r3, [pc, #144]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002ea0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ea4:	0e1b      	lsrs	r3, r3, #24
 8002ea6:	f003 030f 	and.w	r3, r3, #15
 8002eaa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002eac:	4b20      	ldr	r3, [pc, #128]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002eae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002eb2:	0c1b      	lsrs	r3, r3, #16
 8002eb4:	f003 0303 	and.w	r3, r3, #3
 8002eb8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	695b      	ldr	r3, [r3, #20]
 8002ebe:	019a      	lsls	r2, r3, #6
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	041b      	lsls	r3, r3, #16
 8002ec4:	431a      	orrs	r2, r3
 8002ec6:	693b      	ldr	r3, [r7, #16]
 8002ec8:	061b      	lsls	r3, r3, #24
 8002eca:	431a      	orrs	r2, r3
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	69db      	ldr	r3, [r3, #28]
 8002ed0:	071b      	lsls	r3, r3, #28
 8002ed2:	4917      	ldr	r1, [pc, #92]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002eda:	4b15      	ldr	r3, [pc, #84]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002edc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ee0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ee8:	4911      	ldr	r1, [pc, #68]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002eea:	4313      	orrs	r3, r2
 8002eec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002ef0:	4b0f      	ldr	r3, [pc, #60]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a0e      	ldr	r2, [pc, #56]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002ef6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002efa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002efc:	f7fe f84a 	bl	8000f94 <HAL_GetTick>
 8002f00:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002f02:	e008      	b.n	8002f16 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002f04:	f7fe f846 	bl	8000f94 <HAL_GetTick>
 8002f08:	4602      	mov	r2, r0
 8002f0a:	697b      	ldr	r3, [r7, #20]
 8002f0c:	1ad3      	subs	r3, r2, r3
 8002f0e:	2b64      	cmp	r3, #100	; 0x64
 8002f10:	d901      	bls.n	8002f16 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002f12:	2303      	movs	r3, #3
 8002f14:	e007      	b.n	8002f26 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002f16:	4b06      	ldr	r3, [pc, #24]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002f1e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002f22:	d1ef      	bne.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8002f24:	2300      	movs	r3, #0
}
 8002f26:	4618      	mov	r0, r3
 8002f28:	3720      	adds	r7, #32
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}
 8002f2e:	bf00      	nop
 8002f30:	40023800 	.word	0x40023800

08002f34 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b082      	sub	sp, #8
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d101      	bne.n	8002f46 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
 8002f44:	e049      	b.n	8002fda <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f4c:	b2db      	uxtb	r3, r3
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d106      	bne.n	8002f60 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2200      	movs	r2, #0
 8002f56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002f5a:	6878      	ldr	r0, [r7, #4]
 8002f5c:	f7fd fe7a 	bl	8000c54 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2202      	movs	r2, #2
 8002f64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681a      	ldr	r2, [r3, #0]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	3304      	adds	r3, #4
 8002f70:	4619      	mov	r1, r3
 8002f72:	4610      	mov	r0, r2
 8002f74:	f000 fb6e 	bl	8003654 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2201      	movs	r2, #1
 8002f84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2201      	movs	r2, #1
 8002f94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2201      	movs	r2, #1
 8002fa4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2201      	movs	r2, #1
 8002fac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2201      	movs	r2, #1
 8002fb4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2201      	movs	r2, #1
 8002fbc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2201      	movs	r2, #1
 8002fc4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2201      	movs	r2, #1
 8002fcc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002fd8:	2300      	movs	r3, #0
}
 8002fda:	4618      	mov	r0, r3
 8002fdc:	3708      	adds	r7, #8
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}

08002fe2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002fe2:	b580      	push	{r7, lr}
 8002fe4:	b082      	sub	sp, #8
 8002fe6:	af00      	add	r7, sp, #0
 8002fe8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d101      	bne.n	8002ff4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	e049      	b.n	8003088 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ffa:	b2db      	uxtb	r3, r3
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d106      	bne.n	800300e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2200      	movs	r2, #0
 8003004:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003008:	6878      	ldr	r0, [r7, #4]
 800300a:	f000 f841 	bl	8003090 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2202      	movs	r2, #2
 8003012:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681a      	ldr	r2, [r3, #0]
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	3304      	adds	r3, #4
 800301e:	4619      	mov	r1, r3
 8003020:	4610      	mov	r0, r2
 8003022:	f000 fb17 	bl	8003654 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2201      	movs	r2, #1
 800302a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2201      	movs	r2, #1
 8003032:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2201      	movs	r2, #1
 800303a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2201      	movs	r2, #1
 8003042:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2201      	movs	r2, #1
 800304a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2201      	movs	r2, #1
 8003052:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2201      	movs	r2, #1
 800305a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2201      	movs	r2, #1
 8003062:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2201      	movs	r2, #1
 800306a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2201      	movs	r2, #1
 8003072:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2201      	movs	r2, #1
 800307a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2201      	movs	r2, #1
 8003082:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003086:	2300      	movs	r3, #0
}
 8003088:	4618      	mov	r0, r3
 800308a:	3708      	adds	r7, #8
 800308c:	46bd      	mov	sp, r7
 800308e:	bd80      	pop	{r7, pc}

08003090 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003090:	b480      	push	{r7}
 8003092:	b083      	sub	sp, #12
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003098:	bf00      	nop
 800309a:	370c      	adds	r7, #12
 800309c:	46bd      	mov	sp, r7
 800309e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a2:	4770      	bx	lr

080030a4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b084      	sub	sp, #16
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
 80030ac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d109      	bne.n	80030c8 <HAL_TIM_PWM_Start+0x24>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80030ba:	b2db      	uxtb	r3, r3
 80030bc:	2b01      	cmp	r3, #1
 80030be:	bf14      	ite	ne
 80030c0:	2301      	movne	r3, #1
 80030c2:	2300      	moveq	r3, #0
 80030c4:	b2db      	uxtb	r3, r3
 80030c6:	e03c      	b.n	8003142 <HAL_TIM_PWM_Start+0x9e>
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	2b04      	cmp	r3, #4
 80030cc:	d109      	bne.n	80030e2 <HAL_TIM_PWM_Start+0x3e>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80030d4:	b2db      	uxtb	r3, r3
 80030d6:	2b01      	cmp	r3, #1
 80030d8:	bf14      	ite	ne
 80030da:	2301      	movne	r3, #1
 80030dc:	2300      	moveq	r3, #0
 80030de:	b2db      	uxtb	r3, r3
 80030e0:	e02f      	b.n	8003142 <HAL_TIM_PWM_Start+0x9e>
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	2b08      	cmp	r3, #8
 80030e6:	d109      	bne.n	80030fc <HAL_TIM_PWM_Start+0x58>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80030ee:	b2db      	uxtb	r3, r3
 80030f0:	2b01      	cmp	r3, #1
 80030f2:	bf14      	ite	ne
 80030f4:	2301      	movne	r3, #1
 80030f6:	2300      	moveq	r3, #0
 80030f8:	b2db      	uxtb	r3, r3
 80030fa:	e022      	b.n	8003142 <HAL_TIM_PWM_Start+0x9e>
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	2b0c      	cmp	r3, #12
 8003100:	d109      	bne.n	8003116 <HAL_TIM_PWM_Start+0x72>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003108:	b2db      	uxtb	r3, r3
 800310a:	2b01      	cmp	r3, #1
 800310c:	bf14      	ite	ne
 800310e:	2301      	movne	r3, #1
 8003110:	2300      	moveq	r3, #0
 8003112:	b2db      	uxtb	r3, r3
 8003114:	e015      	b.n	8003142 <HAL_TIM_PWM_Start+0x9e>
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	2b10      	cmp	r3, #16
 800311a:	d109      	bne.n	8003130 <HAL_TIM_PWM_Start+0x8c>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003122:	b2db      	uxtb	r3, r3
 8003124:	2b01      	cmp	r3, #1
 8003126:	bf14      	ite	ne
 8003128:	2301      	movne	r3, #1
 800312a:	2300      	moveq	r3, #0
 800312c:	b2db      	uxtb	r3, r3
 800312e:	e008      	b.n	8003142 <HAL_TIM_PWM_Start+0x9e>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003136:	b2db      	uxtb	r3, r3
 8003138:	2b01      	cmp	r3, #1
 800313a:	bf14      	ite	ne
 800313c:	2301      	movne	r3, #1
 800313e:	2300      	moveq	r3, #0
 8003140:	b2db      	uxtb	r3, r3
 8003142:	2b00      	cmp	r3, #0
 8003144:	d001      	beq.n	800314a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003146:	2301      	movs	r3, #1
 8003148:	e092      	b.n	8003270 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d104      	bne.n	800315a <HAL_TIM_PWM_Start+0xb6>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2202      	movs	r2, #2
 8003154:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003158:	e023      	b.n	80031a2 <HAL_TIM_PWM_Start+0xfe>
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	2b04      	cmp	r3, #4
 800315e:	d104      	bne.n	800316a <HAL_TIM_PWM_Start+0xc6>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2202      	movs	r2, #2
 8003164:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003168:	e01b      	b.n	80031a2 <HAL_TIM_PWM_Start+0xfe>
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	2b08      	cmp	r3, #8
 800316e:	d104      	bne.n	800317a <HAL_TIM_PWM_Start+0xd6>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2202      	movs	r2, #2
 8003174:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003178:	e013      	b.n	80031a2 <HAL_TIM_PWM_Start+0xfe>
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	2b0c      	cmp	r3, #12
 800317e:	d104      	bne.n	800318a <HAL_TIM_PWM_Start+0xe6>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2202      	movs	r2, #2
 8003184:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003188:	e00b      	b.n	80031a2 <HAL_TIM_PWM_Start+0xfe>
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	2b10      	cmp	r3, #16
 800318e:	d104      	bne.n	800319a <HAL_TIM_PWM_Start+0xf6>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2202      	movs	r2, #2
 8003194:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003198:	e003      	b.n	80031a2 <HAL_TIM_PWM_Start+0xfe>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2202      	movs	r2, #2
 800319e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	2201      	movs	r2, #1
 80031a8:	6839      	ldr	r1, [r7, #0]
 80031aa:	4618      	mov	r0, r3
 80031ac:	f000 fdea 	bl	8003d84 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a30      	ldr	r2, [pc, #192]	; (8003278 <HAL_TIM_PWM_Start+0x1d4>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d004      	beq.n	80031c4 <HAL_TIM_PWM_Start+0x120>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4a2f      	ldr	r2, [pc, #188]	; (800327c <HAL_TIM_PWM_Start+0x1d8>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d101      	bne.n	80031c8 <HAL_TIM_PWM_Start+0x124>
 80031c4:	2301      	movs	r3, #1
 80031c6:	e000      	b.n	80031ca <HAL_TIM_PWM_Start+0x126>
 80031c8:	2300      	movs	r3, #0
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d007      	beq.n	80031de <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80031dc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a25      	ldr	r2, [pc, #148]	; (8003278 <HAL_TIM_PWM_Start+0x1d4>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d022      	beq.n	800322e <HAL_TIM_PWM_Start+0x18a>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031f0:	d01d      	beq.n	800322e <HAL_TIM_PWM_Start+0x18a>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a22      	ldr	r2, [pc, #136]	; (8003280 <HAL_TIM_PWM_Start+0x1dc>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d018      	beq.n	800322e <HAL_TIM_PWM_Start+0x18a>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a20      	ldr	r2, [pc, #128]	; (8003284 <HAL_TIM_PWM_Start+0x1e0>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d013      	beq.n	800322e <HAL_TIM_PWM_Start+0x18a>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a1f      	ldr	r2, [pc, #124]	; (8003288 <HAL_TIM_PWM_Start+0x1e4>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d00e      	beq.n	800322e <HAL_TIM_PWM_Start+0x18a>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a19      	ldr	r2, [pc, #100]	; (800327c <HAL_TIM_PWM_Start+0x1d8>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d009      	beq.n	800322e <HAL_TIM_PWM_Start+0x18a>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a1b      	ldr	r2, [pc, #108]	; (800328c <HAL_TIM_PWM_Start+0x1e8>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d004      	beq.n	800322e <HAL_TIM_PWM_Start+0x18a>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a19      	ldr	r2, [pc, #100]	; (8003290 <HAL_TIM_PWM_Start+0x1ec>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d115      	bne.n	800325a <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	689a      	ldr	r2, [r3, #8]
 8003234:	4b17      	ldr	r3, [pc, #92]	; (8003294 <HAL_TIM_PWM_Start+0x1f0>)
 8003236:	4013      	ands	r3, r2
 8003238:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	2b06      	cmp	r3, #6
 800323e:	d015      	beq.n	800326c <HAL_TIM_PWM_Start+0x1c8>
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003246:	d011      	beq.n	800326c <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	681a      	ldr	r2, [r3, #0]
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f042 0201 	orr.w	r2, r2, #1
 8003256:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003258:	e008      	b.n	800326c <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	681a      	ldr	r2, [r3, #0]
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f042 0201 	orr.w	r2, r2, #1
 8003268:	601a      	str	r2, [r3, #0]
 800326a:	e000      	b.n	800326e <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800326c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800326e:	2300      	movs	r3, #0
}
 8003270:	4618      	mov	r0, r3
 8003272:	3710      	adds	r7, #16
 8003274:	46bd      	mov	sp, r7
 8003276:	bd80      	pop	{r7, pc}
 8003278:	40010000 	.word	0x40010000
 800327c:	40010400 	.word	0x40010400
 8003280:	40000400 	.word	0x40000400
 8003284:	40000800 	.word	0x40000800
 8003288:	40000c00 	.word	0x40000c00
 800328c:	40014000 	.word	0x40014000
 8003290:	40001800 	.word	0x40001800
 8003294:	00010007 	.word	0x00010007

08003298 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b086      	sub	sp, #24
 800329c:	af00      	add	r7, sp, #0
 800329e:	60f8      	str	r0, [r7, #12]
 80032a0:	60b9      	str	r1, [r7, #8]
 80032a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80032a4:	2300      	movs	r3, #0
 80032a6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032ae:	2b01      	cmp	r3, #1
 80032b0:	d101      	bne.n	80032b6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80032b2:	2302      	movs	r3, #2
 80032b4:	e0ff      	b.n	80034b6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	2201      	movs	r2, #1
 80032ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2b14      	cmp	r3, #20
 80032c2:	f200 80f0 	bhi.w	80034a6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80032c6:	a201      	add	r2, pc, #4	; (adr r2, 80032cc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80032c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032cc:	08003321 	.word	0x08003321
 80032d0:	080034a7 	.word	0x080034a7
 80032d4:	080034a7 	.word	0x080034a7
 80032d8:	080034a7 	.word	0x080034a7
 80032dc:	08003361 	.word	0x08003361
 80032e0:	080034a7 	.word	0x080034a7
 80032e4:	080034a7 	.word	0x080034a7
 80032e8:	080034a7 	.word	0x080034a7
 80032ec:	080033a3 	.word	0x080033a3
 80032f0:	080034a7 	.word	0x080034a7
 80032f4:	080034a7 	.word	0x080034a7
 80032f8:	080034a7 	.word	0x080034a7
 80032fc:	080033e3 	.word	0x080033e3
 8003300:	080034a7 	.word	0x080034a7
 8003304:	080034a7 	.word	0x080034a7
 8003308:	080034a7 	.word	0x080034a7
 800330c:	08003425 	.word	0x08003425
 8003310:	080034a7 	.word	0x080034a7
 8003314:	080034a7 	.word	0x080034a7
 8003318:	080034a7 	.word	0x080034a7
 800331c:	08003465 	.word	0x08003465
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	68b9      	ldr	r1, [r7, #8]
 8003326:	4618      	mov	r0, r3
 8003328:	f000 fa34 	bl	8003794 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	699a      	ldr	r2, [r3, #24]
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f042 0208 	orr.w	r2, r2, #8
 800333a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	699a      	ldr	r2, [r3, #24]
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f022 0204 	bic.w	r2, r2, #4
 800334a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	6999      	ldr	r1, [r3, #24]
 8003352:	68bb      	ldr	r3, [r7, #8]
 8003354:	691a      	ldr	r2, [r3, #16]
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	430a      	orrs	r2, r1
 800335c:	619a      	str	r2, [r3, #24]
      break;
 800335e:	e0a5      	b.n	80034ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	68b9      	ldr	r1, [r7, #8]
 8003366:	4618      	mov	r0, r3
 8003368:	f000 fa86 	bl	8003878 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	699a      	ldr	r2, [r3, #24]
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800337a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	699a      	ldr	r2, [r3, #24]
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800338a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	6999      	ldr	r1, [r3, #24]
 8003392:	68bb      	ldr	r3, [r7, #8]
 8003394:	691b      	ldr	r3, [r3, #16]
 8003396:	021a      	lsls	r2, r3, #8
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	430a      	orrs	r2, r1
 800339e:	619a      	str	r2, [r3, #24]
      break;
 80033a0:	e084      	b.n	80034ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	68b9      	ldr	r1, [r7, #8]
 80033a8:	4618      	mov	r0, r3
 80033aa:	f000 fadd 	bl	8003968 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	69da      	ldr	r2, [r3, #28]
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f042 0208 	orr.w	r2, r2, #8
 80033bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	69da      	ldr	r2, [r3, #28]
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f022 0204 	bic.w	r2, r2, #4
 80033cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	69d9      	ldr	r1, [r3, #28]
 80033d4:	68bb      	ldr	r3, [r7, #8]
 80033d6:	691a      	ldr	r2, [r3, #16]
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	430a      	orrs	r2, r1
 80033de:	61da      	str	r2, [r3, #28]
      break;
 80033e0:	e064      	b.n	80034ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	68b9      	ldr	r1, [r7, #8]
 80033e8:	4618      	mov	r0, r3
 80033ea:	f000 fb33 	bl	8003a54 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	69da      	ldr	r2, [r3, #28]
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80033fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	69da      	ldr	r2, [r3, #28]
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800340c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	69d9      	ldr	r1, [r3, #28]
 8003414:	68bb      	ldr	r3, [r7, #8]
 8003416:	691b      	ldr	r3, [r3, #16]
 8003418:	021a      	lsls	r2, r3, #8
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	430a      	orrs	r2, r1
 8003420:	61da      	str	r2, [r3, #28]
      break;
 8003422:	e043      	b.n	80034ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	68b9      	ldr	r1, [r7, #8]
 800342a:	4618      	mov	r0, r3
 800342c:	f000 fb6a 	bl	8003b04 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f042 0208 	orr.w	r2, r2, #8
 800343e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f022 0204 	bic.w	r2, r2, #4
 800344e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003456:	68bb      	ldr	r3, [r7, #8]
 8003458:	691a      	ldr	r2, [r3, #16]
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	430a      	orrs	r2, r1
 8003460:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003462:	e023      	b.n	80034ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	68b9      	ldr	r1, [r7, #8]
 800346a:	4618      	mov	r0, r3
 800346c:	f000 fb9c 	bl	8003ba8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800347e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800348e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003496:	68bb      	ldr	r3, [r7, #8]
 8003498:	691b      	ldr	r3, [r3, #16]
 800349a:	021a      	lsls	r2, r3, #8
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	430a      	orrs	r2, r1
 80034a2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80034a4:	e002      	b.n	80034ac <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80034a6:	2301      	movs	r3, #1
 80034a8:	75fb      	strb	r3, [r7, #23]
      break;
 80034aa:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	2200      	movs	r2, #0
 80034b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80034b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	3718      	adds	r7, #24
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}
 80034be:	bf00      	nop

080034c0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b084      	sub	sp, #16
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
 80034c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80034ca:	2300      	movs	r3, #0
 80034cc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034d4:	2b01      	cmp	r3, #1
 80034d6:	d101      	bne.n	80034dc <HAL_TIM_ConfigClockSource+0x1c>
 80034d8:	2302      	movs	r3, #2
 80034da:	e0b4      	b.n	8003646 <HAL_TIM_ConfigClockSource+0x186>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2201      	movs	r2, #1
 80034e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2202      	movs	r2, #2
 80034e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	689b      	ldr	r3, [r3, #8]
 80034f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80034f4:	68ba      	ldr	r2, [r7, #8]
 80034f6:	4b56      	ldr	r3, [pc, #344]	; (8003650 <HAL_TIM_ConfigClockSource+0x190>)
 80034f8:	4013      	ands	r3, r2
 80034fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80034fc:	68bb      	ldr	r3, [r7, #8]
 80034fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003502:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	68ba      	ldr	r2, [r7, #8]
 800350a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003514:	d03e      	beq.n	8003594 <HAL_TIM_ConfigClockSource+0xd4>
 8003516:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800351a:	f200 8087 	bhi.w	800362c <HAL_TIM_ConfigClockSource+0x16c>
 800351e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003522:	f000 8086 	beq.w	8003632 <HAL_TIM_ConfigClockSource+0x172>
 8003526:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800352a:	d87f      	bhi.n	800362c <HAL_TIM_ConfigClockSource+0x16c>
 800352c:	2b70      	cmp	r3, #112	; 0x70
 800352e:	d01a      	beq.n	8003566 <HAL_TIM_ConfigClockSource+0xa6>
 8003530:	2b70      	cmp	r3, #112	; 0x70
 8003532:	d87b      	bhi.n	800362c <HAL_TIM_ConfigClockSource+0x16c>
 8003534:	2b60      	cmp	r3, #96	; 0x60
 8003536:	d050      	beq.n	80035da <HAL_TIM_ConfigClockSource+0x11a>
 8003538:	2b60      	cmp	r3, #96	; 0x60
 800353a:	d877      	bhi.n	800362c <HAL_TIM_ConfigClockSource+0x16c>
 800353c:	2b50      	cmp	r3, #80	; 0x50
 800353e:	d03c      	beq.n	80035ba <HAL_TIM_ConfigClockSource+0xfa>
 8003540:	2b50      	cmp	r3, #80	; 0x50
 8003542:	d873      	bhi.n	800362c <HAL_TIM_ConfigClockSource+0x16c>
 8003544:	2b40      	cmp	r3, #64	; 0x40
 8003546:	d058      	beq.n	80035fa <HAL_TIM_ConfigClockSource+0x13a>
 8003548:	2b40      	cmp	r3, #64	; 0x40
 800354a:	d86f      	bhi.n	800362c <HAL_TIM_ConfigClockSource+0x16c>
 800354c:	2b30      	cmp	r3, #48	; 0x30
 800354e:	d064      	beq.n	800361a <HAL_TIM_ConfigClockSource+0x15a>
 8003550:	2b30      	cmp	r3, #48	; 0x30
 8003552:	d86b      	bhi.n	800362c <HAL_TIM_ConfigClockSource+0x16c>
 8003554:	2b20      	cmp	r3, #32
 8003556:	d060      	beq.n	800361a <HAL_TIM_ConfigClockSource+0x15a>
 8003558:	2b20      	cmp	r3, #32
 800355a:	d867      	bhi.n	800362c <HAL_TIM_ConfigClockSource+0x16c>
 800355c:	2b00      	cmp	r3, #0
 800355e:	d05c      	beq.n	800361a <HAL_TIM_ConfigClockSource+0x15a>
 8003560:	2b10      	cmp	r3, #16
 8003562:	d05a      	beq.n	800361a <HAL_TIM_ConfigClockSource+0x15a>
 8003564:	e062      	b.n	800362c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6818      	ldr	r0, [r3, #0]
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	6899      	ldr	r1, [r3, #8]
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	685a      	ldr	r2, [r3, #4]
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	68db      	ldr	r3, [r3, #12]
 8003576:	f000 fbe5 	bl	8003d44 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003582:	68bb      	ldr	r3, [r7, #8]
 8003584:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003588:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	68ba      	ldr	r2, [r7, #8]
 8003590:	609a      	str	r2, [r3, #8]
      break;
 8003592:	e04f      	b.n	8003634 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6818      	ldr	r0, [r3, #0]
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	6899      	ldr	r1, [r3, #8]
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	685a      	ldr	r2, [r3, #4]
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	68db      	ldr	r3, [r3, #12]
 80035a4:	f000 fbce 	bl	8003d44 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	689a      	ldr	r2, [r3, #8]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80035b6:	609a      	str	r2, [r3, #8]
      break;
 80035b8:	e03c      	b.n	8003634 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6818      	ldr	r0, [r3, #0]
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	6859      	ldr	r1, [r3, #4]
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	68db      	ldr	r3, [r3, #12]
 80035c6:	461a      	mov	r2, r3
 80035c8:	f000 fb42 	bl	8003c50 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	2150      	movs	r1, #80	; 0x50
 80035d2:	4618      	mov	r0, r3
 80035d4:	f000 fb9b 	bl	8003d0e <TIM_ITRx_SetConfig>
      break;
 80035d8:	e02c      	b.n	8003634 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6818      	ldr	r0, [r3, #0]
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	6859      	ldr	r1, [r3, #4]
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	68db      	ldr	r3, [r3, #12]
 80035e6:	461a      	mov	r2, r3
 80035e8:	f000 fb61 	bl	8003cae <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	2160      	movs	r1, #96	; 0x60
 80035f2:	4618      	mov	r0, r3
 80035f4:	f000 fb8b 	bl	8003d0e <TIM_ITRx_SetConfig>
      break;
 80035f8:	e01c      	b.n	8003634 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6818      	ldr	r0, [r3, #0]
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	6859      	ldr	r1, [r3, #4]
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	68db      	ldr	r3, [r3, #12]
 8003606:	461a      	mov	r2, r3
 8003608:	f000 fb22 	bl	8003c50 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	2140      	movs	r1, #64	; 0x40
 8003612:	4618      	mov	r0, r3
 8003614:	f000 fb7b 	bl	8003d0e <TIM_ITRx_SetConfig>
      break;
 8003618:	e00c      	b.n	8003634 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681a      	ldr	r2, [r3, #0]
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4619      	mov	r1, r3
 8003624:	4610      	mov	r0, r2
 8003626:	f000 fb72 	bl	8003d0e <TIM_ITRx_SetConfig>
      break;
 800362a:	e003      	b.n	8003634 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800362c:	2301      	movs	r3, #1
 800362e:	73fb      	strb	r3, [r7, #15]
      break;
 8003630:	e000      	b.n	8003634 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003632:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2201      	movs	r2, #1
 8003638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2200      	movs	r2, #0
 8003640:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003644:	7bfb      	ldrb	r3, [r7, #15]
}
 8003646:	4618      	mov	r0, r3
 8003648:	3710      	adds	r7, #16
 800364a:	46bd      	mov	sp, r7
 800364c:	bd80      	pop	{r7, pc}
 800364e:	bf00      	nop
 8003650:	fffeff88 	.word	0xfffeff88

08003654 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003654:	b480      	push	{r7}
 8003656:	b085      	sub	sp, #20
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
 800365c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	4a40      	ldr	r2, [pc, #256]	; (8003768 <TIM_Base_SetConfig+0x114>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d013      	beq.n	8003694 <TIM_Base_SetConfig+0x40>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003672:	d00f      	beq.n	8003694 <TIM_Base_SetConfig+0x40>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	4a3d      	ldr	r2, [pc, #244]	; (800376c <TIM_Base_SetConfig+0x118>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d00b      	beq.n	8003694 <TIM_Base_SetConfig+0x40>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	4a3c      	ldr	r2, [pc, #240]	; (8003770 <TIM_Base_SetConfig+0x11c>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d007      	beq.n	8003694 <TIM_Base_SetConfig+0x40>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	4a3b      	ldr	r2, [pc, #236]	; (8003774 <TIM_Base_SetConfig+0x120>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d003      	beq.n	8003694 <TIM_Base_SetConfig+0x40>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	4a3a      	ldr	r2, [pc, #232]	; (8003778 <TIM_Base_SetConfig+0x124>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d108      	bne.n	80036a6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800369a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	68fa      	ldr	r2, [r7, #12]
 80036a2:	4313      	orrs	r3, r2
 80036a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	4a2f      	ldr	r2, [pc, #188]	; (8003768 <TIM_Base_SetConfig+0x114>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d02b      	beq.n	8003706 <TIM_Base_SetConfig+0xb2>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036b4:	d027      	beq.n	8003706 <TIM_Base_SetConfig+0xb2>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	4a2c      	ldr	r2, [pc, #176]	; (800376c <TIM_Base_SetConfig+0x118>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d023      	beq.n	8003706 <TIM_Base_SetConfig+0xb2>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	4a2b      	ldr	r2, [pc, #172]	; (8003770 <TIM_Base_SetConfig+0x11c>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d01f      	beq.n	8003706 <TIM_Base_SetConfig+0xb2>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	4a2a      	ldr	r2, [pc, #168]	; (8003774 <TIM_Base_SetConfig+0x120>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d01b      	beq.n	8003706 <TIM_Base_SetConfig+0xb2>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	4a29      	ldr	r2, [pc, #164]	; (8003778 <TIM_Base_SetConfig+0x124>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d017      	beq.n	8003706 <TIM_Base_SetConfig+0xb2>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	4a28      	ldr	r2, [pc, #160]	; (800377c <TIM_Base_SetConfig+0x128>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d013      	beq.n	8003706 <TIM_Base_SetConfig+0xb2>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	4a27      	ldr	r2, [pc, #156]	; (8003780 <TIM_Base_SetConfig+0x12c>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d00f      	beq.n	8003706 <TIM_Base_SetConfig+0xb2>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	4a26      	ldr	r2, [pc, #152]	; (8003784 <TIM_Base_SetConfig+0x130>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d00b      	beq.n	8003706 <TIM_Base_SetConfig+0xb2>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	4a25      	ldr	r2, [pc, #148]	; (8003788 <TIM_Base_SetConfig+0x134>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d007      	beq.n	8003706 <TIM_Base_SetConfig+0xb2>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	4a24      	ldr	r2, [pc, #144]	; (800378c <TIM_Base_SetConfig+0x138>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d003      	beq.n	8003706 <TIM_Base_SetConfig+0xb2>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	4a23      	ldr	r2, [pc, #140]	; (8003790 <TIM_Base_SetConfig+0x13c>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d108      	bne.n	8003718 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800370c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	68db      	ldr	r3, [r3, #12]
 8003712:	68fa      	ldr	r2, [r7, #12]
 8003714:	4313      	orrs	r3, r2
 8003716:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	695b      	ldr	r3, [r3, #20]
 8003722:	4313      	orrs	r3, r2
 8003724:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	68fa      	ldr	r2, [r7, #12]
 800372a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	689a      	ldr	r2, [r3, #8]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	681a      	ldr	r2, [r3, #0]
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	4a0a      	ldr	r2, [pc, #40]	; (8003768 <TIM_Base_SetConfig+0x114>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d003      	beq.n	800374c <TIM_Base_SetConfig+0xf8>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	4a0c      	ldr	r2, [pc, #48]	; (8003778 <TIM_Base_SetConfig+0x124>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d103      	bne.n	8003754 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	691a      	ldr	r2, [r3, #16]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2201      	movs	r2, #1
 8003758:	615a      	str	r2, [r3, #20]
}
 800375a:	bf00      	nop
 800375c:	3714      	adds	r7, #20
 800375e:	46bd      	mov	sp, r7
 8003760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003764:	4770      	bx	lr
 8003766:	bf00      	nop
 8003768:	40010000 	.word	0x40010000
 800376c:	40000400 	.word	0x40000400
 8003770:	40000800 	.word	0x40000800
 8003774:	40000c00 	.word	0x40000c00
 8003778:	40010400 	.word	0x40010400
 800377c:	40014000 	.word	0x40014000
 8003780:	40014400 	.word	0x40014400
 8003784:	40014800 	.word	0x40014800
 8003788:	40001800 	.word	0x40001800
 800378c:	40001c00 	.word	0x40001c00
 8003790:	40002000 	.word	0x40002000

08003794 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003794:	b480      	push	{r7}
 8003796:	b087      	sub	sp, #28
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
 800379c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6a1b      	ldr	r3, [r3, #32]
 80037a2:	f023 0201 	bic.w	r2, r3, #1
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6a1b      	ldr	r3, [r3, #32]
 80037ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	699b      	ldr	r3, [r3, #24]
 80037ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80037bc:	68fa      	ldr	r2, [r7, #12]
 80037be:	4b2b      	ldr	r3, [pc, #172]	; (800386c <TIM_OC1_SetConfig+0xd8>)
 80037c0:	4013      	ands	r3, r2
 80037c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	f023 0303 	bic.w	r3, r3, #3
 80037ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	68fa      	ldr	r2, [r7, #12]
 80037d2:	4313      	orrs	r3, r2
 80037d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80037d6:	697b      	ldr	r3, [r7, #20]
 80037d8:	f023 0302 	bic.w	r3, r3, #2
 80037dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	689b      	ldr	r3, [r3, #8]
 80037e2:	697a      	ldr	r2, [r7, #20]
 80037e4:	4313      	orrs	r3, r2
 80037e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	4a21      	ldr	r2, [pc, #132]	; (8003870 <TIM_OC1_SetConfig+0xdc>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d003      	beq.n	80037f8 <TIM_OC1_SetConfig+0x64>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	4a20      	ldr	r2, [pc, #128]	; (8003874 <TIM_OC1_SetConfig+0xe0>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d10c      	bne.n	8003812 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80037f8:	697b      	ldr	r3, [r7, #20]
 80037fa:	f023 0308 	bic.w	r3, r3, #8
 80037fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	68db      	ldr	r3, [r3, #12]
 8003804:	697a      	ldr	r2, [r7, #20]
 8003806:	4313      	orrs	r3, r2
 8003808:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800380a:	697b      	ldr	r3, [r7, #20]
 800380c:	f023 0304 	bic.w	r3, r3, #4
 8003810:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	4a16      	ldr	r2, [pc, #88]	; (8003870 <TIM_OC1_SetConfig+0xdc>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d003      	beq.n	8003822 <TIM_OC1_SetConfig+0x8e>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	4a15      	ldr	r2, [pc, #84]	; (8003874 <TIM_OC1_SetConfig+0xe0>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d111      	bne.n	8003846 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003822:	693b      	ldr	r3, [r7, #16]
 8003824:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003828:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800382a:	693b      	ldr	r3, [r7, #16]
 800382c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003830:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	695b      	ldr	r3, [r3, #20]
 8003836:	693a      	ldr	r2, [r7, #16]
 8003838:	4313      	orrs	r3, r2
 800383a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	699b      	ldr	r3, [r3, #24]
 8003840:	693a      	ldr	r2, [r7, #16]
 8003842:	4313      	orrs	r3, r2
 8003844:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	693a      	ldr	r2, [r7, #16]
 800384a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	68fa      	ldr	r2, [r7, #12]
 8003850:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	685a      	ldr	r2, [r3, #4]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	697a      	ldr	r2, [r7, #20]
 800385e:	621a      	str	r2, [r3, #32]
}
 8003860:	bf00      	nop
 8003862:	371c      	adds	r7, #28
 8003864:	46bd      	mov	sp, r7
 8003866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386a:	4770      	bx	lr
 800386c:	fffeff8f 	.word	0xfffeff8f
 8003870:	40010000 	.word	0x40010000
 8003874:	40010400 	.word	0x40010400

08003878 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003878:	b480      	push	{r7}
 800387a:	b087      	sub	sp, #28
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
 8003880:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6a1b      	ldr	r3, [r3, #32]
 8003886:	f023 0210 	bic.w	r2, r3, #16
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6a1b      	ldr	r3, [r3, #32]
 8003892:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	699b      	ldr	r3, [r3, #24]
 800389e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80038a0:	68fa      	ldr	r2, [r7, #12]
 80038a2:	4b2e      	ldr	r3, [pc, #184]	; (800395c <TIM_OC2_SetConfig+0xe4>)
 80038a4:	4013      	ands	r3, r2
 80038a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	021b      	lsls	r3, r3, #8
 80038b6:	68fa      	ldr	r2, [r7, #12]
 80038b8:	4313      	orrs	r3, r2
 80038ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80038bc:	697b      	ldr	r3, [r7, #20]
 80038be:	f023 0320 	bic.w	r3, r3, #32
 80038c2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	689b      	ldr	r3, [r3, #8]
 80038c8:	011b      	lsls	r3, r3, #4
 80038ca:	697a      	ldr	r2, [r7, #20]
 80038cc:	4313      	orrs	r3, r2
 80038ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	4a23      	ldr	r2, [pc, #140]	; (8003960 <TIM_OC2_SetConfig+0xe8>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d003      	beq.n	80038e0 <TIM_OC2_SetConfig+0x68>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	4a22      	ldr	r2, [pc, #136]	; (8003964 <TIM_OC2_SetConfig+0xec>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d10d      	bne.n	80038fc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80038e0:	697b      	ldr	r3, [r7, #20]
 80038e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80038e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	68db      	ldr	r3, [r3, #12]
 80038ec:	011b      	lsls	r3, r3, #4
 80038ee:	697a      	ldr	r2, [r7, #20]
 80038f0:	4313      	orrs	r3, r2
 80038f2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80038f4:	697b      	ldr	r3, [r7, #20]
 80038f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80038fa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	4a18      	ldr	r2, [pc, #96]	; (8003960 <TIM_OC2_SetConfig+0xe8>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d003      	beq.n	800390c <TIM_OC2_SetConfig+0x94>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	4a17      	ldr	r2, [pc, #92]	; (8003964 <TIM_OC2_SetConfig+0xec>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d113      	bne.n	8003934 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800390c:	693b      	ldr	r3, [r7, #16]
 800390e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003912:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003914:	693b      	ldr	r3, [r7, #16]
 8003916:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800391a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	695b      	ldr	r3, [r3, #20]
 8003920:	009b      	lsls	r3, r3, #2
 8003922:	693a      	ldr	r2, [r7, #16]
 8003924:	4313      	orrs	r3, r2
 8003926:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	699b      	ldr	r3, [r3, #24]
 800392c:	009b      	lsls	r3, r3, #2
 800392e:	693a      	ldr	r2, [r7, #16]
 8003930:	4313      	orrs	r3, r2
 8003932:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	693a      	ldr	r2, [r7, #16]
 8003938:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	68fa      	ldr	r2, [r7, #12]
 800393e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	685a      	ldr	r2, [r3, #4]
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	697a      	ldr	r2, [r7, #20]
 800394c:	621a      	str	r2, [r3, #32]
}
 800394e:	bf00      	nop
 8003950:	371c      	adds	r7, #28
 8003952:	46bd      	mov	sp, r7
 8003954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003958:	4770      	bx	lr
 800395a:	bf00      	nop
 800395c:	feff8fff 	.word	0xfeff8fff
 8003960:	40010000 	.word	0x40010000
 8003964:	40010400 	.word	0x40010400

08003968 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003968:	b480      	push	{r7}
 800396a:	b087      	sub	sp, #28
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
 8003970:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6a1b      	ldr	r3, [r3, #32]
 8003976:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6a1b      	ldr	r3, [r3, #32]
 8003982:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	69db      	ldr	r3, [r3, #28]
 800398e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003990:	68fa      	ldr	r2, [r7, #12]
 8003992:	4b2d      	ldr	r3, [pc, #180]	; (8003a48 <TIM_OC3_SetConfig+0xe0>)
 8003994:	4013      	ands	r3, r2
 8003996:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	f023 0303 	bic.w	r3, r3, #3
 800399e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	68fa      	ldr	r2, [r7, #12]
 80039a6:	4313      	orrs	r3, r2
 80039a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80039aa:	697b      	ldr	r3, [r7, #20]
 80039ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80039b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	689b      	ldr	r3, [r3, #8]
 80039b6:	021b      	lsls	r3, r3, #8
 80039b8:	697a      	ldr	r2, [r7, #20]
 80039ba:	4313      	orrs	r3, r2
 80039bc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	4a22      	ldr	r2, [pc, #136]	; (8003a4c <TIM_OC3_SetConfig+0xe4>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d003      	beq.n	80039ce <TIM_OC3_SetConfig+0x66>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	4a21      	ldr	r2, [pc, #132]	; (8003a50 <TIM_OC3_SetConfig+0xe8>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d10d      	bne.n	80039ea <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80039ce:	697b      	ldr	r3, [r7, #20]
 80039d0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80039d4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	68db      	ldr	r3, [r3, #12]
 80039da:	021b      	lsls	r3, r3, #8
 80039dc:	697a      	ldr	r2, [r7, #20]
 80039de:	4313      	orrs	r3, r2
 80039e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80039e2:	697b      	ldr	r3, [r7, #20]
 80039e4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80039e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	4a17      	ldr	r2, [pc, #92]	; (8003a4c <TIM_OC3_SetConfig+0xe4>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d003      	beq.n	80039fa <TIM_OC3_SetConfig+0x92>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	4a16      	ldr	r2, [pc, #88]	; (8003a50 <TIM_OC3_SetConfig+0xe8>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d113      	bne.n	8003a22 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80039fa:	693b      	ldr	r3, [r7, #16]
 80039fc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003a00:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003a02:	693b      	ldr	r3, [r7, #16]
 8003a04:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003a08:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	695b      	ldr	r3, [r3, #20]
 8003a0e:	011b      	lsls	r3, r3, #4
 8003a10:	693a      	ldr	r2, [r7, #16]
 8003a12:	4313      	orrs	r3, r2
 8003a14:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	699b      	ldr	r3, [r3, #24]
 8003a1a:	011b      	lsls	r3, r3, #4
 8003a1c:	693a      	ldr	r2, [r7, #16]
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	693a      	ldr	r2, [r7, #16]
 8003a26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	68fa      	ldr	r2, [r7, #12]
 8003a2c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	685a      	ldr	r2, [r3, #4]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	697a      	ldr	r2, [r7, #20]
 8003a3a:	621a      	str	r2, [r3, #32]
}
 8003a3c:	bf00      	nop
 8003a3e:	371c      	adds	r7, #28
 8003a40:	46bd      	mov	sp, r7
 8003a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a46:	4770      	bx	lr
 8003a48:	fffeff8f 	.word	0xfffeff8f
 8003a4c:	40010000 	.word	0x40010000
 8003a50:	40010400 	.word	0x40010400

08003a54 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003a54:	b480      	push	{r7}
 8003a56:	b087      	sub	sp, #28
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
 8003a5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6a1b      	ldr	r3, [r3, #32]
 8003a62:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6a1b      	ldr	r3, [r3, #32]
 8003a6e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	69db      	ldr	r3, [r3, #28]
 8003a7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003a7c:	68fa      	ldr	r2, [r7, #12]
 8003a7e:	4b1e      	ldr	r3, [pc, #120]	; (8003af8 <TIM_OC4_SetConfig+0xa4>)
 8003a80:	4013      	ands	r3, r2
 8003a82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a8a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	021b      	lsls	r3, r3, #8
 8003a92:	68fa      	ldr	r2, [r7, #12]
 8003a94:	4313      	orrs	r3, r2
 8003a96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003a98:	693b      	ldr	r3, [r7, #16]
 8003a9a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003a9e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	689b      	ldr	r3, [r3, #8]
 8003aa4:	031b      	lsls	r3, r3, #12
 8003aa6:	693a      	ldr	r2, [r7, #16]
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	4a13      	ldr	r2, [pc, #76]	; (8003afc <TIM_OC4_SetConfig+0xa8>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d003      	beq.n	8003abc <TIM_OC4_SetConfig+0x68>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	4a12      	ldr	r2, [pc, #72]	; (8003b00 <TIM_OC4_SetConfig+0xac>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d109      	bne.n	8003ad0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003abc:	697b      	ldr	r3, [r7, #20]
 8003abe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003ac2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	695b      	ldr	r3, [r3, #20]
 8003ac8:	019b      	lsls	r3, r3, #6
 8003aca:	697a      	ldr	r2, [r7, #20]
 8003acc:	4313      	orrs	r3, r2
 8003ace:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	697a      	ldr	r2, [r7, #20]
 8003ad4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	68fa      	ldr	r2, [r7, #12]
 8003ada:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	685a      	ldr	r2, [r3, #4]
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	693a      	ldr	r2, [r7, #16]
 8003ae8:	621a      	str	r2, [r3, #32]
}
 8003aea:	bf00      	nop
 8003aec:	371c      	adds	r7, #28
 8003aee:	46bd      	mov	sp, r7
 8003af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af4:	4770      	bx	lr
 8003af6:	bf00      	nop
 8003af8:	feff8fff 	.word	0xfeff8fff
 8003afc:	40010000 	.word	0x40010000
 8003b00:	40010400 	.word	0x40010400

08003b04 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003b04:	b480      	push	{r7}
 8003b06:	b087      	sub	sp, #28
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
 8003b0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6a1b      	ldr	r3, [r3, #32]
 8003b12:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6a1b      	ldr	r3, [r3, #32]
 8003b1e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003b2c:	68fa      	ldr	r2, [r7, #12]
 8003b2e:	4b1b      	ldr	r3, [pc, #108]	; (8003b9c <TIM_OC5_SetConfig+0x98>)
 8003b30:	4013      	ands	r3, r2
 8003b32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	68fa      	ldr	r2, [r7, #12]
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003b3e:	693b      	ldr	r3, [r7, #16]
 8003b40:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003b44:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	689b      	ldr	r3, [r3, #8]
 8003b4a:	041b      	lsls	r3, r3, #16
 8003b4c:	693a      	ldr	r2, [r7, #16]
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	4a12      	ldr	r2, [pc, #72]	; (8003ba0 <TIM_OC5_SetConfig+0x9c>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d003      	beq.n	8003b62 <TIM_OC5_SetConfig+0x5e>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	4a11      	ldr	r2, [pc, #68]	; (8003ba4 <TIM_OC5_SetConfig+0xa0>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d109      	bne.n	8003b76 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003b62:	697b      	ldr	r3, [r7, #20]
 8003b64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b68:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	695b      	ldr	r3, [r3, #20]
 8003b6e:	021b      	lsls	r3, r3, #8
 8003b70:	697a      	ldr	r2, [r7, #20]
 8003b72:	4313      	orrs	r3, r2
 8003b74:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	697a      	ldr	r2, [r7, #20]
 8003b7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	68fa      	ldr	r2, [r7, #12]
 8003b80:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	685a      	ldr	r2, [r3, #4]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	693a      	ldr	r2, [r7, #16]
 8003b8e:	621a      	str	r2, [r3, #32]
}
 8003b90:	bf00      	nop
 8003b92:	371c      	adds	r7, #28
 8003b94:	46bd      	mov	sp, r7
 8003b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9a:	4770      	bx	lr
 8003b9c:	fffeff8f 	.word	0xfffeff8f
 8003ba0:	40010000 	.word	0x40010000
 8003ba4:	40010400 	.word	0x40010400

08003ba8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	b087      	sub	sp, #28
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
 8003bb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6a1b      	ldr	r3, [r3, #32]
 8003bb6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6a1b      	ldr	r3, [r3, #32]
 8003bc2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003bd0:	68fa      	ldr	r2, [r7, #12]
 8003bd2:	4b1c      	ldr	r3, [pc, #112]	; (8003c44 <TIM_OC6_SetConfig+0x9c>)
 8003bd4:	4013      	ands	r3, r2
 8003bd6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	021b      	lsls	r3, r3, #8
 8003bde:	68fa      	ldr	r2, [r7, #12]
 8003be0:	4313      	orrs	r3, r2
 8003be2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003be4:	693b      	ldr	r3, [r7, #16]
 8003be6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003bea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	689b      	ldr	r3, [r3, #8]
 8003bf0:	051b      	lsls	r3, r3, #20
 8003bf2:	693a      	ldr	r2, [r7, #16]
 8003bf4:	4313      	orrs	r3, r2
 8003bf6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	4a13      	ldr	r2, [pc, #76]	; (8003c48 <TIM_OC6_SetConfig+0xa0>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d003      	beq.n	8003c08 <TIM_OC6_SetConfig+0x60>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	4a12      	ldr	r2, [pc, #72]	; (8003c4c <TIM_OC6_SetConfig+0xa4>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d109      	bne.n	8003c1c <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003c08:	697b      	ldr	r3, [r7, #20]
 8003c0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c0e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	695b      	ldr	r3, [r3, #20]
 8003c14:	029b      	lsls	r3, r3, #10
 8003c16:	697a      	ldr	r2, [r7, #20]
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	697a      	ldr	r2, [r7, #20]
 8003c20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	68fa      	ldr	r2, [r7, #12]
 8003c26:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	685a      	ldr	r2, [r3, #4]
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	693a      	ldr	r2, [r7, #16]
 8003c34:	621a      	str	r2, [r3, #32]
}
 8003c36:	bf00      	nop
 8003c38:	371c      	adds	r7, #28
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c40:	4770      	bx	lr
 8003c42:	bf00      	nop
 8003c44:	feff8fff 	.word	0xfeff8fff
 8003c48:	40010000 	.word	0x40010000
 8003c4c:	40010400 	.word	0x40010400

08003c50 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c50:	b480      	push	{r7}
 8003c52:	b087      	sub	sp, #28
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	60f8      	str	r0, [r7, #12]
 8003c58:	60b9      	str	r1, [r7, #8]
 8003c5a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	6a1b      	ldr	r3, [r3, #32]
 8003c60:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	6a1b      	ldr	r3, [r3, #32]
 8003c66:	f023 0201 	bic.w	r2, r3, #1
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	699b      	ldr	r3, [r3, #24]
 8003c72:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003c74:	693b      	ldr	r3, [r7, #16]
 8003c76:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003c7a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	011b      	lsls	r3, r3, #4
 8003c80:	693a      	ldr	r2, [r7, #16]
 8003c82:	4313      	orrs	r3, r2
 8003c84:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	f023 030a 	bic.w	r3, r3, #10
 8003c8c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003c8e:	697a      	ldr	r2, [r7, #20]
 8003c90:	68bb      	ldr	r3, [r7, #8]
 8003c92:	4313      	orrs	r3, r2
 8003c94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	693a      	ldr	r2, [r7, #16]
 8003c9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	697a      	ldr	r2, [r7, #20]
 8003ca0:	621a      	str	r2, [r3, #32]
}
 8003ca2:	bf00      	nop
 8003ca4:	371c      	adds	r7, #28
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cac:	4770      	bx	lr

08003cae <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003cae:	b480      	push	{r7}
 8003cb0:	b087      	sub	sp, #28
 8003cb2:	af00      	add	r7, sp, #0
 8003cb4:	60f8      	str	r0, [r7, #12]
 8003cb6:	60b9      	str	r1, [r7, #8]
 8003cb8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	6a1b      	ldr	r3, [r3, #32]
 8003cbe:	f023 0210 	bic.w	r2, r3, #16
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	699b      	ldr	r3, [r3, #24]
 8003cca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	6a1b      	ldr	r3, [r3, #32]
 8003cd0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003cd2:	697b      	ldr	r3, [r7, #20]
 8003cd4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003cd8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	031b      	lsls	r3, r3, #12
 8003cde:	697a      	ldr	r2, [r7, #20]
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003ce4:	693b      	ldr	r3, [r7, #16]
 8003ce6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003cea:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	011b      	lsls	r3, r3, #4
 8003cf0:	693a      	ldr	r2, [r7, #16]
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	697a      	ldr	r2, [r7, #20]
 8003cfa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	693a      	ldr	r2, [r7, #16]
 8003d00:	621a      	str	r2, [r3, #32]
}
 8003d02:	bf00      	nop
 8003d04:	371c      	adds	r7, #28
 8003d06:	46bd      	mov	sp, r7
 8003d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0c:	4770      	bx	lr

08003d0e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003d0e:	b480      	push	{r7}
 8003d10:	b085      	sub	sp, #20
 8003d12:	af00      	add	r7, sp, #0
 8003d14:	6078      	str	r0, [r7, #4]
 8003d16:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	689b      	ldr	r3, [r3, #8]
 8003d1c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d24:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003d26:	683a      	ldr	r2, [r7, #0]
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	4313      	orrs	r3, r2
 8003d2c:	f043 0307 	orr.w	r3, r3, #7
 8003d30:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	68fa      	ldr	r2, [r7, #12]
 8003d36:	609a      	str	r2, [r3, #8]
}
 8003d38:	bf00      	nop
 8003d3a:	3714      	adds	r7, #20
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d42:	4770      	bx	lr

08003d44 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003d44:	b480      	push	{r7}
 8003d46:	b087      	sub	sp, #28
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	60f8      	str	r0, [r7, #12]
 8003d4c:	60b9      	str	r1, [r7, #8]
 8003d4e:	607a      	str	r2, [r7, #4]
 8003d50:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	689b      	ldr	r3, [r3, #8]
 8003d56:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d58:	697b      	ldr	r3, [r7, #20]
 8003d5a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003d5e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	021a      	lsls	r2, r3, #8
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	431a      	orrs	r2, r3
 8003d68:	68bb      	ldr	r3, [r7, #8]
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	697a      	ldr	r2, [r7, #20]
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	697a      	ldr	r2, [r7, #20]
 8003d76:	609a      	str	r2, [r3, #8]
}
 8003d78:	bf00      	nop
 8003d7a:	371c      	adds	r7, #28
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d82:	4770      	bx	lr

08003d84 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003d84:	b480      	push	{r7}
 8003d86:	b087      	sub	sp, #28
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	60f8      	str	r0, [r7, #12]
 8003d8c:	60b9      	str	r1, [r7, #8]
 8003d8e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	f003 031f 	and.w	r3, r3, #31
 8003d96:	2201      	movs	r2, #1
 8003d98:	fa02 f303 	lsl.w	r3, r2, r3
 8003d9c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	6a1a      	ldr	r2, [r3, #32]
 8003da2:	697b      	ldr	r3, [r7, #20]
 8003da4:	43db      	mvns	r3, r3
 8003da6:	401a      	ands	r2, r3
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	6a1a      	ldr	r2, [r3, #32]
 8003db0:	68bb      	ldr	r3, [r7, #8]
 8003db2:	f003 031f 	and.w	r3, r3, #31
 8003db6:	6879      	ldr	r1, [r7, #4]
 8003db8:	fa01 f303 	lsl.w	r3, r1, r3
 8003dbc:	431a      	orrs	r2, r3
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	621a      	str	r2, [r3, #32]
}
 8003dc2:	bf00      	nop
 8003dc4:	371c      	adds	r7, #28
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dcc:	4770      	bx	lr
	...

08003dd0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	b085      	sub	sp, #20
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
 8003dd8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003de0:	2b01      	cmp	r3, #1
 8003de2:	d101      	bne.n	8003de8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003de4:	2302      	movs	r3, #2
 8003de6:	e06d      	b.n	8003ec4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2201      	movs	r2, #1
 8003dec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2202      	movs	r2, #2
 8003df4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	685b      	ldr	r3, [r3, #4]
 8003dfe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	689b      	ldr	r3, [r3, #8]
 8003e06:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a30      	ldr	r2, [pc, #192]	; (8003ed0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d004      	beq.n	8003e1c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4a2f      	ldr	r2, [pc, #188]	; (8003ed4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d108      	bne.n	8003e2e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003e22:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	68fa      	ldr	r2, [r7, #12]
 8003e2a:	4313      	orrs	r3, r2
 8003e2c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e34:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	68fa      	ldr	r2, [r7, #12]
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	68fa      	ldr	r2, [r7, #12]
 8003e46:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4a20      	ldr	r2, [pc, #128]	; (8003ed0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d022      	beq.n	8003e98 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e5a:	d01d      	beq.n	8003e98 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a1d      	ldr	r2, [pc, #116]	; (8003ed8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d018      	beq.n	8003e98 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4a1c      	ldr	r2, [pc, #112]	; (8003edc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d013      	beq.n	8003e98 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4a1a      	ldr	r2, [pc, #104]	; (8003ee0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d00e      	beq.n	8003e98 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4a15      	ldr	r2, [pc, #84]	; (8003ed4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d009      	beq.n	8003e98 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4a16      	ldr	r2, [pc, #88]	; (8003ee4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d004      	beq.n	8003e98 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4a15      	ldr	r2, [pc, #84]	; (8003ee8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d10c      	bne.n	8003eb2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003e98:	68bb      	ldr	r3, [r7, #8]
 8003e9a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e9e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	689b      	ldr	r3, [r3, #8]
 8003ea4:	68ba      	ldr	r2, [r7, #8]
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	68ba      	ldr	r2, [r7, #8]
 8003eb0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2201      	movs	r2, #1
 8003eb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003ec2:	2300      	movs	r3, #0
}
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	3714      	adds	r7, #20
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ece:	4770      	bx	lr
 8003ed0:	40010000 	.word	0x40010000
 8003ed4:	40010400 	.word	0x40010400
 8003ed8:	40000400 	.word	0x40000400
 8003edc:	40000800 	.word	0x40000800
 8003ee0:	40000c00 	.word	0x40000c00
 8003ee4:	40014000 	.word	0x40014000
 8003ee8:	40001800 	.word	0x40001800

08003eec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b082      	sub	sp, #8
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d101      	bne.n	8003efe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003efa:	2301      	movs	r3, #1
 8003efc:	e040      	b.n	8003f80 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d106      	bne.n	8003f14 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f0e:	6878      	ldr	r0, [r7, #4]
 8003f10:	f7fc fef4 	bl	8000cfc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2224      	movs	r2, #36	; 0x24
 8003f18:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	681a      	ldr	r2, [r3, #0]
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f022 0201 	bic.w	r2, r2, #1
 8003f28:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003f2a:	6878      	ldr	r0, [r7, #4]
 8003f2c:	f000 f8b0 	bl	8004090 <UART_SetConfig>
 8003f30:	4603      	mov	r3, r0
 8003f32:	2b01      	cmp	r3, #1
 8003f34:	d101      	bne.n	8003f3a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003f36:	2301      	movs	r3, #1
 8003f38:	e022      	b.n	8003f80 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d002      	beq.n	8003f48 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003f42:	6878      	ldr	r0, [r7, #4]
 8003f44:	f000 fb08 	bl	8004558 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	685a      	ldr	r2, [r3, #4]
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003f56:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	689a      	ldr	r2, [r3, #8]
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003f66:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	681a      	ldr	r2, [r3, #0]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f042 0201 	orr.w	r2, r2, #1
 8003f76:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003f78:	6878      	ldr	r0, [r7, #4]
 8003f7a:	f000 fb8f 	bl	800469c <UART_CheckIdleState>
 8003f7e:	4603      	mov	r3, r0
}
 8003f80:	4618      	mov	r0, r3
 8003f82:	3708      	adds	r7, #8
 8003f84:	46bd      	mov	sp, r7
 8003f86:	bd80      	pop	{r7, pc}

08003f88 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b08a      	sub	sp, #40	; 0x28
 8003f8c:	af02      	add	r7, sp, #8
 8003f8e:	60f8      	str	r0, [r7, #12]
 8003f90:	60b9      	str	r1, [r7, #8]
 8003f92:	603b      	str	r3, [r7, #0]
 8003f94:	4613      	mov	r3, r2
 8003f96:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f9c:	2b20      	cmp	r3, #32
 8003f9e:	d171      	bne.n	8004084 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d002      	beq.n	8003fac <HAL_UART_Transmit+0x24>
 8003fa6:	88fb      	ldrh	r3, [r7, #6]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d101      	bne.n	8003fb0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003fac:	2301      	movs	r3, #1
 8003fae:	e06a      	b.n	8004086 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	2221      	movs	r2, #33	; 0x21
 8003fbc:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003fbe:	f7fc ffe9 	bl	8000f94 <HAL_GetTick>
 8003fc2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	88fa      	ldrh	r2, [r7, #6]
 8003fc8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	88fa      	ldrh	r2, [r7, #6]
 8003fd0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	689b      	ldr	r3, [r3, #8]
 8003fd8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fdc:	d108      	bne.n	8003ff0 <HAL_UART_Transmit+0x68>
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	691b      	ldr	r3, [r3, #16]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d104      	bne.n	8003ff0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003fea:	68bb      	ldr	r3, [r7, #8]
 8003fec:	61bb      	str	r3, [r7, #24]
 8003fee:	e003      	b.n	8003ff8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003ff8:	e02c      	b.n	8004054 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	9300      	str	r3, [sp, #0]
 8003ffe:	697b      	ldr	r3, [r7, #20]
 8004000:	2200      	movs	r2, #0
 8004002:	2180      	movs	r1, #128	; 0x80
 8004004:	68f8      	ldr	r0, [r7, #12]
 8004006:	f000 fb96 	bl	8004736 <UART_WaitOnFlagUntilTimeout>
 800400a:	4603      	mov	r3, r0
 800400c:	2b00      	cmp	r3, #0
 800400e:	d001      	beq.n	8004014 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8004010:	2303      	movs	r3, #3
 8004012:	e038      	b.n	8004086 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8004014:	69fb      	ldr	r3, [r7, #28]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d10b      	bne.n	8004032 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800401a:	69bb      	ldr	r3, [r7, #24]
 800401c:	881b      	ldrh	r3, [r3, #0]
 800401e:	461a      	mov	r2, r3
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004028:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800402a:	69bb      	ldr	r3, [r7, #24]
 800402c:	3302      	adds	r3, #2
 800402e:	61bb      	str	r3, [r7, #24]
 8004030:	e007      	b.n	8004042 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004032:	69fb      	ldr	r3, [r7, #28]
 8004034:	781a      	ldrb	r2, [r3, #0]
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800403c:	69fb      	ldr	r3, [r7, #28]
 800403e:	3301      	adds	r3, #1
 8004040:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004048:	b29b      	uxth	r3, r3
 800404a:	3b01      	subs	r3, #1
 800404c:	b29a      	uxth	r2, r3
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800405a:	b29b      	uxth	r3, r3
 800405c:	2b00      	cmp	r3, #0
 800405e:	d1cc      	bne.n	8003ffa <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	9300      	str	r3, [sp, #0]
 8004064:	697b      	ldr	r3, [r7, #20]
 8004066:	2200      	movs	r2, #0
 8004068:	2140      	movs	r1, #64	; 0x40
 800406a:	68f8      	ldr	r0, [r7, #12]
 800406c:	f000 fb63 	bl	8004736 <UART_WaitOnFlagUntilTimeout>
 8004070:	4603      	mov	r3, r0
 8004072:	2b00      	cmp	r3, #0
 8004074:	d001      	beq.n	800407a <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8004076:	2303      	movs	r3, #3
 8004078:	e005      	b.n	8004086 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	2220      	movs	r2, #32
 800407e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004080:	2300      	movs	r3, #0
 8004082:	e000      	b.n	8004086 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8004084:	2302      	movs	r3, #2
  }
}
 8004086:	4618      	mov	r0, r3
 8004088:	3720      	adds	r7, #32
 800408a:	46bd      	mov	sp, r7
 800408c:	bd80      	pop	{r7, pc}
	...

08004090 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b088      	sub	sp, #32
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004098:	2300      	movs	r3, #0
 800409a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	689a      	ldr	r2, [r3, #8]
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	691b      	ldr	r3, [r3, #16]
 80040a4:	431a      	orrs	r2, r3
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	695b      	ldr	r3, [r3, #20]
 80040aa:	431a      	orrs	r2, r3
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	69db      	ldr	r3, [r3, #28]
 80040b0:	4313      	orrs	r3, r2
 80040b2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	681a      	ldr	r2, [r3, #0]
 80040ba:	4ba6      	ldr	r3, [pc, #664]	; (8004354 <UART_SetConfig+0x2c4>)
 80040bc:	4013      	ands	r3, r2
 80040be:	687a      	ldr	r2, [r7, #4]
 80040c0:	6812      	ldr	r2, [r2, #0]
 80040c2:	6979      	ldr	r1, [r7, #20]
 80040c4:	430b      	orrs	r3, r1
 80040c6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	68da      	ldr	r2, [r3, #12]
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	430a      	orrs	r2, r1
 80040dc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	699b      	ldr	r3, [r3, #24]
 80040e2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6a1b      	ldr	r3, [r3, #32]
 80040e8:	697a      	ldr	r2, [r7, #20]
 80040ea:	4313      	orrs	r3, r2
 80040ec:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	689b      	ldr	r3, [r3, #8]
 80040f4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	697a      	ldr	r2, [r7, #20]
 80040fe:	430a      	orrs	r2, r1
 8004100:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4a94      	ldr	r2, [pc, #592]	; (8004358 <UART_SetConfig+0x2c8>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d120      	bne.n	800414e <UART_SetConfig+0xbe>
 800410c:	4b93      	ldr	r3, [pc, #588]	; (800435c <UART_SetConfig+0x2cc>)
 800410e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004112:	f003 0303 	and.w	r3, r3, #3
 8004116:	2b03      	cmp	r3, #3
 8004118:	d816      	bhi.n	8004148 <UART_SetConfig+0xb8>
 800411a:	a201      	add	r2, pc, #4	; (adr r2, 8004120 <UART_SetConfig+0x90>)
 800411c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004120:	08004131 	.word	0x08004131
 8004124:	0800413d 	.word	0x0800413d
 8004128:	08004137 	.word	0x08004137
 800412c:	08004143 	.word	0x08004143
 8004130:	2301      	movs	r3, #1
 8004132:	77fb      	strb	r3, [r7, #31]
 8004134:	e150      	b.n	80043d8 <UART_SetConfig+0x348>
 8004136:	2302      	movs	r3, #2
 8004138:	77fb      	strb	r3, [r7, #31]
 800413a:	e14d      	b.n	80043d8 <UART_SetConfig+0x348>
 800413c:	2304      	movs	r3, #4
 800413e:	77fb      	strb	r3, [r7, #31]
 8004140:	e14a      	b.n	80043d8 <UART_SetConfig+0x348>
 8004142:	2308      	movs	r3, #8
 8004144:	77fb      	strb	r3, [r7, #31]
 8004146:	e147      	b.n	80043d8 <UART_SetConfig+0x348>
 8004148:	2310      	movs	r3, #16
 800414a:	77fb      	strb	r3, [r7, #31]
 800414c:	e144      	b.n	80043d8 <UART_SetConfig+0x348>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4a83      	ldr	r2, [pc, #524]	; (8004360 <UART_SetConfig+0x2d0>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d132      	bne.n	80041be <UART_SetConfig+0x12e>
 8004158:	4b80      	ldr	r3, [pc, #512]	; (800435c <UART_SetConfig+0x2cc>)
 800415a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800415e:	f003 030c 	and.w	r3, r3, #12
 8004162:	2b0c      	cmp	r3, #12
 8004164:	d828      	bhi.n	80041b8 <UART_SetConfig+0x128>
 8004166:	a201      	add	r2, pc, #4	; (adr r2, 800416c <UART_SetConfig+0xdc>)
 8004168:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800416c:	080041a1 	.word	0x080041a1
 8004170:	080041b9 	.word	0x080041b9
 8004174:	080041b9 	.word	0x080041b9
 8004178:	080041b9 	.word	0x080041b9
 800417c:	080041ad 	.word	0x080041ad
 8004180:	080041b9 	.word	0x080041b9
 8004184:	080041b9 	.word	0x080041b9
 8004188:	080041b9 	.word	0x080041b9
 800418c:	080041a7 	.word	0x080041a7
 8004190:	080041b9 	.word	0x080041b9
 8004194:	080041b9 	.word	0x080041b9
 8004198:	080041b9 	.word	0x080041b9
 800419c:	080041b3 	.word	0x080041b3
 80041a0:	2300      	movs	r3, #0
 80041a2:	77fb      	strb	r3, [r7, #31]
 80041a4:	e118      	b.n	80043d8 <UART_SetConfig+0x348>
 80041a6:	2302      	movs	r3, #2
 80041a8:	77fb      	strb	r3, [r7, #31]
 80041aa:	e115      	b.n	80043d8 <UART_SetConfig+0x348>
 80041ac:	2304      	movs	r3, #4
 80041ae:	77fb      	strb	r3, [r7, #31]
 80041b0:	e112      	b.n	80043d8 <UART_SetConfig+0x348>
 80041b2:	2308      	movs	r3, #8
 80041b4:	77fb      	strb	r3, [r7, #31]
 80041b6:	e10f      	b.n	80043d8 <UART_SetConfig+0x348>
 80041b8:	2310      	movs	r3, #16
 80041ba:	77fb      	strb	r3, [r7, #31]
 80041bc:	e10c      	b.n	80043d8 <UART_SetConfig+0x348>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4a68      	ldr	r2, [pc, #416]	; (8004364 <UART_SetConfig+0x2d4>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d120      	bne.n	800420a <UART_SetConfig+0x17a>
 80041c8:	4b64      	ldr	r3, [pc, #400]	; (800435c <UART_SetConfig+0x2cc>)
 80041ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041ce:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80041d2:	2b30      	cmp	r3, #48	; 0x30
 80041d4:	d013      	beq.n	80041fe <UART_SetConfig+0x16e>
 80041d6:	2b30      	cmp	r3, #48	; 0x30
 80041d8:	d814      	bhi.n	8004204 <UART_SetConfig+0x174>
 80041da:	2b20      	cmp	r3, #32
 80041dc:	d009      	beq.n	80041f2 <UART_SetConfig+0x162>
 80041de:	2b20      	cmp	r3, #32
 80041e0:	d810      	bhi.n	8004204 <UART_SetConfig+0x174>
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d002      	beq.n	80041ec <UART_SetConfig+0x15c>
 80041e6:	2b10      	cmp	r3, #16
 80041e8:	d006      	beq.n	80041f8 <UART_SetConfig+0x168>
 80041ea:	e00b      	b.n	8004204 <UART_SetConfig+0x174>
 80041ec:	2300      	movs	r3, #0
 80041ee:	77fb      	strb	r3, [r7, #31]
 80041f0:	e0f2      	b.n	80043d8 <UART_SetConfig+0x348>
 80041f2:	2302      	movs	r3, #2
 80041f4:	77fb      	strb	r3, [r7, #31]
 80041f6:	e0ef      	b.n	80043d8 <UART_SetConfig+0x348>
 80041f8:	2304      	movs	r3, #4
 80041fa:	77fb      	strb	r3, [r7, #31]
 80041fc:	e0ec      	b.n	80043d8 <UART_SetConfig+0x348>
 80041fe:	2308      	movs	r3, #8
 8004200:	77fb      	strb	r3, [r7, #31]
 8004202:	e0e9      	b.n	80043d8 <UART_SetConfig+0x348>
 8004204:	2310      	movs	r3, #16
 8004206:	77fb      	strb	r3, [r7, #31]
 8004208:	e0e6      	b.n	80043d8 <UART_SetConfig+0x348>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4a56      	ldr	r2, [pc, #344]	; (8004368 <UART_SetConfig+0x2d8>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d120      	bne.n	8004256 <UART_SetConfig+0x1c6>
 8004214:	4b51      	ldr	r3, [pc, #324]	; (800435c <UART_SetConfig+0x2cc>)
 8004216:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800421a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800421e:	2bc0      	cmp	r3, #192	; 0xc0
 8004220:	d013      	beq.n	800424a <UART_SetConfig+0x1ba>
 8004222:	2bc0      	cmp	r3, #192	; 0xc0
 8004224:	d814      	bhi.n	8004250 <UART_SetConfig+0x1c0>
 8004226:	2b80      	cmp	r3, #128	; 0x80
 8004228:	d009      	beq.n	800423e <UART_SetConfig+0x1ae>
 800422a:	2b80      	cmp	r3, #128	; 0x80
 800422c:	d810      	bhi.n	8004250 <UART_SetConfig+0x1c0>
 800422e:	2b00      	cmp	r3, #0
 8004230:	d002      	beq.n	8004238 <UART_SetConfig+0x1a8>
 8004232:	2b40      	cmp	r3, #64	; 0x40
 8004234:	d006      	beq.n	8004244 <UART_SetConfig+0x1b4>
 8004236:	e00b      	b.n	8004250 <UART_SetConfig+0x1c0>
 8004238:	2300      	movs	r3, #0
 800423a:	77fb      	strb	r3, [r7, #31]
 800423c:	e0cc      	b.n	80043d8 <UART_SetConfig+0x348>
 800423e:	2302      	movs	r3, #2
 8004240:	77fb      	strb	r3, [r7, #31]
 8004242:	e0c9      	b.n	80043d8 <UART_SetConfig+0x348>
 8004244:	2304      	movs	r3, #4
 8004246:	77fb      	strb	r3, [r7, #31]
 8004248:	e0c6      	b.n	80043d8 <UART_SetConfig+0x348>
 800424a:	2308      	movs	r3, #8
 800424c:	77fb      	strb	r3, [r7, #31]
 800424e:	e0c3      	b.n	80043d8 <UART_SetConfig+0x348>
 8004250:	2310      	movs	r3, #16
 8004252:	77fb      	strb	r3, [r7, #31]
 8004254:	e0c0      	b.n	80043d8 <UART_SetConfig+0x348>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4a44      	ldr	r2, [pc, #272]	; (800436c <UART_SetConfig+0x2dc>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d125      	bne.n	80042ac <UART_SetConfig+0x21c>
 8004260:	4b3e      	ldr	r3, [pc, #248]	; (800435c <UART_SetConfig+0x2cc>)
 8004262:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004266:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800426a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800426e:	d017      	beq.n	80042a0 <UART_SetConfig+0x210>
 8004270:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004274:	d817      	bhi.n	80042a6 <UART_SetConfig+0x216>
 8004276:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800427a:	d00b      	beq.n	8004294 <UART_SetConfig+0x204>
 800427c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004280:	d811      	bhi.n	80042a6 <UART_SetConfig+0x216>
 8004282:	2b00      	cmp	r3, #0
 8004284:	d003      	beq.n	800428e <UART_SetConfig+0x1fe>
 8004286:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800428a:	d006      	beq.n	800429a <UART_SetConfig+0x20a>
 800428c:	e00b      	b.n	80042a6 <UART_SetConfig+0x216>
 800428e:	2300      	movs	r3, #0
 8004290:	77fb      	strb	r3, [r7, #31]
 8004292:	e0a1      	b.n	80043d8 <UART_SetConfig+0x348>
 8004294:	2302      	movs	r3, #2
 8004296:	77fb      	strb	r3, [r7, #31]
 8004298:	e09e      	b.n	80043d8 <UART_SetConfig+0x348>
 800429a:	2304      	movs	r3, #4
 800429c:	77fb      	strb	r3, [r7, #31]
 800429e:	e09b      	b.n	80043d8 <UART_SetConfig+0x348>
 80042a0:	2308      	movs	r3, #8
 80042a2:	77fb      	strb	r3, [r7, #31]
 80042a4:	e098      	b.n	80043d8 <UART_SetConfig+0x348>
 80042a6:	2310      	movs	r3, #16
 80042a8:	77fb      	strb	r3, [r7, #31]
 80042aa:	e095      	b.n	80043d8 <UART_SetConfig+0x348>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4a2f      	ldr	r2, [pc, #188]	; (8004370 <UART_SetConfig+0x2e0>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d125      	bne.n	8004302 <UART_SetConfig+0x272>
 80042b6:	4b29      	ldr	r3, [pc, #164]	; (800435c <UART_SetConfig+0x2cc>)
 80042b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042bc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80042c0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80042c4:	d017      	beq.n	80042f6 <UART_SetConfig+0x266>
 80042c6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80042ca:	d817      	bhi.n	80042fc <UART_SetConfig+0x26c>
 80042cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80042d0:	d00b      	beq.n	80042ea <UART_SetConfig+0x25a>
 80042d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80042d6:	d811      	bhi.n	80042fc <UART_SetConfig+0x26c>
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d003      	beq.n	80042e4 <UART_SetConfig+0x254>
 80042dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042e0:	d006      	beq.n	80042f0 <UART_SetConfig+0x260>
 80042e2:	e00b      	b.n	80042fc <UART_SetConfig+0x26c>
 80042e4:	2301      	movs	r3, #1
 80042e6:	77fb      	strb	r3, [r7, #31]
 80042e8:	e076      	b.n	80043d8 <UART_SetConfig+0x348>
 80042ea:	2302      	movs	r3, #2
 80042ec:	77fb      	strb	r3, [r7, #31]
 80042ee:	e073      	b.n	80043d8 <UART_SetConfig+0x348>
 80042f0:	2304      	movs	r3, #4
 80042f2:	77fb      	strb	r3, [r7, #31]
 80042f4:	e070      	b.n	80043d8 <UART_SetConfig+0x348>
 80042f6:	2308      	movs	r3, #8
 80042f8:	77fb      	strb	r3, [r7, #31]
 80042fa:	e06d      	b.n	80043d8 <UART_SetConfig+0x348>
 80042fc:	2310      	movs	r3, #16
 80042fe:	77fb      	strb	r3, [r7, #31]
 8004300:	e06a      	b.n	80043d8 <UART_SetConfig+0x348>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4a1b      	ldr	r2, [pc, #108]	; (8004374 <UART_SetConfig+0x2e4>)
 8004308:	4293      	cmp	r3, r2
 800430a:	d138      	bne.n	800437e <UART_SetConfig+0x2ee>
 800430c:	4b13      	ldr	r3, [pc, #76]	; (800435c <UART_SetConfig+0x2cc>)
 800430e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004312:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004316:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800431a:	d017      	beq.n	800434c <UART_SetConfig+0x2bc>
 800431c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004320:	d82a      	bhi.n	8004378 <UART_SetConfig+0x2e8>
 8004322:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004326:	d00b      	beq.n	8004340 <UART_SetConfig+0x2b0>
 8004328:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800432c:	d824      	bhi.n	8004378 <UART_SetConfig+0x2e8>
 800432e:	2b00      	cmp	r3, #0
 8004330:	d003      	beq.n	800433a <UART_SetConfig+0x2aa>
 8004332:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004336:	d006      	beq.n	8004346 <UART_SetConfig+0x2b6>
 8004338:	e01e      	b.n	8004378 <UART_SetConfig+0x2e8>
 800433a:	2300      	movs	r3, #0
 800433c:	77fb      	strb	r3, [r7, #31]
 800433e:	e04b      	b.n	80043d8 <UART_SetConfig+0x348>
 8004340:	2302      	movs	r3, #2
 8004342:	77fb      	strb	r3, [r7, #31]
 8004344:	e048      	b.n	80043d8 <UART_SetConfig+0x348>
 8004346:	2304      	movs	r3, #4
 8004348:	77fb      	strb	r3, [r7, #31]
 800434a:	e045      	b.n	80043d8 <UART_SetConfig+0x348>
 800434c:	2308      	movs	r3, #8
 800434e:	77fb      	strb	r3, [r7, #31]
 8004350:	e042      	b.n	80043d8 <UART_SetConfig+0x348>
 8004352:	bf00      	nop
 8004354:	efff69f3 	.word	0xefff69f3
 8004358:	40011000 	.word	0x40011000
 800435c:	40023800 	.word	0x40023800
 8004360:	40004400 	.word	0x40004400
 8004364:	40004800 	.word	0x40004800
 8004368:	40004c00 	.word	0x40004c00
 800436c:	40005000 	.word	0x40005000
 8004370:	40011400 	.word	0x40011400
 8004374:	40007800 	.word	0x40007800
 8004378:	2310      	movs	r3, #16
 800437a:	77fb      	strb	r3, [r7, #31]
 800437c:	e02c      	b.n	80043d8 <UART_SetConfig+0x348>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4a72      	ldr	r2, [pc, #456]	; (800454c <UART_SetConfig+0x4bc>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d125      	bne.n	80043d4 <UART_SetConfig+0x344>
 8004388:	4b71      	ldr	r3, [pc, #452]	; (8004550 <UART_SetConfig+0x4c0>)
 800438a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800438e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004392:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004396:	d017      	beq.n	80043c8 <UART_SetConfig+0x338>
 8004398:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800439c:	d817      	bhi.n	80043ce <UART_SetConfig+0x33e>
 800439e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043a2:	d00b      	beq.n	80043bc <UART_SetConfig+0x32c>
 80043a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043a8:	d811      	bhi.n	80043ce <UART_SetConfig+0x33e>
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d003      	beq.n	80043b6 <UART_SetConfig+0x326>
 80043ae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80043b2:	d006      	beq.n	80043c2 <UART_SetConfig+0x332>
 80043b4:	e00b      	b.n	80043ce <UART_SetConfig+0x33e>
 80043b6:	2300      	movs	r3, #0
 80043b8:	77fb      	strb	r3, [r7, #31]
 80043ba:	e00d      	b.n	80043d8 <UART_SetConfig+0x348>
 80043bc:	2302      	movs	r3, #2
 80043be:	77fb      	strb	r3, [r7, #31]
 80043c0:	e00a      	b.n	80043d8 <UART_SetConfig+0x348>
 80043c2:	2304      	movs	r3, #4
 80043c4:	77fb      	strb	r3, [r7, #31]
 80043c6:	e007      	b.n	80043d8 <UART_SetConfig+0x348>
 80043c8:	2308      	movs	r3, #8
 80043ca:	77fb      	strb	r3, [r7, #31]
 80043cc:	e004      	b.n	80043d8 <UART_SetConfig+0x348>
 80043ce:	2310      	movs	r3, #16
 80043d0:	77fb      	strb	r3, [r7, #31]
 80043d2:	e001      	b.n	80043d8 <UART_SetConfig+0x348>
 80043d4:	2310      	movs	r3, #16
 80043d6:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	69db      	ldr	r3, [r3, #28]
 80043dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043e0:	d15b      	bne.n	800449a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80043e2:	7ffb      	ldrb	r3, [r7, #31]
 80043e4:	2b08      	cmp	r3, #8
 80043e6:	d828      	bhi.n	800443a <UART_SetConfig+0x3aa>
 80043e8:	a201      	add	r2, pc, #4	; (adr r2, 80043f0 <UART_SetConfig+0x360>)
 80043ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043ee:	bf00      	nop
 80043f0:	08004415 	.word	0x08004415
 80043f4:	0800441d 	.word	0x0800441d
 80043f8:	08004425 	.word	0x08004425
 80043fc:	0800443b 	.word	0x0800443b
 8004400:	0800442b 	.word	0x0800442b
 8004404:	0800443b 	.word	0x0800443b
 8004408:	0800443b 	.word	0x0800443b
 800440c:	0800443b 	.word	0x0800443b
 8004410:	08004433 	.word	0x08004433
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004414:	f7fe f93e 	bl	8002694 <HAL_RCC_GetPCLK1Freq>
 8004418:	61b8      	str	r0, [r7, #24]
        break;
 800441a:	e013      	b.n	8004444 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800441c:	f7fe f94e 	bl	80026bc <HAL_RCC_GetPCLK2Freq>
 8004420:	61b8      	str	r0, [r7, #24]
        break;
 8004422:	e00f      	b.n	8004444 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004424:	4b4b      	ldr	r3, [pc, #300]	; (8004554 <UART_SetConfig+0x4c4>)
 8004426:	61bb      	str	r3, [r7, #24]
        break;
 8004428:	e00c      	b.n	8004444 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800442a:	f7fe f823 	bl	8002474 <HAL_RCC_GetSysClockFreq>
 800442e:	61b8      	str	r0, [r7, #24]
        break;
 8004430:	e008      	b.n	8004444 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004432:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004436:	61bb      	str	r3, [r7, #24]
        break;
 8004438:	e004      	b.n	8004444 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800443a:	2300      	movs	r3, #0
 800443c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800443e:	2301      	movs	r3, #1
 8004440:	77bb      	strb	r3, [r7, #30]
        break;
 8004442:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004444:	69bb      	ldr	r3, [r7, #24]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d074      	beq.n	8004534 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800444a:	69bb      	ldr	r3, [r7, #24]
 800444c:	005a      	lsls	r2, r3, #1
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	085b      	lsrs	r3, r3, #1
 8004454:	441a      	add	r2, r3
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	fbb2 f3f3 	udiv	r3, r2, r3
 800445e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004460:	693b      	ldr	r3, [r7, #16]
 8004462:	2b0f      	cmp	r3, #15
 8004464:	d916      	bls.n	8004494 <UART_SetConfig+0x404>
 8004466:	693b      	ldr	r3, [r7, #16]
 8004468:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800446c:	d212      	bcs.n	8004494 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800446e:	693b      	ldr	r3, [r7, #16]
 8004470:	b29b      	uxth	r3, r3
 8004472:	f023 030f 	bic.w	r3, r3, #15
 8004476:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004478:	693b      	ldr	r3, [r7, #16]
 800447a:	085b      	lsrs	r3, r3, #1
 800447c:	b29b      	uxth	r3, r3
 800447e:	f003 0307 	and.w	r3, r3, #7
 8004482:	b29a      	uxth	r2, r3
 8004484:	89fb      	ldrh	r3, [r7, #14]
 8004486:	4313      	orrs	r3, r2
 8004488:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	89fa      	ldrh	r2, [r7, #14]
 8004490:	60da      	str	r2, [r3, #12]
 8004492:	e04f      	b.n	8004534 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004494:	2301      	movs	r3, #1
 8004496:	77bb      	strb	r3, [r7, #30]
 8004498:	e04c      	b.n	8004534 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800449a:	7ffb      	ldrb	r3, [r7, #31]
 800449c:	2b08      	cmp	r3, #8
 800449e:	d828      	bhi.n	80044f2 <UART_SetConfig+0x462>
 80044a0:	a201      	add	r2, pc, #4	; (adr r2, 80044a8 <UART_SetConfig+0x418>)
 80044a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044a6:	bf00      	nop
 80044a8:	080044cd 	.word	0x080044cd
 80044ac:	080044d5 	.word	0x080044d5
 80044b0:	080044dd 	.word	0x080044dd
 80044b4:	080044f3 	.word	0x080044f3
 80044b8:	080044e3 	.word	0x080044e3
 80044bc:	080044f3 	.word	0x080044f3
 80044c0:	080044f3 	.word	0x080044f3
 80044c4:	080044f3 	.word	0x080044f3
 80044c8:	080044eb 	.word	0x080044eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80044cc:	f7fe f8e2 	bl	8002694 <HAL_RCC_GetPCLK1Freq>
 80044d0:	61b8      	str	r0, [r7, #24]
        break;
 80044d2:	e013      	b.n	80044fc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80044d4:	f7fe f8f2 	bl	80026bc <HAL_RCC_GetPCLK2Freq>
 80044d8:	61b8      	str	r0, [r7, #24]
        break;
 80044da:	e00f      	b.n	80044fc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80044dc:	4b1d      	ldr	r3, [pc, #116]	; (8004554 <UART_SetConfig+0x4c4>)
 80044de:	61bb      	str	r3, [r7, #24]
        break;
 80044e0:	e00c      	b.n	80044fc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80044e2:	f7fd ffc7 	bl	8002474 <HAL_RCC_GetSysClockFreq>
 80044e6:	61b8      	str	r0, [r7, #24]
        break;
 80044e8:	e008      	b.n	80044fc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80044ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80044ee:	61bb      	str	r3, [r7, #24]
        break;
 80044f0:	e004      	b.n	80044fc <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80044f2:	2300      	movs	r3, #0
 80044f4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80044f6:	2301      	movs	r3, #1
 80044f8:	77bb      	strb	r3, [r7, #30]
        break;
 80044fa:	bf00      	nop
    }

    if (pclk != 0U)
 80044fc:	69bb      	ldr	r3, [r7, #24]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d018      	beq.n	8004534 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	685b      	ldr	r3, [r3, #4]
 8004506:	085a      	lsrs	r2, r3, #1
 8004508:	69bb      	ldr	r3, [r7, #24]
 800450a:	441a      	add	r2, r3
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	fbb2 f3f3 	udiv	r3, r2, r3
 8004514:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004516:	693b      	ldr	r3, [r7, #16]
 8004518:	2b0f      	cmp	r3, #15
 800451a:	d909      	bls.n	8004530 <UART_SetConfig+0x4a0>
 800451c:	693b      	ldr	r3, [r7, #16]
 800451e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004522:	d205      	bcs.n	8004530 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004524:	693b      	ldr	r3, [r7, #16]
 8004526:	b29a      	uxth	r2, r3
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	60da      	str	r2, [r3, #12]
 800452e:	e001      	b.n	8004534 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004530:	2301      	movs	r3, #1
 8004532:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2200      	movs	r2, #0
 8004538:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2200      	movs	r2, #0
 800453e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004540:	7fbb      	ldrb	r3, [r7, #30]
}
 8004542:	4618      	mov	r0, r3
 8004544:	3720      	adds	r7, #32
 8004546:	46bd      	mov	sp, r7
 8004548:	bd80      	pop	{r7, pc}
 800454a:	bf00      	nop
 800454c:	40007c00 	.word	0x40007c00
 8004550:	40023800 	.word	0x40023800
 8004554:	00f42400 	.word	0x00f42400

08004558 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004558:	b480      	push	{r7}
 800455a:	b083      	sub	sp, #12
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004564:	f003 0301 	and.w	r3, r3, #1
 8004568:	2b00      	cmp	r3, #0
 800456a:	d00a      	beq.n	8004582 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	685b      	ldr	r3, [r3, #4]
 8004572:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	430a      	orrs	r2, r1
 8004580:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004586:	f003 0302 	and.w	r3, r3, #2
 800458a:	2b00      	cmp	r3, #0
 800458c:	d00a      	beq.n	80045a4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	685b      	ldr	r3, [r3, #4]
 8004594:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	430a      	orrs	r2, r1
 80045a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045a8:	f003 0304 	and.w	r3, r3, #4
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d00a      	beq.n	80045c6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	430a      	orrs	r2, r1
 80045c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ca:	f003 0308 	and.w	r3, r3, #8
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d00a      	beq.n	80045e8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	685b      	ldr	r3, [r3, #4]
 80045d8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	430a      	orrs	r2, r1
 80045e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ec:	f003 0310 	and.w	r3, r3, #16
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d00a      	beq.n	800460a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	689b      	ldr	r3, [r3, #8]
 80045fa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	430a      	orrs	r2, r1
 8004608:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800460e:	f003 0320 	and.w	r3, r3, #32
 8004612:	2b00      	cmp	r3, #0
 8004614:	d00a      	beq.n	800462c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	689b      	ldr	r3, [r3, #8]
 800461c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	430a      	orrs	r2, r1
 800462a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004630:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004634:	2b00      	cmp	r3, #0
 8004636:	d01a      	beq.n	800466e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	685b      	ldr	r3, [r3, #4]
 800463e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	430a      	orrs	r2, r1
 800464c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004652:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004656:	d10a      	bne.n	800466e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	685b      	ldr	r3, [r3, #4]
 800465e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	430a      	orrs	r2, r1
 800466c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004672:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004676:	2b00      	cmp	r3, #0
 8004678:	d00a      	beq.n	8004690 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	430a      	orrs	r2, r1
 800468e:	605a      	str	r2, [r3, #4]
  }
}
 8004690:	bf00      	nop
 8004692:	370c      	adds	r7, #12
 8004694:	46bd      	mov	sp, r7
 8004696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469a:	4770      	bx	lr

0800469c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b086      	sub	sp, #24
 80046a0:	af02      	add	r7, sp, #8
 80046a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2200      	movs	r2, #0
 80046a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80046ac:	f7fc fc72 	bl	8000f94 <HAL_GetTick>
 80046b0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f003 0308 	and.w	r3, r3, #8
 80046bc:	2b08      	cmp	r3, #8
 80046be:	d10e      	bne.n	80046de <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80046c0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80046c4:	9300      	str	r3, [sp, #0]
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	2200      	movs	r2, #0
 80046ca:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80046ce:	6878      	ldr	r0, [r7, #4]
 80046d0:	f000 f831 	bl	8004736 <UART_WaitOnFlagUntilTimeout>
 80046d4:	4603      	mov	r3, r0
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d001      	beq.n	80046de <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80046da:	2303      	movs	r3, #3
 80046dc:	e027      	b.n	800472e <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f003 0304 	and.w	r3, r3, #4
 80046e8:	2b04      	cmp	r3, #4
 80046ea:	d10e      	bne.n	800470a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80046ec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80046f0:	9300      	str	r3, [sp, #0]
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	2200      	movs	r2, #0
 80046f6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80046fa:	6878      	ldr	r0, [r7, #4]
 80046fc:	f000 f81b 	bl	8004736 <UART_WaitOnFlagUntilTimeout>
 8004700:	4603      	mov	r3, r0
 8004702:	2b00      	cmp	r3, #0
 8004704:	d001      	beq.n	800470a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004706:	2303      	movs	r3, #3
 8004708:	e011      	b.n	800472e <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2220      	movs	r2, #32
 800470e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2220      	movs	r2, #32
 8004714:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2200      	movs	r2, #0
 800471c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2200      	movs	r2, #0
 8004722:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2200      	movs	r2, #0
 8004728:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800472c:	2300      	movs	r3, #0
}
 800472e:	4618      	mov	r0, r3
 8004730:	3710      	adds	r7, #16
 8004732:	46bd      	mov	sp, r7
 8004734:	bd80      	pop	{r7, pc}

08004736 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004736:	b580      	push	{r7, lr}
 8004738:	b09c      	sub	sp, #112	; 0x70
 800473a:	af00      	add	r7, sp, #0
 800473c:	60f8      	str	r0, [r7, #12]
 800473e:	60b9      	str	r1, [r7, #8]
 8004740:	603b      	str	r3, [r7, #0]
 8004742:	4613      	mov	r3, r2
 8004744:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004746:	e0a7      	b.n	8004898 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004748:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800474a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800474e:	f000 80a3 	beq.w	8004898 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004752:	f7fc fc1f 	bl	8000f94 <HAL_GetTick>
 8004756:	4602      	mov	r2, r0
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	1ad3      	subs	r3, r2, r3
 800475c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800475e:	429a      	cmp	r2, r3
 8004760:	d302      	bcc.n	8004768 <UART_WaitOnFlagUntilTimeout+0x32>
 8004762:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004764:	2b00      	cmp	r3, #0
 8004766:	d13f      	bne.n	80047e8 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800476e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004770:	e853 3f00 	ldrex	r3, [r3]
 8004774:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004776:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004778:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800477c:	667b      	str	r3, [r7, #100]	; 0x64
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	461a      	mov	r2, r3
 8004784:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004786:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004788:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800478a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800478c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800478e:	e841 2300 	strex	r3, r2, [r1]
 8004792:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004794:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004796:	2b00      	cmp	r3, #0
 8004798:	d1e6      	bne.n	8004768 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	3308      	adds	r3, #8
 80047a0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047a4:	e853 3f00 	ldrex	r3, [r3]
 80047a8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80047aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047ac:	f023 0301 	bic.w	r3, r3, #1
 80047b0:	663b      	str	r3, [r7, #96]	; 0x60
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	3308      	adds	r3, #8
 80047b8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80047ba:	64ba      	str	r2, [r7, #72]	; 0x48
 80047bc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047be:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80047c0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80047c2:	e841 2300 	strex	r3, r2, [r1]
 80047c6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80047c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d1e5      	bne.n	800479a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	2220      	movs	r2, #32
 80047d2:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	2220      	movs	r2, #32
 80047d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	2200      	movs	r2, #0
 80047e0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80047e4:	2303      	movs	r3, #3
 80047e6:	e068      	b.n	80048ba <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f003 0304 	and.w	r3, r3, #4
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d050      	beq.n	8004898 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	69db      	ldr	r3, [r3, #28]
 80047fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004800:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004804:	d148      	bne.n	8004898 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800480e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004818:	e853 3f00 	ldrex	r3, [r3]
 800481c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800481e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004820:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004824:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	461a      	mov	r2, r3
 800482c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800482e:	637b      	str	r3, [r7, #52]	; 0x34
 8004830:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004832:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004834:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004836:	e841 2300 	strex	r3, r2, [r1]
 800483a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800483c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800483e:	2b00      	cmp	r3, #0
 8004840:	d1e6      	bne.n	8004810 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	3308      	adds	r3, #8
 8004848:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800484a:	697b      	ldr	r3, [r7, #20]
 800484c:	e853 3f00 	ldrex	r3, [r3]
 8004850:	613b      	str	r3, [r7, #16]
   return(result);
 8004852:	693b      	ldr	r3, [r7, #16]
 8004854:	f023 0301 	bic.w	r3, r3, #1
 8004858:	66bb      	str	r3, [r7, #104]	; 0x68
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	3308      	adds	r3, #8
 8004860:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004862:	623a      	str	r2, [r7, #32]
 8004864:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004866:	69f9      	ldr	r1, [r7, #28]
 8004868:	6a3a      	ldr	r2, [r7, #32]
 800486a:	e841 2300 	strex	r3, r2, [r1]
 800486e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004870:	69bb      	ldr	r3, [r7, #24]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d1e5      	bne.n	8004842 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	2220      	movs	r2, #32
 800487a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	2220      	movs	r2, #32
 8004880:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	2220      	movs	r2, #32
 8004888:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	2200      	movs	r2, #0
 8004890:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004894:	2303      	movs	r3, #3
 8004896:	e010      	b.n	80048ba <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	69da      	ldr	r2, [r3, #28]
 800489e:	68bb      	ldr	r3, [r7, #8]
 80048a0:	4013      	ands	r3, r2
 80048a2:	68ba      	ldr	r2, [r7, #8]
 80048a4:	429a      	cmp	r2, r3
 80048a6:	bf0c      	ite	eq
 80048a8:	2301      	moveq	r3, #1
 80048aa:	2300      	movne	r3, #0
 80048ac:	b2db      	uxtb	r3, r3
 80048ae:	461a      	mov	r2, r3
 80048b0:	79fb      	ldrb	r3, [r7, #7]
 80048b2:	429a      	cmp	r2, r3
 80048b4:	f43f af48 	beq.w	8004748 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80048b8:	2300      	movs	r3, #0
}
 80048ba:	4618      	mov	r0, r3
 80048bc:	3770      	adds	r7, #112	; 0x70
 80048be:	46bd      	mov	sp, r7
 80048c0:	bd80      	pop	{r7, pc}
	...

080048c4 <__errno>:
 80048c4:	4b01      	ldr	r3, [pc, #4]	; (80048cc <__errno+0x8>)
 80048c6:	6818      	ldr	r0, [r3, #0]
 80048c8:	4770      	bx	lr
 80048ca:	bf00      	nop
 80048cc:	2000000c 	.word	0x2000000c

080048d0 <__libc_init_array>:
 80048d0:	b570      	push	{r4, r5, r6, lr}
 80048d2:	4d0d      	ldr	r5, [pc, #52]	; (8004908 <__libc_init_array+0x38>)
 80048d4:	4c0d      	ldr	r4, [pc, #52]	; (800490c <__libc_init_array+0x3c>)
 80048d6:	1b64      	subs	r4, r4, r5
 80048d8:	10a4      	asrs	r4, r4, #2
 80048da:	2600      	movs	r6, #0
 80048dc:	42a6      	cmp	r6, r4
 80048de:	d109      	bne.n	80048f4 <__libc_init_array+0x24>
 80048e0:	4d0b      	ldr	r5, [pc, #44]	; (8004910 <__libc_init_array+0x40>)
 80048e2:	4c0c      	ldr	r4, [pc, #48]	; (8004914 <__libc_init_array+0x44>)
 80048e4:	f000 fc8e 	bl	8005204 <_init>
 80048e8:	1b64      	subs	r4, r4, r5
 80048ea:	10a4      	asrs	r4, r4, #2
 80048ec:	2600      	movs	r6, #0
 80048ee:	42a6      	cmp	r6, r4
 80048f0:	d105      	bne.n	80048fe <__libc_init_array+0x2e>
 80048f2:	bd70      	pop	{r4, r5, r6, pc}
 80048f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80048f8:	4798      	blx	r3
 80048fa:	3601      	adds	r6, #1
 80048fc:	e7ee      	b.n	80048dc <__libc_init_array+0xc>
 80048fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8004902:	4798      	blx	r3
 8004904:	3601      	adds	r6, #1
 8004906:	e7f2      	b.n	80048ee <__libc_init_array+0x1e>
 8004908:	08005278 	.word	0x08005278
 800490c:	08005278 	.word	0x08005278
 8004910:	08005278 	.word	0x08005278
 8004914:	0800527c 	.word	0x0800527c

08004918 <memset>:
 8004918:	4402      	add	r2, r0
 800491a:	4603      	mov	r3, r0
 800491c:	4293      	cmp	r3, r2
 800491e:	d100      	bne.n	8004922 <memset+0xa>
 8004920:	4770      	bx	lr
 8004922:	f803 1b01 	strb.w	r1, [r3], #1
 8004926:	e7f9      	b.n	800491c <memset+0x4>

08004928 <siprintf>:
 8004928:	b40e      	push	{r1, r2, r3}
 800492a:	b500      	push	{lr}
 800492c:	b09c      	sub	sp, #112	; 0x70
 800492e:	ab1d      	add	r3, sp, #116	; 0x74
 8004930:	9002      	str	r0, [sp, #8]
 8004932:	9006      	str	r0, [sp, #24]
 8004934:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004938:	4809      	ldr	r0, [pc, #36]	; (8004960 <siprintf+0x38>)
 800493a:	9107      	str	r1, [sp, #28]
 800493c:	9104      	str	r1, [sp, #16]
 800493e:	4909      	ldr	r1, [pc, #36]	; (8004964 <siprintf+0x3c>)
 8004940:	f853 2b04 	ldr.w	r2, [r3], #4
 8004944:	9105      	str	r1, [sp, #20]
 8004946:	6800      	ldr	r0, [r0, #0]
 8004948:	9301      	str	r3, [sp, #4]
 800494a:	a902      	add	r1, sp, #8
 800494c:	f000 f868 	bl	8004a20 <_svfiprintf_r>
 8004950:	9b02      	ldr	r3, [sp, #8]
 8004952:	2200      	movs	r2, #0
 8004954:	701a      	strb	r2, [r3, #0]
 8004956:	b01c      	add	sp, #112	; 0x70
 8004958:	f85d eb04 	ldr.w	lr, [sp], #4
 800495c:	b003      	add	sp, #12
 800495e:	4770      	bx	lr
 8004960:	2000000c 	.word	0x2000000c
 8004964:	ffff0208 	.word	0xffff0208

08004968 <__ssputs_r>:
 8004968:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800496c:	688e      	ldr	r6, [r1, #8]
 800496e:	429e      	cmp	r6, r3
 8004970:	4682      	mov	sl, r0
 8004972:	460c      	mov	r4, r1
 8004974:	4690      	mov	r8, r2
 8004976:	461f      	mov	r7, r3
 8004978:	d838      	bhi.n	80049ec <__ssputs_r+0x84>
 800497a:	898a      	ldrh	r2, [r1, #12]
 800497c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004980:	d032      	beq.n	80049e8 <__ssputs_r+0x80>
 8004982:	6825      	ldr	r5, [r4, #0]
 8004984:	6909      	ldr	r1, [r1, #16]
 8004986:	eba5 0901 	sub.w	r9, r5, r1
 800498a:	6965      	ldr	r5, [r4, #20]
 800498c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004990:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004994:	3301      	adds	r3, #1
 8004996:	444b      	add	r3, r9
 8004998:	106d      	asrs	r5, r5, #1
 800499a:	429d      	cmp	r5, r3
 800499c:	bf38      	it	cc
 800499e:	461d      	movcc	r5, r3
 80049a0:	0553      	lsls	r3, r2, #21
 80049a2:	d531      	bpl.n	8004a08 <__ssputs_r+0xa0>
 80049a4:	4629      	mov	r1, r5
 80049a6:	f000 fb63 	bl	8005070 <_malloc_r>
 80049aa:	4606      	mov	r6, r0
 80049ac:	b950      	cbnz	r0, 80049c4 <__ssputs_r+0x5c>
 80049ae:	230c      	movs	r3, #12
 80049b0:	f8ca 3000 	str.w	r3, [sl]
 80049b4:	89a3      	ldrh	r3, [r4, #12]
 80049b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80049ba:	81a3      	strh	r3, [r4, #12]
 80049bc:	f04f 30ff 	mov.w	r0, #4294967295
 80049c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049c4:	6921      	ldr	r1, [r4, #16]
 80049c6:	464a      	mov	r2, r9
 80049c8:	f000 fabe 	bl	8004f48 <memcpy>
 80049cc:	89a3      	ldrh	r3, [r4, #12]
 80049ce:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80049d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049d6:	81a3      	strh	r3, [r4, #12]
 80049d8:	6126      	str	r6, [r4, #16]
 80049da:	6165      	str	r5, [r4, #20]
 80049dc:	444e      	add	r6, r9
 80049de:	eba5 0509 	sub.w	r5, r5, r9
 80049e2:	6026      	str	r6, [r4, #0]
 80049e4:	60a5      	str	r5, [r4, #8]
 80049e6:	463e      	mov	r6, r7
 80049e8:	42be      	cmp	r6, r7
 80049ea:	d900      	bls.n	80049ee <__ssputs_r+0x86>
 80049ec:	463e      	mov	r6, r7
 80049ee:	6820      	ldr	r0, [r4, #0]
 80049f0:	4632      	mov	r2, r6
 80049f2:	4641      	mov	r1, r8
 80049f4:	f000 fab6 	bl	8004f64 <memmove>
 80049f8:	68a3      	ldr	r3, [r4, #8]
 80049fa:	1b9b      	subs	r3, r3, r6
 80049fc:	60a3      	str	r3, [r4, #8]
 80049fe:	6823      	ldr	r3, [r4, #0]
 8004a00:	4433      	add	r3, r6
 8004a02:	6023      	str	r3, [r4, #0]
 8004a04:	2000      	movs	r0, #0
 8004a06:	e7db      	b.n	80049c0 <__ssputs_r+0x58>
 8004a08:	462a      	mov	r2, r5
 8004a0a:	f000 fba5 	bl	8005158 <_realloc_r>
 8004a0e:	4606      	mov	r6, r0
 8004a10:	2800      	cmp	r0, #0
 8004a12:	d1e1      	bne.n	80049d8 <__ssputs_r+0x70>
 8004a14:	6921      	ldr	r1, [r4, #16]
 8004a16:	4650      	mov	r0, sl
 8004a18:	f000 fabe 	bl	8004f98 <_free_r>
 8004a1c:	e7c7      	b.n	80049ae <__ssputs_r+0x46>
	...

08004a20 <_svfiprintf_r>:
 8004a20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a24:	4698      	mov	r8, r3
 8004a26:	898b      	ldrh	r3, [r1, #12]
 8004a28:	061b      	lsls	r3, r3, #24
 8004a2a:	b09d      	sub	sp, #116	; 0x74
 8004a2c:	4607      	mov	r7, r0
 8004a2e:	460d      	mov	r5, r1
 8004a30:	4614      	mov	r4, r2
 8004a32:	d50e      	bpl.n	8004a52 <_svfiprintf_r+0x32>
 8004a34:	690b      	ldr	r3, [r1, #16]
 8004a36:	b963      	cbnz	r3, 8004a52 <_svfiprintf_r+0x32>
 8004a38:	2140      	movs	r1, #64	; 0x40
 8004a3a:	f000 fb19 	bl	8005070 <_malloc_r>
 8004a3e:	6028      	str	r0, [r5, #0]
 8004a40:	6128      	str	r0, [r5, #16]
 8004a42:	b920      	cbnz	r0, 8004a4e <_svfiprintf_r+0x2e>
 8004a44:	230c      	movs	r3, #12
 8004a46:	603b      	str	r3, [r7, #0]
 8004a48:	f04f 30ff 	mov.w	r0, #4294967295
 8004a4c:	e0d1      	b.n	8004bf2 <_svfiprintf_r+0x1d2>
 8004a4e:	2340      	movs	r3, #64	; 0x40
 8004a50:	616b      	str	r3, [r5, #20]
 8004a52:	2300      	movs	r3, #0
 8004a54:	9309      	str	r3, [sp, #36]	; 0x24
 8004a56:	2320      	movs	r3, #32
 8004a58:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004a5c:	f8cd 800c 	str.w	r8, [sp, #12]
 8004a60:	2330      	movs	r3, #48	; 0x30
 8004a62:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004c0c <_svfiprintf_r+0x1ec>
 8004a66:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004a6a:	f04f 0901 	mov.w	r9, #1
 8004a6e:	4623      	mov	r3, r4
 8004a70:	469a      	mov	sl, r3
 8004a72:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004a76:	b10a      	cbz	r2, 8004a7c <_svfiprintf_r+0x5c>
 8004a78:	2a25      	cmp	r2, #37	; 0x25
 8004a7a:	d1f9      	bne.n	8004a70 <_svfiprintf_r+0x50>
 8004a7c:	ebba 0b04 	subs.w	fp, sl, r4
 8004a80:	d00b      	beq.n	8004a9a <_svfiprintf_r+0x7a>
 8004a82:	465b      	mov	r3, fp
 8004a84:	4622      	mov	r2, r4
 8004a86:	4629      	mov	r1, r5
 8004a88:	4638      	mov	r0, r7
 8004a8a:	f7ff ff6d 	bl	8004968 <__ssputs_r>
 8004a8e:	3001      	adds	r0, #1
 8004a90:	f000 80aa 	beq.w	8004be8 <_svfiprintf_r+0x1c8>
 8004a94:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004a96:	445a      	add	r2, fp
 8004a98:	9209      	str	r2, [sp, #36]	; 0x24
 8004a9a:	f89a 3000 	ldrb.w	r3, [sl]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	f000 80a2 	beq.w	8004be8 <_svfiprintf_r+0x1c8>
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	f04f 32ff 	mov.w	r2, #4294967295
 8004aaa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004aae:	f10a 0a01 	add.w	sl, sl, #1
 8004ab2:	9304      	str	r3, [sp, #16]
 8004ab4:	9307      	str	r3, [sp, #28]
 8004ab6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004aba:	931a      	str	r3, [sp, #104]	; 0x68
 8004abc:	4654      	mov	r4, sl
 8004abe:	2205      	movs	r2, #5
 8004ac0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ac4:	4851      	ldr	r0, [pc, #324]	; (8004c0c <_svfiprintf_r+0x1ec>)
 8004ac6:	f7fb fbc3 	bl	8000250 <memchr>
 8004aca:	9a04      	ldr	r2, [sp, #16]
 8004acc:	b9d8      	cbnz	r0, 8004b06 <_svfiprintf_r+0xe6>
 8004ace:	06d0      	lsls	r0, r2, #27
 8004ad0:	bf44      	itt	mi
 8004ad2:	2320      	movmi	r3, #32
 8004ad4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004ad8:	0711      	lsls	r1, r2, #28
 8004ada:	bf44      	itt	mi
 8004adc:	232b      	movmi	r3, #43	; 0x2b
 8004ade:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004ae2:	f89a 3000 	ldrb.w	r3, [sl]
 8004ae6:	2b2a      	cmp	r3, #42	; 0x2a
 8004ae8:	d015      	beq.n	8004b16 <_svfiprintf_r+0xf6>
 8004aea:	9a07      	ldr	r2, [sp, #28]
 8004aec:	4654      	mov	r4, sl
 8004aee:	2000      	movs	r0, #0
 8004af0:	f04f 0c0a 	mov.w	ip, #10
 8004af4:	4621      	mov	r1, r4
 8004af6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004afa:	3b30      	subs	r3, #48	; 0x30
 8004afc:	2b09      	cmp	r3, #9
 8004afe:	d94e      	bls.n	8004b9e <_svfiprintf_r+0x17e>
 8004b00:	b1b0      	cbz	r0, 8004b30 <_svfiprintf_r+0x110>
 8004b02:	9207      	str	r2, [sp, #28]
 8004b04:	e014      	b.n	8004b30 <_svfiprintf_r+0x110>
 8004b06:	eba0 0308 	sub.w	r3, r0, r8
 8004b0a:	fa09 f303 	lsl.w	r3, r9, r3
 8004b0e:	4313      	orrs	r3, r2
 8004b10:	9304      	str	r3, [sp, #16]
 8004b12:	46a2      	mov	sl, r4
 8004b14:	e7d2      	b.n	8004abc <_svfiprintf_r+0x9c>
 8004b16:	9b03      	ldr	r3, [sp, #12]
 8004b18:	1d19      	adds	r1, r3, #4
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	9103      	str	r1, [sp, #12]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	bfbb      	ittet	lt
 8004b22:	425b      	neglt	r3, r3
 8004b24:	f042 0202 	orrlt.w	r2, r2, #2
 8004b28:	9307      	strge	r3, [sp, #28]
 8004b2a:	9307      	strlt	r3, [sp, #28]
 8004b2c:	bfb8      	it	lt
 8004b2e:	9204      	strlt	r2, [sp, #16]
 8004b30:	7823      	ldrb	r3, [r4, #0]
 8004b32:	2b2e      	cmp	r3, #46	; 0x2e
 8004b34:	d10c      	bne.n	8004b50 <_svfiprintf_r+0x130>
 8004b36:	7863      	ldrb	r3, [r4, #1]
 8004b38:	2b2a      	cmp	r3, #42	; 0x2a
 8004b3a:	d135      	bne.n	8004ba8 <_svfiprintf_r+0x188>
 8004b3c:	9b03      	ldr	r3, [sp, #12]
 8004b3e:	1d1a      	adds	r2, r3, #4
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	9203      	str	r2, [sp, #12]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	bfb8      	it	lt
 8004b48:	f04f 33ff 	movlt.w	r3, #4294967295
 8004b4c:	3402      	adds	r4, #2
 8004b4e:	9305      	str	r3, [sp, #20]
 8004b50:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004c1c <_svfiprintf_r+0x1fc>
 8004b54:	7821      	ldrb	r1, [r4, #0]
 8004b56:	2203      	movs	r2, #3
 8004b58:	4650      	mov	r0, sl
 8004b5a:	f7fb fb79 	bl	8000250 <memchr>
 8004b5e:	b140      	cbz	r0, 8004b72 <_svfiprintf_r+0x152>
 8004b60:	2340      	movs	r3, #64	; 0x40
 8004b62:	eba0 000a 	sub.w	r0, r0, sl
 8004b66:	fa03 f000 	lsl.w	r0, r3, r0
 8004b6a:	9b04      	ldr	r3, [sp, #16]
 8004b6c:	4303      	orrs	r3, r0
 8004b6e:	3401      	adds	r4, #1
 8004b70:	9304      	str	r3, [sp, #16]
 8004b72:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004b76:	4826      	ldr	r0, [pc, #152]	; (8004c10 <_svfiprintf_r+0x1f0>)
 8004b78:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004b7c:	2206      	movs	r2, #6
 8004b7e:	f7fb fb67 	bl	8000250 <memchr>
 8004b82:	2800      	cmp	r0, #0
 8004b84:	d038      	beq.n	8004bf8 <_svfiprintf_r+0x1d8>
 8004b86:	4b23      	ldr	r3, [pc, #140]	; (8004c14 <_svfiprintf_r+0x1f4>)
 8004b88:	bb1b      	cbnz	r3, 8004bd2 <_svfiprintf_r+0x1b2>
 8004b8a:	9b03      	ldr	r3, [sp, #12]
 8004b8c:	3307      	adds	r3, #7
 8004b8e:	f023 0307 	bic.w	r3, r3, #7
 8004b92:	3308      	adds	r3, #8
 8004b94:	9303      	str	r3, [sp, #12]
 8004b96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b98:	4433      	add	r3, r6
 8004b9a:	9309      	str	r3, [sp, #36]	; 0x24
 8004b9c:	e767      	b.n	8004a6e <_svfiprintf_r+0x4e>
 8004b9e:	fb0c 3202 	mla	r2, ip, r2, r3
 8004ba2:	460c      	mov	r4, r1
 8004ba4:	2001      	movs	r0, #1
 8004ba6:	e7a5      	b.n	8004af4 <_svfiprintf_r+0xd4>
 8004ba8:	2300      	movs	r3, #0
 8004baa:	3401      	adds	r4, #1
 8004bac:	9305      	str	r3, [sp, #20]
 8004bae:	4619      	mov	r1, r3
 8004bb0:	f04f 0c0a 	mov.w	ip, #10
 8004bb4:	4620      	mov	r0, r4
 8004bb6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004bba:	3a30      	subs	r2, #48	; 0x30
 8004bbc:	2a09      	cmp	r2, #9
 8004bbe:	d903      	bls.n	8004bc8 <_svfiprintf_r+0x1a8>
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d0c5      	beq.n	8004b50 <_svfiprintf_r+0x130>
 8004bc4:	9105      	str	r1, [sp, #20]
 8004bc6:	e7c3      	b.n	8004b50 <_svfiprintf_r+0x130>
 8004bc8:	fb0c 2101 	mla	r1, ip, r1, r2
 8004bcc:	4604      	mov	r4, r0
 8004bce:	2301      	movs	r3, #1
 8004bd0:	e7f0      	b.n	8004bb4 <_svfiprintf_r+0x194>
 8004bd2:	ab03      	add	r3, sp, #12
 8004bd4:	9300      	str	r3, [sp, #0]
 8004bd6:	462a      	mov	r2, r5
 8004bd8:	4b0f      	ldr	r3, [pc, #60]	; (8004c18 <_svfiprintf_r+0x1f8>)
 8004bda:	a904      	add	r1, sp, #16
 8004bdc:	4638      	mov	r0, r7
 8004bde:	f3af 8000 	nop.w
 8004be2:	1c42      	adds	r2, r0, #1
 8004be4:	4606      	mov	r6, r0
 8004be6:	d1d6      	bne.n	8004b96 <_svfiprintf_r+0x176>
 8004be8:	89ab      	ldrh	r3, [r5, #12]
 8004bea:	065b      	lsls	r3, r3, #25
 8004bec:	f53f af2c 	bmi.w	8004a48 <_svfiprintf_r+0x28>
 8004bf0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004bf2:	b01d      	add	sp, #116	; 0x74
 8004bf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004bf8:	ab03      	add	r3, sp, #12
 8004bfa:	9300      	str	r3, [sp, #0]
 8004bfc:	462a      	mov	r2, r5
 8004bfe:	4b06      	ldr	r3, [pc, #24]	; (8004c18 <_svfiprintf_r+0x1f8>)
 8004c00:	a904      	add	r1, sp, #16
 8004c02:	4638      	mov	r0, r7
 8004c04:	f000 f87a 	bl	8004cfc <_printf_i>
 8004c08:	e7eb      	b.n	8004be2 <_svfiprintf_r+0x1c2>
 8004c0a:	bf00      	nop
 8004c0c:	0800523c 	.word	0x0800523c
 8004c10:	08005246 	.word	0x08005246
 8004c14:	00000000 	.word	0x00000000
 8004c18:	08004969 	.word	0x08004969
 8004c1c:	08005242 	.word	0x08005242

08004c20 <_printf_common>:
 8004c20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c24:	4616      	mov	r6, r2
 8004c26:	4699      	mov	r9, r3
 8004c28:	688a      	ldr	r2, [r1, #8]
 8004c2a:	690b      	ldr	r3, [r1, #16]
 8004c2c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004c30:	4293      	cmp	r3, r2
 8004c32:	bfb8      	it	lt
 8004c34:	4613      	movlt	r3, r2
 8004c36:	6033      	str	r3, [r6, #0]
 8004c38:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004c3c:	4607      	mov	r7, r0
 8004c3e:	460c      	mov	r4, r1
 8004c40:	b10a      	cbz	r2, 8004c46 <_printf_common+0x26>
 8004c42:	3301      	adds	r3, #1
 8004c44:	6033      	str	r3, [r6, #0]
 8004c46:	6823      	ldr	r3, [r4, #0]
 8004c48:	0699      	lsls	r1, r3, #26
 8004c4a:	bf42      	ittt	mi
 8004c4c:	6833      	ldrmi	r3, [r6, #0]
 8004c4e:	3302      	addmi	r3, #2
 8004c50:	6033      	strmi	r3, [r6, #0]
 8004c52:	6825      	ldr	r5, [r4, #0]
 8004c54:	f015 0506 	ands.w	r5, r5, #6
 8004c58:	d106      	bne.n	8004c68 <_printf_common+0x48>
 8004c5a:	f104 0a19 	add.w	sl, r4, #25
 8004c5e:	68e3      	ldr	r3, [r4, #12]
 8004c60:	6832      	ldr	r2, [r6, #0]
 8004c62:	1a9b      	subs	r3, r3, r2
 8004c64:	42ab      	cmp	r3, r5
 8004c66:	dc26      	bgt.n	8004cb6 <_printf_common+0x96>
 8004c68:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004c6c:	1e13      	subs	r3, r2, #0
 8004c6e:	6822      	ldr	r2, [r4, #0]
 8004c70:	bf18      	it	ne
 8004c72:	2301      	movne	r3, #1
 8004c74:	0692      	lsls	r2, r2, #26
 8004c76:	d42b      	bmi.n	8004cd0 <_printf_common+0xb0>
 8004c78:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004c7c:	4649      	mov	r1, r9
 8004c7e:	4638      	mov	r0, r7
 8004c80:	47c0      	blx	r8
 8004c82:	3001      	adds	r0, #1
 8004c84:	d01e      	beq.n	8004cc4 <_printf_common+0xa4>
 8004c86:	6823      	ldr	r3, [r4, #0]
 8004c88:	68e5      	ldr	r5, [r4, #12]
 8004c8a:	6832      	ldr	r2, [r6, #0]
 8004c8c:	f003 0306 	and.w	r3, r3, #6
 8004c90:	2b04      	cmp	r3, #4
 8004c92:	bf08      	it	eq
 8004c94:	1aad      	subeq	r5, r5, r2
 8004c96:	68a3      	ldr	r3, [r4, #8]
 8004c98:	6922      	ldr	r2, [r4, #16]
 8004c9a:	bf0c      	ite	eq
 8004c9c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004ca0:	2500      	movne	r5, #0
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	bfc4      	itt	gt
 8004ca6:	1a9b      	subgt	r3, r3, r2
 8004ca8:	18ed      	addgt	r5, r5, r3
 8004caa:	2600      	movs	r6, #0
 8004cac:	341a      	adds	r4, #26
 8004cae:	42b5      	cmp	r5, r6
 8004cb0:	d11a      	bne.n	8004ce8 <_printf_common+0xc8>
 8004cb2:	2000      	movs	r0, #0
 8004cb4:	e008      	b.n	8004cc8 <_printf_common+0xa8>
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	4652      	mov	r2, sl
 8004cba:	4649      	mov	r1, r9
 8004cbc:	4638      	mov	r0, r7
 8004cbe:	47c0      	blx	r8
 8004cc0:	3001      	adds	r0, #1
 8004cc2:	d103      	bne.n	8004ccc <_printf_common+0xac>
 8004cc4:	f04f 30ff 	mov.w	r0, #4294967295
 8004cc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ccc:	3501      	adds	r5, #1
 8004cce:	e7c6      	b.n	8004c5e <_printf_common+0x3e>
 8004cd0:	18e1      	adds	r1, r4, r3
 8004cd2:	1c5a      	adds	r2, r3, #1
 8004cd4:	2030      	movs	r0, #48	; 0x30
 8004cd6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004cda:	4422      	add	r2, r4
 8004cdc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004ce0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004ce4:	3302      	adds	r3, #2
 8004ce6:	e7c7      	b.n	8004c78 <_printf_common+0x58>
 8004ce8:	2301      	movs	r3, #1
 8004cea:	4622      	mov	r2, r4
 8004cec:	4649      	mov	r1, r9
 8004cee:	4638      	mov	r0, r7
 8004cf0:	47c0      	blx	r8
 8004cf2:	3001      	adds	r0, #1
 8004cf4:	d0e6      	beq.n	8004cc4 <_printf_common+0xa4>
 8004cf6:	3601      	adds	r6, #1
 8004cf8:	e7d9      	b.n	8004cae <_printf_common+0x8e>
	...

08004cfc <_printf_i>:
 8004cfc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004d00:	7e0f      	ldrb	r7, [r1, #24]
 8004d02:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004d04:	2f78      	cmp	r7, #120	; 0x78
 8004d06:	4691      	mov	r9, r2
 8004d08:	4680      	mov	r8, r0
 8004d0a:	460c      	mov	r4, r1
 8004d0c:	469a      	mov	sl, r3
 8004d0e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004d12:	d807      	bhi.n	8004d24 <_printf_i+0x28>
 8004d14:	2f62      	cmp	r7, #98	; 0x62
 8004d16:	d80a      	bhi.n	8004d2e <_printf_i+0x32>
 8004d18:	2f00      	cmp	r7, #0
 8004d1a:	f000 80d8 	beq.w	8004ece <_printf_i+0x1d2>
 8004d1e:	2f58      	cmp	r7, #88	; 0x58
 8004d20:	f000 80a3 	beq.w	8004e6a <_printf_i+0x16e>
 8004d24:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004d28:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004d2c:	e03a      	b.n	8004da4 <_printf_i+0xa8>
 8004d2e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004d32:	2b15      	cmp	r3, #21
 8004d34:	d8f6      	bhi.n	8004d24 <_printf_i+0x28>
 8004d36:	a101      	add	r1, pc, #4	; (adr r1, 8004d3c <_printf_i+0x40>)
 8004d38:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004d3c:	08004d95 	.word	0x08004d95
 8004d40:	08004da9 	.word	0x08004da9
 8004d44:	08004d25 	.word	0x08004d25
 8004d48:	08004d25 	.word	0x08004d25
 8004d4c:	08004d25 	.word	0x08004d25
 8004d50:	08004d25 	.word	0x08004d25
 8004d54:	08004da9 	.word	0x08004da9
 8004d58:	08004d25 	.word	0x08004d25
 8004d5c:	08004d25 	.word	0x08004d25
 8004d60:	08004d25 	.word	0x08004d25
 8004d64:	08004d25 	.word	0x08004d25
 8004d68:	08004eb5 	.word	0x08004eb5
 8004d6c:	08004dd9 	.word	0x08004dd9
 8004d70:	08004e97 	.word	0x08004e97
 8004d74:	08004d25 	.word	0x08004d25
 8004d78:	08004d25 	.word	0x08004d25
 8004d7c:	08004ed7 	.word	0x08004ed7
 8004d80:	08004d25 	.word	0x08004d25
 8004d84:	08004dd9 	.word	0x08004dd9
 8004d88:	08004d25 	.word	0x08004d25
 8004d8c:	08004d25 	.word	0x08004d25
 8004d90:	08004e9f 	.word	0x08004e9f
 8004d94:	682b      	ldr	r3, [r5, #0]
 8004d96:	1d1a      	adds	r2, r3, #4
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	602a      	str	r2, [r5, #0]
 8004d9c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004da0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004da4:	2301      	movs	r3, #1
 8004da6:	e0a3      	b.n	8004ef0 <_printf_i+0x1f4>
 8004da8:	6820      	ldr	r0, [r4, #0]
 8004daa:	6829      	ldr	r1, [r5, #0]
 8004dac:	0606      	lsls	r6, r0, #24
 8004dae:	f101 0304 	add.w	r3, r1, #4
 8004db2:	d50a      	bpl.n	8004dca <_printf_i+0xce>
 8004db4:	680e      	ldr	r6, [r1, #0]
 8004db6:	602b      	str	r3, [r5, #0]
 8004db8:	2e00      	cmp	r6, #0
 8004dba:	da03      	bge.n	8004dc4 <_printf_i+0xc8>
 8004dbc:	232d      	movs	r3, #45	; 0x2d
 8004dbe:	4276      	negs	r6, r6
 8004dc0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004dc4:	485e      	ldr	r0, [pc, #376]	; (8004f40 <_printf_i+0x244>)
 8004dc6:	230a      	movs	r3, #10
 8004dc8:	e019      	b.n	8004dfe <_printf_i+0x102>
 8004dca:	680e      	ldr	r6, [r1, #0]
 8004dcc:	602b      	str	r3, [r5, #0]
 8004dce:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004dd2:	bf18      	it	ne
 8004dd4:	b236      	sxthne	r6, r6
 8004dd6:	e7ef      	b.n	8004db8 <_printf_i+0xbc>
 8004dd8:	682b      	ldr	r3, [r5, #0]
 8004dda:	6820      	ldr	r0, [r4, #0]
 8004ddc:	1d19      	adds	r1, r3, #4
 8004dde:	6029      	str	r1, [r5, #0]
 8004de0:	0601      	lsls	r1, r0, #24
 8004de2:	d501      	bpl.n	8004de8 <_printf_i+0xec>
 8004de4:	681e      	ldr	r6, [r3, #0]
 8004de6:	e002      	b.n	8004dee <_printf_i+0xf2>
 8004de8:	0646      	lsls	r6, r0, #25
 8004dea:	d5fb      	bpl.n	8004de4 <_printf_i+0xe8>
 8004dec:	881e      	ldrh	r6, [r3, #0]
 8004dee:	4854      	ldr	r0, [pc, #336]	; (8004f40 <_printf_i+0x244>)
 8004df0:	2f6f      	cmp	r7, #111	; 0x6f
 8004df2:	bf0c      	ite	eq
 8004df4:	2308      	moveq	r3, #8
 8004df6:	230a      	movne	r3, #10
 8004df8:	2100      	movs	r1, #0
 8004dfa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004dfe:	6865      	ldr	r5, [r4, #4]
 8004e00:	60a5      	str	r5, [r4, #8]
 8004e02:	2d00      	cmp	r5, #0
 8004e04:	bfa2      	ittt	ge
 8004e06:	6821      	ldrge	r1, [r4, #0]
 8004e08:	f021 0104 	bicge.w	r1, r1, #4
 8004e0c:	6021      	strge	r1, [r4, #0]
 8004e0e:	b90e      	cbnz	r6, 8004e14 <_printf_i+0x118>
 8004e10:	2d00      	cmp	r5, #0
 8004e12:	d04d      	beq.n	8004eb0 <_printf_i+0x1b4>
 8004e14:	4615      	mov	r5, r2
 8004e16:	fbb6 f1f3 	udiv	r1, r6, r3
 8004e1a:	fb03 6711 	mls	r7, r3, r1, r6
 8004e1e:	5dc7      	ldrb	r7, [r0, r7]
 8004e20:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004e24:	4637      	mov	r7, r6
 8004e26:	42bb      	cmp	r3, r7
 8004e28:	460e      	mov	r6, r1
 8004e2a:	d9f4      	bls.n	8004e16 <_printf_i+0x11a>
 8004e2c:	2b08      	cmp	r3, #8
 8004e2e:	d10b      	bne.n	8004e48 <_printf_i+0x14c>
 8004e30:	6823      	ldr	r3, [r4, #0]
 8004e32:	07de      	lsls	r6, r3, #31
 8004e34:	d508      	bpl.n	8004e48 <_printf_i+0x14c>
 8004e36:	6923      	ldr	r3, [r4, #16]
 8004e38:	6861      	ldr	r1, [r4, #4]
 8004e3a:	4299      	cmp	r1, r3
 8004e3c:	bfde      	ittt	le
 8004e3e:	2330      	movle	r3, #48	; 0x30
 8004e40:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004e44:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004e48:	1b52      	subs	r2, r2, r5
 8004e4a:	6122      	str	r2, [r4, #16]
 8004e4c:	f8cd a000 	str.w	sl, [sp]
 8004e50:	464b      	mov	r3, r9
 8004e52:	aa03      	add	r2, sp, #12
 8004e54:	4621      	mov	r1, r4
 8004e56:	4640      	mov	r0, r8
 8004e58:	f7ff fee2 	bl	8004c20 <_printf_common>
 8004e5c:	3001      	adds	r0, #1
 8004e5e:	d14c      	bne.n	8004efa <_printf_i+0x1fe>
 8004e60:	f04f 30ff 	mov.w	r0, #4294967295
 8004e64:	b004      	add	sp, #16
 8004e66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e6a:	4835      	ldr	r0, [pc, #212]	; (8004f40 <_printf_i+0x244>)
 8004e6c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004e70:	6829      	ldr	r1, [r5, #0]
 8004e72:	6823      	ldr	r3, [r4, #0]
 8004e74:	f851 6b04 	ldr.w	r6, [r1], #4
 8004e78:	6029      	str	r1, [r5, #0]
 8004e7a:	061d      	lsls	r5, r3, #24
 8004e7c:	d514      	bpl.n	8004ea8 <_printf_i+0x1ac>
 8004e7e:	07df      	lsls	r7, r3, #31
 8004e80:	bf44      	itt	mi
 8004e82:	f043 0320 	orrmi.w	r3, r3, #32
 8004e86:	6023      	strmi	r3, [r4, #0]
 8004e88:	b91e      	cbnz	r6, 8004e92 <_printf_i+0x196>
 8004e8a:	6823      	ldr	r3, [r4, #0]
 8004e8c:	f023 0320 	bic.w	r3, r3, #32
 8004e90:	6023      	str	r3, [r4, #0]
 8004e92:	2310      	movs	r3, #16
 8004e94:	e7b0      	b.n	8004df8 <_printf_i+0xfc>
 8004e96:	6823      	ldr	r3, [r4, #0]
 8004e98:	f043 0320 	orr.w	r3, r3, #32
 8004e9c:	6023      	str	r3, [r4, #0]
 8004e9e:	2378      	movs	r3, #120	; 0x78
 8004ea0:	4828      	ldr	r0, [pc, #160]	; (8004f44 <_printf_i+0x248>)
 8004ea2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004ea6:	e7e3      	b.n	8004e70 <_printf_i+0x174>
 8004ea8:	0659      	lsls	r1, r3, #25
 8004eaa:	bf48      	it	mi
 8004eac:	b2b6      	uxthmi	r6, r6
 8004eae:	e7e6      	b.n	8004e7e <_printf_i+0x182>
 8004eb0:	4615      	mov	r5, r2
 8004eb2:	e7bb      	b.n	8004e2c <_printf_i+0x130>
 8004eb4:	682b      	ldr	r3, [r5, #0]
 8004eb6:	6826      	ldr	r6, [r4, #0]
 8004eb8:	6961      	ldr	r1, [r4, #20]
 8004eba:	1d18      	adds	r0, r3, #4
 8004ebc:	6028      	str	r0, [r5, #0]
 8004ebe:	0635      	lsls	r5, r6, #24
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	d501      	bpl.n	8004ec8 <_printf_i+0x1cc>
 8004ec4:	6019      	str	r1, [r3, #0]
 8004ec6:	e002      	b.n	8004ece <_printf_i+0x1d2>
 8004ec8:	0670      	lsls	r0, r6, #25
 8004eca:	d5fb      	bpl.n	8004ec4 <_printf_i+0x1c8>
 8004ecc:	8019      	strh	r1, [r3, #0]
 8004ece:	2300      	movs	r3, #0
 8004ed0:	6123      	str	r3, [r4, #16]
 8004ed2:	4615      	mov	r5, r2
 8004ed4:	e7ba      	b.n	8004e4c <_printf_i+0x150>
 8004ed6:	682b      	ldr	r3, [r5, #0]
 8004ed8:	1d1a      	adds	r2, r3, #4
 8004eda:	602a      	str	r2, [r5, #0]
 8004edc:	681d      	ldr	r5, [r3, #0]
 8004ede:	6862      	ldr	r2, [r4, #4]
 8004ee0:	2100      	movs	r1, #0
 8004ee2:	4628      	mov	r0, r5
 8004ee4:	f7fb f9b4 	bl	8000250 <memchr>
 8004ee8:	b108      	cbz	r0, 8004eee <_printf_i+0x1f2>
 8004eea:	1b40      	subs	r0, r0, r5
 8004eec:	6060      	str	r0, [r4, #4]
 8004eee:	6863      	ldr	r3, [r4, #4]
 8004ef0:	6123      	str	r3, [r4, #16]
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ef8:	e7a8      	b.n	8004e4c <_printf_i+0x150>
 8004efa:	6923      	ldr	r3, [r4, #16]
 8004efc:	462a      	mov	r2, r5
 8004efe:	4649      	mov	r1, r9
 8004f00:	4640      	mov	r0, r8
 8004f02:	47d0      	blx	sl
 8004f04:	3001      	adds	r0, #1
 8004f06:	d0ab      	beq.n	8004e60 <_printf_i+0x164>
 8004f08:	6823      	ldr	r3, [r4, #0]
 8004f0a:	079b      	lsls	r3, r3, #30
 8004f0c:	d413      	bmi.n	8004f36 <_printf_i+0x23a>
 8004f0e:	68e0      	ldr	r0, [r4, #12]
 8004f10:	9b03      	ldr	r3, [sp, #12]
 8004f12:	4298      	cmp	r0, r3
 8004f14:	bfb8      	it	lt
 8004f16:	4618      	movlt	r0, r3
 8004f18:	e7a4      	b.n	8004e64 <_printf_i+0x168>
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	4632      	mov	r2, r6
 8004f1e:	4649      	mov	r1, r9
 8004f20:	4640      	mov	r0, r8
 8004f22:	47d0      	blx	sl
 8004f24:	3001      	adds	r0, #1
 8004f26:	d09b      	beq.n	8004e60 <_printf_i+0x164>
 8004f28:	3501      	adds	r5, #1
 8004f2a:	68e3      	ldr	r3, [r4, #12]
 8004f2c:	9903      	ldr	r1, [sp, #12]
 8004f2e:	1a5b      	subs	r3, r3, r1
 8004f30:	42ab      	cmp	r3, r5
 8004f32:	dcf2      	bgt.n	8004f1a <_printf_i+0x21e>
 8004f34:	e7eb      	b.n	8004f0e <_printf_i+0x212>
 8004f36:	2500      	movs	r5, #0
 8004f38:	f104 0619 	add.w	r6, r4, #25
 8004f3c:	e7f5      	b.n	8004f2a <_printf_i+0x22e>
 8004f3e:	bf00      	nop
 8004f40:	0800524d 	.word	0x0800524d
 8004f44:	0800525e 	.word	0x0800525e

08004f48 <memcpy>:
 8004f48:	440a      	add	r2, r1
 8004f4a:	4291      	cmp	r1, r2
 8004f4c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004f50:	d100      	bne.n	8004f54 <memcpy+0xc>
 8004f52:	4770      	bx	lr
 8004f54:	b510      	push	{r4, lr}
 8004f56:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004f5a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004f5e:	4291      	cmp	r1, r2
 8004f60:	d1f9      	bne.n	8004f56 <memcpy+0xe>
 8004f62:	bd10      	pop	{r4, pc}

08004f64 <memmove>:
 8004f64:	4288      	cmp	r0, r1
 8004f66:	b510      	push	{r4, lr}
 8004f68:	eb01 0402 	add.w	r4, r1, r2
 8004f6c:	d902      	bls.n	8004f74 <memmove+0x10>
 8004f6e:	4284      	cmp	r4, r0
 8004f70:	4623      	mov	r3, r4
 8004f72:	d807      	bhi.n	8004f84 <memmove+0x20>
 8004f74:	1e43      	subs	r3, r0, #1
 8004f76:	42a1      	cmp	r1, r4
 8004f78:	d008      	beq.n	8004f8c <memmove+0x28>
 8004f7a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004f7e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004f82:	e7f8      	b.n	8004f76 <memmove+0x12>
 8004f84:	4402      	add	r2, r0
 8004f86:	4601      	mov	r1, r0
 8004f88:	428a      	cmp	r2, r1
 8004f8a:	d100      	bne.n	8004f8e <memmove+0x2a>
 8004f8c:	bd10      	pop	{r4, pc}
 8004f8e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004f92:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004f96:	e7f7      	b.n	8004f88 <memmove+0x24>

08004f98 <_free_r>:
 8004f98:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004f9a:	2900      	cmp	r1, #0
 8004f9c:	d044      	beq.n	8005028 <_free_r+0x90>
 8004f9e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004fa2:	9001      	str	r0, [sp, #4]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	f1a1 0404 	sub.w	r4, r1, #4
 8004faa:	bfb8      	it	lt
 8004fac:	18e4      	addlt	r4, r4, r3
 8004fae:	f000 f913 	bl	80051d8 <__malloc_lock>
 8004fb2:	4a1e      	ldr	r2, [pc, #120]	; (800502c <_free_r+0x94>)
 8004fb4:	9801      	ldr	r0, [sp, #4]
 8004fb6:	6813      	ldr	r3, [r2, #0]
 8004fb8:	b933      	cbnz	r3, 8004fc8 <_free_r+0x30>
 8004fba:	6063      	str	r3, [r4, #4]
 8004fbc:	6014      	str	r4, [r2, #0]
 8004fbe:	b003      	add	sp, #12
 8004fc0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004fc4:	f000 b90e 	b.w	80051e4 <__malloc_unlock>
 8004fc8:	42a3      	cmp	r3, r4
 8004fca:	d908      	bls.n	8004fde <_free_r+0x46>
 8004fcc:	6825      	ldr	r5, [r4, #0]
 8004fce:	1961      	adds	r1, r4, r5
 8004fd0:	428b      	cmp	r3, r1
 8004fd2:	bf01      	itttt	eq
 8004fd4:	6819      	ldreq	r1, [r3, #0]
 8004fd6:	685b      	ldreq	r3, [r3, #4]
 8004fd8:	1949      	addeq	r1, r1, r5
 8004fda:	6021      	streq	r1, [r4, #0]
 8004fdc:	e7ed      	b.n	8004fba <_free_r+0x22>
 8004fde:	461a      	mov	r2, r3
 8004fe0:	685b      	ldr	r3, [r3, #4]
 8004fe2:	b10b      	cbz	r3, 8004fe8 <_free_r+0x50>
 8004fe4:	42a3      	cmp	r3, r4
 8004fe6:	d9fa      	bls.n	8004fde <_free_r+0x46>
 8004fe8:	6811      	ldr	r1, [r2, #0]
 8004fea:	1855      	adds	r5, r2, r1
 8004fec:	42a5      	cmp	r5, r4
 8004fee:	d10b      	bne.n	8005008 <_free_r+0x70>
 8004ff0:	6824      	ldr	r4, [r4, #0]
 8004ff2:	4421      	add	r1, r4
 8004ff4:	1854      	adds	r4, r2, r1
 8004ff6:	42a3      	cmp	r3, r4
 8004ff8:	6011      	str	r1, [r2, #0]
 8004ffa:	d1e0      	bne.n	8004fbe <_free_r+0x26>
 8004ffc:	681c      	ldr	r4, [r3, #0]
 8004ffe:	685b      	ldr	r3, [r3, #4]
 8005000:	6053      	str	r3, [r2, #4]
 8005002:	4421      	add	r1, r4
 8005004:	6011      	str	r1, [r2, #0]
 8005006:	e7da      	b.n	8004fbe <_free_r+0x26>
 8005008:	d902      	bls.n	8005010 <_free_r+0x78>
 800500a:	230c      	movs	r3, #12
 800500c:	6003      	str	r3, [r0, #0]
 800500e:	e7d6      	b.n	8004fbe <_free_r+0x26>
 8005010:	6825      	ldr	r5, [r4, #0]
 8005012:	1961      	adds	r1, r4, r5
 8005014:	428b      	cmp	r3, r1
 8005016:	bf04      	itt	eq
 8005018:	6819      	ldreq	r1, [r3, #0]
 800501a:	685b      	ldreq	r3, [r3, #4]
 800501c:	6063      	str	r3, [r4, #4]
 800501e:	bf04      	itt	eq
 8005020:	1949      	addeq	r1, r1, r5
 8005022:	6021      	streq	r1, [r4, #0]
 8005024:	6054      	str	r4, [r2, #4]
 8005026:	e7ca      	b.n	8004fbe <_free_r+0x26>
 8005028:	b003      	add	sp, #12
 800502a:	bd30      	pop	{r4, r5, pc}
 800502c:	200001b0 	.word	0x200001b0

08005030 <sbrk_aligned>:
 8005030:	b570      	push	{r4, r5, r6, lr}
 8005032:	4e0e      	ldr	r6, [pc, #56]	; (800506c <sbrk_aligned+0x3c>)
 8005034:	460c      	mov	r4, r1
 8005036:	6831      	ldr	r1, [r6, #0]
 8005038:	4605      	mov	r5, r0
 800503a:	b911      	cbnz	r1, 8005042 <sbrk_aligned+0x12>
 800503c:	f000 f8bc 	bl	80051b8 <_sbrk_r>
 8005040:	6030      	str	r0, [r6, #0]
 8005042:	4621      	mov	r1, r4
 8005044:	4628      	mov	r0, r5
 8005046:	f000 f8b7 	bl	80051b8 <_sbrk_r>
 800504a:	1c43      	adds	r3, r0, #1
 800504c:	d00a      	beq.n	8005064 <sbrk_aligned+0x34>
 800504e:	1cc4      	adds	r4, r0, #3
 8005050:	f024 0403 	bic.w	r4, r4, #3
 8005054:	42a0      	cmp	r0, r4
 8005056:	d007      	beq.n	8005068 <sbrk_aligned+0x38>
 8005058:	1a21      	subs	r1, r4, r0
 800505a:	4628      	mov	r0, r5
 800505c:	f000 f8ac 	bl	80051b8 <_sbrk_r>
 8005060:	3001      	adds	r0, #1
 8005062:	d101      	bne.n	8005068 <sbrk_aligned+0x38>
 8005064:	f04f 34ff 	mov.w	r4, #4294967295
 8005068:	4620      	mov	r0, r4
 800506a:	bd70      	pop	{r4, r5, r6, pc}
 800506c:	200001b4 	.word	0x200001b4

08005070 <_malloc_r>:
 8005070:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005074:	1ccd      	adds	r5, r1, #3
 8005076:	f025 0503 	bic.w	r5, r5, #3
 800507a:	3508      	adds	r5, #8
 800507c:	2d0c      	cmp	r5, #12
 800507e:	bf38      	it	cc
 8005080:	250c      	movcc	r5, #12
 8005082:	2d00      	cmp	r5, #0
 8005084:	4607      	mov	r7, r0
 8005086:	db01      	blt.n	800508c <_malloc_r+0x1c>
 8005088:	42a9      	cmp	r1, r5
 800508a:	d905      	bls.n	8005098 <_malloc_r+0x28>
 800508c:	230c      	movs	r3, #12
 800508e:	603b      	str	r3, [r7, #0]
 8005090:	2600      	movs	r6, #0
 8005092:	4630      	mov	r0, r6
 8005094:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005098:	4e2e      	ldr	r6, [pc, #184]	; (8005154 <_malloc_r+0xe4>)
 800509a:	f000 f89d 	bl	80051d8 <__malloc_lock>
 800509e:	6833      	ldr	r3, [r6, #0]
 80050a0:	461c      	mov	r4, r3
 80050a2:	bb34      	cbnz	r4, 80050f2 <_malloc_r+0x82>
 80050a4:	4629      	mov	r1, r5
 80050a6:	4638      	mov	r0, r7
 80050a8:	f7ff ffc2 	bl	8005030 <sbrk_aligned>
 80050ac:	1c43      	adds	r3, r0, #1
 80050ae:	4604      	mov	r4, r0
 80050b0:	d14d      	bne.n	800514e <_malloc_r+0xde>
 80050b2:	6834      	ldr	r4, [r6, #0]
 80050b4:	4626      	mov	r6, r4
 80050b6:	2e00      	cmp	r6, #0
 80050b8:	d140      	bne.n	800513c <_malloc_r+0xcc>
 80050ba:	6823      	ldr	r3, [r4, #0]
 80050bc:	4631      	mov	r1, r6
 80050be:	4638      	mov	r0, r7
 80050c0:	eb04 0803 	add.w	r8, r4, r3
 80050c4:	f000 f878 	bl	80051b8 <_sbrk_r>
 80050c8:	4580      	cmp	r8, r0
 80050ca:	d13a      	bne.n	8005142 <_malloc_r+0xd2>
 80050cc:	6821      	ldr	r1, [r4, #0]
 80050ce:	3503      	adds	r5, #3
 80050d0:	1a6d      	subs	r5, r5, r1
 80050d2:	f025 0503 	bic.w	r5, r5, #3
 80050d6:	3508      	adds	r5, #8
 80050d8:	2d0c      	cmp	r5, #12
 80050da:	bf38      	it	cc
 80050dc:	250c      	movcc	r5, #12
 80050de:	4629      	mov	r1, r5
 80050e0:	4638      	mov	r0, r7
 80050e2:	f7ff ffa5 	bl	8005030 <sbrk_aligned>
 80050e6:	3001      	adds	r0, #1
 80050e8:	d02b      	beq.n	8005142 <_malloc_r+0xd2>
 80050ea:	6823      	ldr	r3, [r4, #0]
 80050ec:	442b      	add	r3, r5
 80050ee:	6023      	str	r3, [r4, #0]
 80050f0:	e00e      	b.n	8005110 <_malloc_r+0xa0>
 80050f2:	6822      	ldr	r2, [r4, #0]
 80050f4:	1b52      	subs	r2, r2, r5
 80050f6:	d41e      	bmi.n	8005136 <_malloc_r+0xc6>
 80050f8:	2a0b      	cmp	r2, #11
 80050fa:	d916      	bls.n	800512a <_malloc_r+0xba>
 80050fc:	1961      	adds	r1, r4, r5
 80050fe:	42a3      	cmp	r3, r4
 8005100:	6025      	str	r5, [r4, #0]
 8005102:	bf18      	it	ne
 8005104:	6059      	strne	r1, [r3, #4]
 8005106:	6863      	ldr	r3, [r4, #4]
 8005108:	bf08      	it	eq
 800510a:	6031      	streq	r1, [r6, #0]
 800510c:	5162      	str	r2, [r4, r5]
 800510e:	604b      	str	r3, [r1, #4]
 8005110:	4638      	mov	r0, r7
 8005112:	f104 060b 	add.w	r6, r4, #11
 8005116:	f000 f865 	bl	80051e4 <__malloc_unlock>
 800511a:	f026 0607 	bic.w	r6, r6, #7
 800511e:	1d23      	adds	r3, r4, #4
 8005120:	1af2      	subs	r2, r6, r3
 8005122:	d0b6      	beq.n	8005092 <_malloc_r+0x22>
 8005124:	1b9b      	subs	r3, r3, r6
 8005126:	50a3      	str	r3, [r4, r2]
 8005128:	e7b3      	b.n	8005092 <_malloc_r+0x22>
 800512a:	6862      	ldr	r2, [r4, #4]
 800512c:	42a3      	cmp	r3, r4
 800512e:	bf0c      	ite	eq
 8005130:	6032      	streq	r2, [r6, #0]
 8005132:	605a      	strne	r2, [r3, #4]
 8005134:	e7ec      	b.n	8005110 <_malloc_r+0xa0>
 8005136:	4623      	mov	r3, r4
 8005138:	6864      	ldr	r4, [r4, #4]
 800513a:	e7b2      	b.n	80050a2 <_malloc_r+0x32>
 800513c:	4634      	mov	r4, r6
 800513e:	6876      	ldr	r6, [r6, #4]
 8005140:	e7b9      	b.n	80050b6 <_malloc_r+0x46>
 8005142:	230c      	movs	r3, #12
 8005144:	603b      	str	r3, [r7, #0]
 8005146:	4638      	mov	r0, r7
 8005148:	f000 f84c 	bl	80051e4 <__malloc_unlock>
 800514c:	e7a1      	b.n	8005092 <_malloc_r+0x22>
 800514e:	6025      	str	r5, [r4, #0]
 8005150:	e7de      	b.n	8005110 <_malloc_r+0xa0>
 8005152:	bf00      	nop
 8005154:	200001b0 	.word	0x200001b0

08005158 <_realloc_r>:
 8005158:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800515c:	4680      	mov	r8, r0
 800515e:	4614      	mov	r4, r2
 8005160:	460e      	mov	r6, r1
 8005162:	b921      	cbnz	r1, 800516e <_realloc_r+0x16>
 8005164:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005168:	4611      	mov	r1, r2
 800516a:	f7ff bf81 	b.w	8005070 <_malloc_r>
 800516e:	b92a      	cbnz	r2, 800517c <_realloc_r+0x24>
 8005170:	f7ff ff12 	bl	8004f98 <_free_r>
 8005174:	4625      	mov	r5, r4
 8005176:	4628      	mov	r0, r5
 8005178:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800517c:	f000 f838 	bl	80051f0 <_malloc_usable_size_r>
 8005180:	4284      	cmp	r4, r0
 8005182:	4607      	mov	r7, r0
 8005184:	d802      	bhi.n	800518c <_realloc_r+0x34>
 8005186:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800518a:	d812      	bhi.n	80051b2 <_realloc_r+0x5a>
 800518c:	4621      	mov	r1, r4
 800518e:	4640      	mov	r0, r8
 8005190:	f7ff ff6e 	bl	8005070 <_malloc_r>
 8005194:	4605      	mov	r5, r0
 8005196:	2800      	cmp	r0, #0
 8005198:	d0ed      	beq.n	8005176 <_realloc_r+0x1e>
 800519a:	42bc      	cmp	r4, r7
 800519c:	4622      	mov	r2, r4
 800519e:	4631      	mov	r1, r6
 80051a0:	bf28      	it	cs
 80051a2:	463a      	movcs	r2, r7
 80051a4:	f7ff fed0 	bl	8004f48 <memcpy>
 80051a8:	4631      	mov	r1, r6
 80051aa:	4640      	mov	r0, r8
 80051ac:	f7ff fef4 	bl	8004f98 <_free_r>
 80051b0:	e7e1      	b.n	8005176 <_realloc_r+0x1e>
 80051b2:	4635      	mov	r5, r6
 80051b4:	e7df      	b.n	8005176 <_realloc_r+0x1e>
	...

080051b8 <_sbrk_r>:
 80051b8:	b538      	push	{r3, r4, r5, lr}
 80051ba:	4d06      	ldr	r5, [pc, #24]	; (80051d4 <_sbrk_r+0x1c>)
 80051bc:	2300      	movs	r3, #0
 80051be:	4604      	mov	r4, r0
 80051c0:	4608      	mov	r0, r1
 80051c2:	602b      	str	r3, [r5, #0]
 80051c4:	f7fb fe24 	bl	8000e10 <_sbrk>
 80051c8:	1c43      	adds	r3, r0, #1
 80051ca:	d102      	bne.n	80051d2 <_sbrk_r+0x1a>
 80051cc:	682b      	ldr	r3, [r5, #0]
 80051ce:	b103      	cbz	r3, 80051d2 <_sbrk_r+0x1a>
 80051d0:	6023      	str	r3, [r4, #0]
 80051d2:	bd38      	pop	{r3, r4, r5, pc}
 80051d4:	200001b8 	.word	0x200001b8

080051d8 <__malloc_lock>:
 80051d8:	4801      	ldr	r0, [pc, #4]	; (80051e0 <__malloc_lock+0x8>)
 80051da:	f000 b811 	b.w	8005200 <__retarget_lock_acquire_recursive>
 80051de:	bf00      	nop
 80051e0:	200001bc 	.word	0x200001bc

080051e4 <__malloc_unlock>:
 80051e4:	4801      	ldr	r0, [pc, #4]	; (80051ec <__malloc_unlock+0x8>)
 80051e6:	f000 b80c 	b.w	8005202 <__retarget_lock_release_recursive>
 80051ea:	bf00      	nop
 80051ec:	200001bc 	.word	0x200001bc

080051f0 <_malloc_usable_size_r>:
 80051f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80051f4:	1f18      	subs	r0, r3, #4
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	bfbc      	itt	lt
 80051fa:	580b      	ldrlt	r3, [r1, r0]
 80051fc:	18c0      	addlt	r0, r0, r3
 80051fe:	4770      	bx	lr

08005200 <__retarget_lock_acquire_recursive>:
 8005200:	4770      	bx	lr

08005202 <__retarget_lock_release_recursive>:
 8005202:	4770      	bx	lr

08005204 <_init>:
 8005204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005206:	bf00      	nop
 8005208:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800520a:	bc08      	pop	{r3}
 800520c:	469e      	mov	lr, r3
 800520e:	4770      	bx	lr

08005210 <_fini>:
 8005210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005212:	bf00      	nop
 8005214:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005216:	bc08      	pop	{r3}
 8005218:	469e      	mov	lr, r3
 800521a:	4770      	bx	lr
