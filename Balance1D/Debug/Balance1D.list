
Balance1D.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007238  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003fc  08007438  08007438  00017438  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007834  08007834  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08007834  08007834  00017834  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800783c  0800783c  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800783c  0800783c  0001783c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007840  08007840  00017840  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08007844  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000198  200001dc  08007a20  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000374  08007a20  00020374  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e92d  00000000  00000000  0002020a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c4e  00000000  00000000  0002eb37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c88  00000000  00000000  00030788  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bd0  00000000  00000000  00031410  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028ea9  00000000  00000000  00031fe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f069  00000000  00000000  0005ae89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00101c58  00000000  00000000  00069ef2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0016bb4a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004458  00000000  00000000  0016bb9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001dc 	.word	0x200001dc
 800021c:	00000000 	.word	0x00000000
 8000220:	08007420 	.word	0x08007420

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001e0 	.word	0x200001e0
 800023c:	08007420 	.word	0x08007420

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b974 	b.w	80005f0 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	468e      	mov	lr, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14d      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032e:	428a      	cmp	r2, r1
 8000330:	4694      	mov	ip, r2
 8000332:	d969      	bls.n	8000408 <__udivmoddi4+0xe8>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b152      	cbz	r2, 8000350 <__udivmoddi4+0x30>
 800033a:	fa01 f302 	lsl.w	r3, r1, r2
 800033e:	f1c2 0120 	rsb	r1, r2, #32
 8000342:	fa20 f101 	lsr.w	r1, r0, r1
 8000346:	fa0c fc02 	lsl.w	ip, ip, r2
 800034a:	ea41 0e03 	orr.w	lr, r1, r3
 800034e:	4094      	lsls	r4, r2
 8000350:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000354:	0c21      	lsrs	r1, r4, #16
 8000356:	fbbe f6f8 	udiv	r6, lr, r8
 800035a:	fa1f f78c 	uxth.w	r7, ip
 800035e:	fb08 e316 	mls	r3, r8, r6, lr
 8000362:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000366:	fb06 f107 	mul.w	r1, r6, r7
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f106 30ff 	add.w	r0, r6, #4294967295
 8000376:	f080 811f 	bcs.w	80005b8 <__udivmoddi4+0x298>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 811c 	bls.w	80005b8 <__udivmoddi4+0x298>
 8000380:	3e02      	subs	r6, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a5b      	subs	r3, r3, r1
 8000386:	b2a4      	uxth	r4, r4
 8000388:	fbb3 f0f8 	udiv	r0, r3, r8
 800038c:	fb08 3310 	mls	r3, r8, r0, r3
 8000390:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000394:	fb00 f707 	mul.w	r7, r0, r7
 8000398:	42a7      	cmp	r7, r4
 800039a:	d90a      	bls.n	80003b2 <__udivmoddi4+0x92>
 800039c:	eb1c 0404 	adds.w	r4, ip, r4
 80003a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a4:	f080 810a 	bcs.w	80005bc <__udivmoddi4+0x29c>
 80003a8:	42a7      	cmp	r7, r4
 80003aa:	f240 8107 	bls.w	80005bc <__udivmoddi4+0x29c>
 80003ae:	4464      	add	r4, ip
 80003b0:	3802      	subs	r0, #2
 80003b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b6:	1be4      	subs	r4, r4, r7
 80003b8:	2600      	movs	r6, #0
 80003ba:	b11d      	cbz	r5, 80003c4 <__udivmoddi4+0xa4>
 80003bc:	40d4      	lsrs	r4, r2
 80003be:	2300      	movs	r3, #0
 80003c0:	e9c5 4300 	strd	r4, r3, [r5]
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d909      	bls.n	80003e2 <__udivmoddi4+0xc2>
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	f000 80ef 	beq.w	80005b2 <__udivmoddi4+0x292>
 80003d4:	2600      	movs	r6, #0
 80003d6:	e9c5 0100 	strd	r0, r1, [r5]
 80003da:	4630      	mov	r0, r6
 80003dc:	4631      	mov	r1, r6
 80003de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e2:	fab3 f683 	clz	r6, r3
 80003e6:	2e00      	cmp	r6, #0
 80003e8:	d14a      	bne.n	8000480 <__udivmoddi4+0x160>
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d302      	bcc.n	80003f4 <__udivmoddi4+0xd4>
 80003ee:	4282      	cmp	r2, r0
 80003f0:	f200 80f9 	bhi.w	80005e6 <__udivmoddi4+0x2c6>
 80003f4:	1a84      	subs	r4, r0, r2
 80003f6:	eb61 0303 	sbc.w	r3, r1, r3
 80003fa:	2001      	movs	r0, #1
 80003fc:	469e      	mov	lr, r3
 80003fe:	2d00      	cmp	r5, #0
 8000400:	d0e0      	beq.n	80003c4 <__udivmoddi4+0xa4>
 8000402:	e9c5 4e00 	strd	r4, lr, [r5]
 8000406:	e7dd      	b.n	80003c4 <__udivmoddi4+0xa4>
 8000408:	b902      	cbnz	r2, 800040c <__udivmoddi4+0xec>
 800040a:	deff      	udf	#255	; 0xff
 800040c:	fab2 f282 	clz	r2, r2
 8000410:	2a00      	cmp	r2, #0
 8000412:	f040 8092 	bne.w	800053a <__udivmoddi4+0x21a>
 8000416:	eba1 010c 	sub.w	r1, r1, ip
 800041a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800041e:	fa1f fe8c 	uxth.w	lr, ip
 8000422:	2601      	movs	r6, #1
 8000424:	0c20      	lsrs	r0, r4, #16
 8000426:	fbb1 f3f7 	udiv	r3, r1, r7
 800042a:	fb07 1113 	mls	r1, r7, r3, r1
 800042e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000432:	fb0e f003 	mul.w	r0, lr, r3
 8000436:	4288      	cmp	r0, r1
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x12c>
 800043a:	eb1c 0101 	adds.w	r1, ip, r1
 800043e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x12a>
 8000444:	4288      	cmp	r0, r1
 8000446:	f200 80cb 	bhi.w	80005e0 <__udivmoddi4+0x2c0>
 800044a:	4643      	mov	r3, r8
 800044c:	1a09      	subs	r1, r1, r0
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb1 f0f7 	udiv	r0, r1, r7
 8000454:	fb07 1110 	mls	r1, r7, r0, r1
 8000458:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800045c:	fb0e fe00 	mul.w	lr, lr, r0
 8000460:	45a6      	cmp	lr, r4
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x156>
 8000464:	eb1c 0404 	adds.w	r4, ip, r4
 8000468:	f100 31ff 	add.w	r1, r0, #4294967295
 800046c:	d202      	bcs.n	8000474 <__udivmoddi4+0x154>
 800046e:	45a6      	cmp	lr, r4
 8000470:	f200 80bb 	bhi.w	80005ea <__udivmoddi4+0x2ca>
 8000474:	4608      	mov	r0, r1
 8000476:	eba4 040e 	sub.w	r4, r4, lr
 800047a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800047e:	e79c      	b.n	80003ba <__udivmoddi4+0x9a>
 8000480:	f1c6 0720 	rsb	r7, r6, #32
 8000484:	40b3      	lsls	r3, r6
 8000486:	fa22 fc07 	lsr.w	ip, r2, r7
 800048a:	ea4c 0c03 	orr.w	ip, ip, r3
 800048e:	fa20 f407 	lsr.w	r4, r0, r7
 8000492:	fa01 f306 	lsl.w	r3, r1, r6
 8000496:	431c      	orrs	r4, r3
 8000498:	40f9      	lsrs	r1, r7
 800049a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800049e:	fa00 f306 	lsl.w	r3, r0, r6
 80004a2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004a6:	0c20      	lsrs	r0, r4, #16
 80004a8:	fa1f fe8c 	uxth.w	lr, ip
 80004ac:	fb09 1118 	mls	r1, r9, r8, r1
 80004b0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004b4:	fb08 f00e 	mul.w	r0, r8, lr
 80004b8:	4288      	cmp	r0, r1
 80004ba:	fa02 f206 	lsl.w	r2, r2, r6
 80004be:	d90b      	bls.n	80004d8 <__udivmoddi4+0x1b8>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c8:	f080 8088 	bcs.w	80005dc <__udivmoddi4+0x2bc>
 80004cc:	4288      	cmp	r0, r1
 80004ce:	f240 8085 	bls.w	80005dc <__udivmoddi4+0x2bc>
 80004d2:	f1a8 0802 	sub.w	r8, r8, #2
 80004d6:	4461      	add	r1, ip
 80004d8:	1a09      	subs	r1, r1, r0
 80004da:	b2a4      	uxth	r4, r4
 80004dc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004e0:	fb09 1110 	mls	r1, r9, r0, r1
 80004e4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004e8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ec:	458e      	cmp	lr, r1
 80004ee:	d908      	bls.n	8000502 <__udivmoddi4+0x1e2>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004f8:	d26c      	bcs.n	80005d4 <__udivmoddi4+0x2b4>
 80004fa:	458e      	cmp	lr, r1
 80004fc:	d96a      	bls.n	80005d4 <__udivmoddi4+0x2b4>
 80004fe:	3802      	subs	r0, #2
 8000500:	4461      	add	r1, ip
 8000502:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000506:	fba0 9402 	umull	r9, r4, r0, r2
 800050a:	eba1 010e 	sub.w	r1, r1, lr
 800050e:	42a1      	cmp	r1, r4
 8000510:	46c8      	mov	r8, r9
 8000512:	46a6      	mov	lr, r4
 8000514:	d356      	bcc.n	80005c4 <__udivmoddi4+0x2a4>
 8000516:	d053      	beq.n	80005c0 <__udivmoddi4+0x2a0>
 8000518:	b15d      	cbz	r5, 8000532 <__udivmoddi4+0x212>
 800051a:	ebb3 0208 	subs.w	r2, r3, r8
 800051e:	eb61 010e 	sbc.w	r1, r1, lr
 8000522:	fa01 f707 	lsl.w	r7, r1, r7
 8000526:	fa22 f306 	lsr.w	r3, r2, r6
 800052a:	40f1      	lsrs	r1, r6
 800052c:	431f      	orrs	r7, r3
 800052e:	e9c5 7100 	strd	r7, r1, [r5]
 8000532:	2600      	movs	r6, #0
 8000534:	4631      	mov	r1, r6
 8000536:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	40d8      	lsrs	r0, r3
 8000540:	fa0c fc02 	lsl.w	ip, ip, r2
 8000544:	fa21 f303 	lsr.w	r3, r1, r3
 8000548:	4091      	lsls	r1, r2
 800054a:	4301      	orrs	r1, r0
 800054c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000550:	fa1f fe8c 	uxth.w	lr, ip
 8000554:	fbb3 f0f7 	udiv	r0, r3, r7
 8000558:	fb07 3610 	mls	r6, r7, r0, r3
 800055c:	0c0b      	lsrs	r3, r1, #16
 800055e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000562:	fb00 f60e 	mul.w	r6, r0, lr
 8000566:	429e      	cmp	r6, r3
 8000568:	fa04 f402 	lsl.w	r4, r4, r2
 800056c:	d908      	bls.n	8000580 <__udivmoddi4+0x260>
 800056e:	eb1c 0303 	adds.w	r3, ip, r3
 8000572:	f100 38ff 	add.w	r8, r0, #4294967295
 8000576:	d22f      	bcs.n	80005d8 <__udivmoddi4+0x2b8>
 8000578:	429e      	cmp	r6, r3
 800057a:	d92d      	bls.n	80005d8 <__udivmoddi4+0x2b8>
 800057c:	3802      	subs	r0, #2
 800057e:	4463      	add	r3, ip
 8000580:	1b9b      	subs	r3, r3, r6
 8000582:	b289      	uxth	r1, r1
 8000584:	fbb3 f6f7 	udiv	r6, r3, r7
 8000588:	fb07 3316 	mls	r3, r7, r6, r3
 800058c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000590:	fb06 f30e 	mul.w	r3, r6, lr
 8000594:	428b      	cmp	r3, r1
 8000596:	d908      	bls.n	80005aa <__udivmoddi4+0x28a>
 8000598:	eb1c 0101 	adds.w	r1, ip, r1
 800059c:	f106 38ff 	add.w	r8, r6, #4294967295
 80005a0:	d216      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 80005a2:	428b      	cmp	r3, r1
 80005a4:	d914      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 80005a6:	3e02      	subs	r6, #2
 80005a8:	4461      	add	r1, ip
 80005aa:	1ac9      	subs	r1, r1, r3
 80005ac:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005b0:	e738      	b.n	8000424 <__udivmoddi4+0x104>
 80005b2:	462e      	mov	r6, r5
 80005b4:	4628      	mov	r0, r5
 80005b6:	e705      	b.n	80003c4 <__udivmoddi4+0xa4>
 80005b8:	4606      	mov	r6, r0
 80005ba:	e6e3      	b.n	8000384 <__udivmoddi4+0x64>
 80005bc:	4618      	mov	r0, r3
 80005be:	e6f8      	b.n	80003b2 <__udivmoddi4+0x92>
 80005c0:	454b      	cmp	r3, r9
 80005c2:	d2a9      	bcs.n	8000518 <__udivmoddi4+0x1f8>
 80005c4:	ebb9 0802 	subs.w	r8, r9, r2
 80005c8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005cc:	3801      	subs	r0, #1
 80005ce:	e7a3      	b.n	8000518 <__udivmoddi4+0x1f8>
 80005d0:	4646      	mov	r6, r8
 80005d2:	e7ea      	b.n	80005aa <__udivmoddi4+0x28a>
 80005d4:	4620      	mov	r0, r4
 80005d6:	e794      	b.n	8000502 <__udivmoddi4+0x1e2>
 80005d8:	4640      	mov	r0, r8
 80005da:	e7d1      	b.n	8000580 <__udivmoddi4+0x260>
 80005dc:	46d0      	mov	r8, sl
 80005de:	e77b      	b.n	80004d8 <__udivmoddi4+0x1b8>
 80005e0:	3b02      	subs	r3, #2
 80005e2:	4461      	add	r1, ip
 80005e4:	e732      	b.n	800044c <__udivmoddi4+0x12c>
 80005e6:	4630      	mov	r0, r6
 80005e8:	e709      	b.n	80003fe <__udivmoddi4+0xde>
 80005ea:	4464      	add	r4, ip
 80005ec:	3802      	subs	r0, #2
 80005ee:	e742      	b.n	8000476 <__udivmoddi4+0x156>

080005f0 <__aeabi_idiv0>:
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop

080005f4 <map>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int map(int x, int in_min, int in_max, int out_min, int out_max) {
 80005f4:	b480      	push	{r7}
 80005f6:	b085      	sub	sp, #20
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	60f8      	str	r0, [r7, #12]
 80005fc:	60b9      	str	r1, [r7, #8]
 80005fe:	607a      	str	r2, [r7, #4]
 8000600:	603b      	str	r3, [r7, #0]
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8000602:	68fa      	ldr	r2, [r7, #12]
 8000604:	68bb      	ldr	r3, [r7, #8]
 8000606:	1ad3      	subs	r3, r2, r3
 8000608:	69b9      	ldr	r1, [r7, #24]
 800060a:	683a      	ldr	r2, [r7, #0]
 800060c:	1a8a      	subs	r2, r1, r2
 800060e:	fb03 f202 	mul.w	r2, r3, r2
 8000612:	6879      	ldr	r1, [r7, #4]
 8000614:	68bb      	ldr	r3, [r7, #8]
 8000616:	1acb      	subs	r3, r1, r3
 8000618:	fb92 f2f3 	sdiv	r2, r2, r3
 800061c:	683b      	ldr	r3, [r7, #0]
 800061e:	4413      	add	r3, r2
}
 8000620:	4618      	mov	r0, r3
 8000622:	3714      	adds	r7, #20
 8000624:	46bd      	mov	sp, r7
 8000626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062a:	4770      	bx	lr

0800062c <distance>:

int distance() {
 800062c:	b580      	push	{r7, lr}
 800062e:	b082      	sub	sp, #8
 8000630:	af00      	add	r7, sp, #0
	  uint16_t adc;
	  HAL_ADC_Start(&hadc1);
 8000632:	480b      	ldr	r0, [pc, #44]	; (8000660 <distance+0x34>)
 8000634:	f000 fe54 	bl	80012e0 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000638:	f04f 31ff 	mov.w	r1, #4294967295
 800063c:	4808      	ldr	r0, [pc, #32]	; (8000660 <distance+0x34>)
 800063e:	f000 ff1d 	bl	800147c <HAL_ADC_PollForConversion>
	  adc = (HAL_ADC_GetValue(&hadc1) / 77);
 8000642:	4807      	ldr	r0, [pc, #28]	; (8000660 <distance+0x34>)
 8000644:	f000 ffa5 	bl	8001592 <HAL_ADC_GetValue>
 8000648:	4603      	mov	r3, r0
 800064a:	4a06      	ldr	r2, [pc, #24]	; (8000664 <distance+0x38>)
 800064c:	fba2 2303 	umull	r2, r3, r2, r3
 8000650:	091b      	lsrs	r3, r3, #4
 8000652:	80fb      	strh	r3, [r7, #6]
	  return adc;
 8000654:	88fb      	ldrh	r3, [r7, #6]
}
 8000656:	4618      	mov	r0, r3
 8000658:	3708      	adds	r7, #8
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	200001f8 	.word	0x200001f8
 8000664:	3531dec1 	.word	0x3531dec1

08000668 <PID>:

float priError = 0;
float toError = 0;

char sendBuffer [64] = {0};
void PID() {
 8000668:	b580      	push	{r7, lr}
 800066a:	b08a      	sub	sp, #40	; 0x28
 800066c:	af02      	add	r7, sp, #8

	//Gets the distance
	  int dis = distance ();
 800066e:	f7ff ffdd 	bl	800062c <distance>
 8000672:	61b8      	str	r0, [r7, #24]

	//Includes the set point
	  int setP = 24;
 8000674:	2318      	movs	r3, #24
 8000676:	617b      	str	r3, [r7, #20]
	//Gets the error value
	  float error = setP - dis;
 8000678:	697a      	ldr	r2, [r7, #20]
 800067a:	69bb      	ldr	r3, [r7, #24]
 800067c:	1ad3      	subs	r3, r2, r3
 800067e:	ee07 3a90 	vmov	s15, r3
 8000682:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000686:	edc7 7a04 	vstr	s15, [r7, #16]

	//This code calculates the P term
	  float Pvalue = error * kp;
 800068a:	edd7 7a04 	vldr	s15, [r7, #16]
 800068e:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 8000692:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000696:	edc7 7a03 	vstr	s15, [r7, #12]
	//This code calculates the I term
	  float Ivalue = toError * ki;
 800069a:	4b45      	ldr	r3, [pc, #276]	; (80007b0 <PID+0x148>)
 800069c:	edd3 7a00 	vldr	s15, [r3]
 80006a0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80006a4:	ed9f 6b40 	vldr	d6, [pc, #256]	; 80007a8 <PID+0x140>
 80006a8:	ee27 7b06 	vmul.f64	d7, d7, d6
 80006ac:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80006b0:	edc7 7a02 	vstr	s15, [r7, #8]
	//This code calculates the D term
	  float Dvalue = (error - priError) * kd;
 80006b4:	4b3f      	ldr	r3, [pc, #252]	; (80007b4 <PID+0x14c>)
 80006b6:	edd3 7a00 	vldr	s15, [r3]
 80006ba:	ed97 7a04 	vldr	s14, [r7, #16]
 80006be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80006c2:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80006c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80006ca:	edc7 7a01 	vstr	s15, [r7, #4]
	//This code gets the PID value


	  float PIDvalue = Pvalue + Ivalue + Dvalue;
 80006ce:	ed97 7a03 	vldr	s14, [r7, #12]
 80006d2:	edd7 7a02 	vldr	s15, [r7, #8]
 80006d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80006da:	ed97 7a01 	vldr	s14, [r7, #4]
 80006de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80006e2:	edc7 7a07 	vstr	s15, [r7, #28]
	  priError = error;
 80006e6:	4a33      	ldr	r2, [pc, #204]	; (80007b4 <PID+0x14c>)
 80006e8:	693b      	ldr	r3, [r7, #16]
 80006ea:	6013      	str	r3, [r2, #0]
	  toError += error;
 80006ec:	4b30      	ldr	r3, [pc, #192]	; (80007b0 <PID+0x148>)
 80006ee:	ed93 7a00 	vldr	s14, [r3]
 80006f2:	edd7 7a04 	vldr	s15, [r7, #16]
 80006f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80006fa:	4b2d      	ldr	r3, [pc, #180]	; (80007b0 <PID+0x148>)
 80006fc:	edc3 7a00 	vstr	s15, [r3]

	  PIDvalue = map(PIDvalue, -26, 4, 9, 41);
 8000700:	edd7 7a07 	vldr	s15, [r7, #28]
 8000704:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000708:	2329      	movs	r3, #41	; 0x29
 800070a:	9300      	str	r3, [sp, #0]
 800070c:	2309      	movs	r3, #9
 800070e:	2204      	movs	r2, #4
 8000710:	f06f 0119 	mvn.w	r1, #25
 8000714:	ee17 0a90 	vmov	r0, s15
 8000718:	f7ff ff6c 	bl	80005f4 <map>
 800071c:	ee07 0a90 	vmov	s15, r0
 8000720:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000724:	edc7 7a07 	vstr	s15, [r7, #28]

  	  if (PIDvalue < 9) {
 8000728:	edd7 7a07 	vldr	s15, [r7, #28]
 800072c:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 8000730:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000734:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000738:	d501      	bpl.n	800073e <PID+0xd6>
  		PIDvalue = 41;
 800073a:	4b1f      	ldr	r3, [pc, #124]	; (80007b8 <PID+0x150>)
 800073c:	61fb      	str	r3, [r7, #28]
	  }
	  if (PIDvalue > 41) {
 800073e:	edd7 7a07 	vldr	s15, [r7, #28]
 8000742:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 80007bc <PID+0x154>
 8000746:	eef4 7ac7 	vcmpe.f32	s15, s14
 800074a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800074e:	dd01      	ble.n	8000754 <PID+0xec>
		  PIDvalue = 9;
 8000750:	4b1b      	ldr	r3, [pc, #108]	; (80007c0 <PID+0x158>)
 8000752:	61fb      	str	r3, [r7, #28]
	  }

  	 TIM11->CCR1 = PIDvalue;
 8000754:	4b1b      	ldr	r3, [pc, #108]	; (80007c4 <PID+0x15c>)
 8000756:	edd7 7a07 	vldr	s15, [r7, #28]
 800075a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800075e:	ee17 2a90 	vmov	r2, s15
 8000762:	635a      	str	r2, [r3, #52]	; 0x34

	memset(sendBuffer, 0x00, 64);//default 0
 8000764:	2240      	movs	r2, #64	; 0x40
 8000766:	2100      	movs	r1, #0
 8000768:	4817      	ldr	r0, [pc, #92]	; (80007c8 <PID+0x160>)
 800076a:	f004 f813 	bl	8004794 <memset>
	sprintf((char*)sendBuffer, "%.2f\r\n", PIDvalue); //%.2f
 800076e:	edd7 7a07 	vldr	s15, [r7, #28]
 8000772:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000776:	ec53 2b17 	vmov	r2, r3, d7
 800077a:	4914      	ldr	r1, [pc, #80]	; (80007cc <PID+0x164>)
 800077c:	4812      	ldr	r0, [pc, #72]	; (80007c8 <PID+0x160>)
 800077e:	f004 fc55 	bl	800502c <siprintf>
	HAL_UART_Transmit(&huart3, (uint8_t*) sendBuffer, strlen((char*)sendBuffer), HAL_MAX_DELAY);
 8000782:	4811      	ldr	r0, [pc, #68]	; (80007c8 <PID+0x160>)
 8000784:	f7ff fd5c 	bl	8000240 <strlen>
 8000788:	4603      	mov	r3, r0
 800078a:	b29a      	uxth	r2, r3
 800078c:	f04f 33ff 	mov.w	r3, #4294967295
 8000790:	490d      	ldr	r1, [pc, #52]	; (80007c8 <PID+0x160>)
 8000792:	480f      	ldr	r0, [pc, #60]	; (80007d0 <PID+0x168>)
 8000794:	f003 fb37 	bl	8003e06 <HAL_UART_Transmit>
	HAL_Delay(100);
 8000798:	2064      	movs	r0, #100	; 0x64
 800079a:	f000 fd39 	bl	8001210 <HAL_Delay>
}
 800079e:	bf00      	nop
 80007a0:	3720      	adds	r7, #32
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	47ae147b 	.word	0x47ae147b
 80007ac:	3f947ae1 	.word	0x3f947ae1
 80007b0:	20000318 	.word	0x20000318
 80007b4:	20000314 	.word	0x20000314
 80007b8:	42240000 	.word	0x42240000
 80007bc:	42240000 	.word	0x42240000
 80007c0:	41100000 	.word	0x41100000
 80007c4:	40014800 	.word	0x40014800
 80007c8:	2000031c 	.word	0x2000031c
 80007cc:	08007438 	.word	0x08007438
 80007d0:	2000028c 	.word	0x2000028c

080007d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007d8:	f000 fcbd 	bl	8001156 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007dc:	f000 f812 	bl	8000804 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007e0:	f000 f93c 	bl	8000a5c <MX_GPIO_Init>
  MX_ADC1_Init();
 80007e4:	f000 f86a 	bl	80008bc <MX_ADC1_Init>
  MX_USART3_UART_Init();
 80007e8:	f000 f908 	bl	80009fc <MX_USART3_UART_Init>
  MX_TIM11_Init();
 80007ec:	f000 f8b8 	bl	8000960 <MX_TIM11_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim11, TIM_CHANNEL_1);
 80007f0:	2100      	movs	r1, #0
 80007f2:	4803      	ldr	r0, [pc, #12]	; (8000800 <main+0x2c>)
 80007f4:	f002 fd88 	bl	8003308 <HAL_TIM_PWM_Start>

    /* USER CODE BEGIN 3 */
//	  TIM11->CCR1 = 41;  //Right
//	  TIM11->CCR1 = 24;	//mid
//	  TIM11->CCR1 = 8.5; //Left
	  PID();
 80007f8:	f7ff ff36 	bl	8000668 <PID>
 80007fc:	e7fc      	b.n	80007f8 <main+0x24>
 80007fe:	bf00      	nop
 8000800:	20000240 	.word	0x20000240

08000804 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b094      	sub	sp, #80	; 0x50
 8000808:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800080a:	f107 031c 	add.w	r3, r7, #28
 800080e:	2234      	movs	r2, #52	; 0x34
 8000810:	2100      	movs	r1, #0
 8000812:	4618      	mov	r0, r3
 8000814:	f003 ffbe 	bl	8004794 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000818:	f107 0308 	add.w	r3, r7, #8
 800081c:	2200      	movs	r2, #0
 800081e:	601a      	str	r2, [r3, #0]
 8000820:	605a      	str	r2, [r3, #4]
 8000822:	609a      	str	r2, [r3, #8]
 8000824:	60da      	str	r2, [r3, #12]
 8000826:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000828:	4b22      	ldr	r3, [pc, #136]	; (80008b4 <SystemClock_Config+0xb0>)
 800082a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800082c:	4a21      	ldr	r2, [pc, #132]	; (80008b4 <SystemClock_Config+0xb0>)
 800082e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000832:	6413      	str	r3, [r2, #64]	; 0x40
 8000834:	4b1f      	ldr	r3, [pc, #124]	; (80008b4 <SystemClock_Config+0xb0>)
 8000836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000838:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800083c:	607b      	str	r3, [r7, #4]
 800083e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000840:	4b1d      	ldr	r3, [pc, #116]	; (80008b8 <SystemClock_Config+0xb4>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000848:	4a1b      	ldr	r2, [pc, #108]	; (80008b8 <SystemClock_Config+0xb4>)
 800084a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800084e:	6013      	str	r3, [r2, #0]
 8000850:	4b19      	ldr	r3, [pc, #100]	; (80008b8 <SystemClock_Config+0xb4>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000858:	603b      	str	r3, [r7, #0]
 800085a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800085c:	2302      	movs	r3, #2
 800085e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000860:	2301      	movs	r3, #1
 8000862:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000864:	2310      	movs	r3, #16
 8000866:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000868:	2300      	movs	r3, #0
 800086a:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800086c:	f107 031c 	add.w	r3, r7, #28
 8000870:	4618      	mov	r0, r3
 8000872:	f001 fb97 	bl	8001fa4 <HAL_RCC_OscConfig>
 8000876:	4603      	mov	r3, r0
 8000878:	2b00      	cmp	r3, #0
 800087a:	d001      	beq.n	8000880 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 800087c:	f000 fa1e 	bl	8000cbc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000880:	230f      	movs	r3, #15
 8000882:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000884:	2300      	movs	r3, #0
 8000886:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000888:	2300      	movs	r3, #0
 800088a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800088c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000890:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000892:	2300      	movs	r3, #0
 8000894:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000896:	f107 0308 	add.w	r3, r7, #8
 800089a:	2100      	movs	r1, #0
 800089c:	4618      	mov	r0, r3
 800089e:	f001 fe2f 	bl	8002500 <HAL_RCC_ClockConfig>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d001      	beq.n	80008ac <SystemClock_Config+0xa8>
  {
    Error_Handler();
 80008a8:	f000 fa08 	bl	8000cbc <Error_Handler>
  }
}
 80008ac:	bf00      	nop
 80008ae:	3750      	adds	r7, #80	; 0x50
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	40023800 	.word	0x40023800
 80008b8:	40007000 	.word	0x40007000

080008bc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b084      	sub	sp, #16
 80008c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80008c2:	463b      	mov	r3, r7
 80008c4:	2200      	movs	r2, #0
 80008c6:	601a      	str	r2, [r3, #0]
 80008c8:	605a      	str	r2, [r3, #4]
 80008ca:	609a      	str	r2, [r3, #8]
 80008cc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80008ce:	4b21      	ldr	r3, [pc, #132]	; (8000954 <MX_ADC1_Init+0x98>)
 80008d0:	4a21      	ldr	r2, [pc, #132]	; (8000958 <MX_ADC1_Init+0x9c>)
 80008d2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80008d4:	4b1f      	ldr	r3, [pc, #124]	; (8000954 <MX_ADC1_Init+0x98>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80008da:	4b1e      	ldr	r3, [pc, #120]	; (8000954 <MX_ADC1_Init+0x98>)
 80008dc:	2200      	movs	r2, #0
 80008de:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80008e0:	4b1c      	ldr	r3, [pc, #112]	; (8000954 <MX_ADC1_Init+0x98>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80008e6:	4b1b      	ldr	r3, [pc, #108]	; (8000954 <MX_ADC1_Init+0x98>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80008ec:	4b19      	ldr	r3, [pc, #100]	; (8000954 <MX_ADC1_Init+0x98>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008f4:	4b17      	ldr	r3, [pc, #92]	; (8000954 <MX_ADC1_Init+0x98>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008fa:	4b16      	ldr	r3, [pc, #88]	; (8000954 <MX_ADC1_Init+0x98>)
 80008fc:	4a17      	ldr	r2, [pc, #92]	; (800095c <MX_ADC1_Init+0xa0>)
 80008fe:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000900:	4b14      	ldr	r3, [pc, #80]	; (8000954 <MX_ADC1_Init+0x98>)
 8000902:	2200      	movs	r2, #0
 8000904:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000906:	4b13      	ldr	r3, [pc, #76]	; (8000954 <MX_ADC1_Init+0x98>)
 8000908:	2201      	movs	r2, #1
 800090a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800090c:	4b11      	ldr	r3, [pc, #68]	; (8000954 <MX_ADC1_Init+0x98>)
 800090e:	2200      	movs	r2, #0
 8000910:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000914:	4b0f      	ldr	r3, [pc, #60]	; (8000954 <MX_ADC1_Init+0x98>)
 8000916:	2201      	movs	r2, #1
 8000918:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800091a:	480e      	ldr	r0, [pc, #56]	; (8000954 <MX_ADC1_Init+0x98>)
 800091c:	f000 fc9c 	bl	8001258 <HAL_ADC_Init>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d001      	beq.n	800092a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000926:	f000 f9c9 	bl	8000cbc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800092a:	2303      	movs	r3, #3
 800092c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800092e:	2301      	movs	r3, #1
 8000930:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000932:	2300      	movs	r3, #0
 8000934:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000936:	463b      	mov	r3, r7
 8000938:	4619      	mov	r1, r3
 800093a:	4806      	ldr	r0, [pc, #24]	; (8000954 <MX_ADC1_Init+0x98>)
 800093c:	f000 fe36 	bl	80015ac <HAL_ADC_ConfigChannel>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d001      	beq.n	800094a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000946:	f000 f9b9 	bl	8000cbc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800094a:	bf00      	nop
 800094c:	3710      	adds	r7, #16
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	200001f8 	.word	0x200001f8
 8000958:	40012000 	.word	0x40012000
 800095c:	0f000001 	.word	0x0f000001

08000960 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b088      	sub	sp, #32
 8000964:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000966:	1d3b      	adds	r3, r7, #4
 8000968:	2200      	movs	r2, #0
 800096a:	601a      	str	r2, [r3, #0]
 800096c:	605a      	str	r2, [r3, #4]
 800096e:	609a      	str	r2, [r3, #8]
 8000970:	60da      	str	r2, [r3, #12]
 8000972:	611a      	str	r2, [r3, #16]
 8000974:	615a      	str	r2, [r3, #20]
 8000976:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8000978:	4b1e      	ldr	r3, [pc, #120]	; (80009f4 <MX_TIM11_Init+0x94>)
 800097a:	4a1f      	ldr	r2, [pc, #124]	; (80009f8 <MX_TIM11_Init+0x98>)
 800097c:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 958.33333333-1 ;
 800097e:	4b1d      	ldr	r3, [pc, #116]	; (80009f4 <MX_TIM11_Init+0x94>)
 8000980:	f240 32bd 	movw	r2, #957	; 0x3bd
 8000984:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000986:	4b1b      	ldr	r3, [pc, #108]	; (80009f4 <MX_TIM11_Init+0x94>)
 8000988:	2200      	movs	r2, #0
 800098a:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 333.9130435-1 ;
 800098c:	4b19      	ldr	r3, [pc, #100]	; (80009f4 <MX_TIM11_Init+0x94>)
 800098e:	f44f 72a6 	mov.w	r2, #332	; 0x14c
 8000992:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000994:	4b17      	ldr	r3, [pc, #92]	; (80009f4 <MX_TIM11_Init+0x94>)
 8000996:	2200      	movs	r2, #0
 8000998:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800099a:	4b16      	ldr	r3, [pc, #88]	; (80009f4 <MX_TIM11_Init+0x94>)
 800099c:	2200      	movs	r2, #0
 800099e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80009a0:	4814      	ldr	r0, [pc, #80]	; (80009f4 <MX_TIM11_Init+0x94>)
 80009a2:	f002 fbf9 	bl	8003198 <HAL_TIM_Base_Init>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d001      	beq.n	80009b0 <MX_TIM11_Init+0x50>
  {
    Error_Handler();
 80009ac:	f000 f986 	bl	8000cbc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 80009b0:	4810      	ldr	r0, [pc, #64]	; (80009f4 <MX_TIM11_Init+0x94>)
 80009b2:	f002 fc48 	bl	8003246 <HAL_TIM_PWM_Init>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d001      	beq.n	80009c0 <MX_TIM11_Init+0x60>
  {
    Error_Handler();
 80009bc:	f000 f97e 	bl	8000cbc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009c0:	2360      	movs	r3, #96	; 0x60
 80009c2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80009c4:	2300      	movs	r3, #0
 80009c6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009c8:	2300      	movs	r3, #0
 80009ca:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009cc:	2300      	movs	r3, #0
 80009ce:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009d0:	1d3b      	adds	r3, r7, #4
 80009d2:	2200      	movs	r2, #0
 80009d4:	4619      	mov	r1, r3
 80009d6:	4807      	ldr	r0, [pc, #28]	; (80009f4 <MX_TIM11_Init+0x94>)
 80009d8:	f002 fd90 	bl	80034fc <HAL_TIM_PWM_ConfigChannel>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d001      	beq.n	80009e6 <MX_TIM11_Init+0x86>
  {
    Error_Handler();
 80009e2:	f000 f96b 	bl	8000cbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 80009e6:	4803      	ldr	r0, [pc, #12]	; (80009f4 <MX_TIM11_Init+0x94>)
 80009e8:	f000 f9f2 	bl	8000dd0 <HAL_TIM_MspPostInit>

}
 80009ec:	bf00      	nop
 80009ee:	3720      	adds	r7, #32
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	20000240 	.word	0x20000240
 80009f8:	40014800 	.word	0x40014800

080009fc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a00:	4b14      	ldr	r3, [pc, #80]	; (8000a54 <MX_USART3_UART_Init+0x58>)
 8000a02:	4a15      	ldr	r2, [pc, #84]	; (8000a58 <MX_USART3_UART_Init+0x5c>)
 8000a04:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000a06:	4b13      	ldr	r3, [pc, #76]	; (8000a54 <MX_USART3_UART_Init+0x58>)
 8000a08:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a0c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a0e:	4b11      	ldr	r3, [pc, #68]	; (8000a54 <MX_USART3_UART_Init+0x58>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a14:	4b0f      	ldr	r3, [pc, #60]	; (8000a54 <MX_USART3_UART_Init+0x58>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a1a:	4b0e      	ldr	r3, [pc, #56]	; (8000a54 <MX_USART3_UART_Init+0x58>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a20:	4b0c      	ldr	r3, [pc, #48]	; (8000a54 <MX_USART3_UART_Init+0x58>)
 8000a22:	220c      	movs	r2, #12
 8000a24:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a26:	4b0b      	ldr	r3, [pc, #44]	; (8000a54 <MX_USART3_UART_Init+0x58>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a2c:	4b09      	ldr	r3, [pc, #36]	; (8000a54 <MX_USART3_UART_Init+0x58>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a32:	4b08      	ldr	r3, [pc, #32]	; (8000a54 <MX_USART3_UART_Init+0x58>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a38:	4b06      	ldr	r3, [pc, #24]	; (8000a54 <MX_USART3_UART_Init+0x58>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a3e:	4805      	ldr	r0, [pc, #20]	; (8000a54 <MX_USART3_UART_Init+0x58>)
 8000a40:	f003 f993 	bl	8003d6a <HAL_UART_Init>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d001      	beq.n	8000a4e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000a4a:	f000 f937 	bl	8000cbc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a4e:	bf00      	nop
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	2000028c 	.word	0x2000028c
 8000a58:	40004800 	.word	0x40004800

08000a5c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b08c      	sub	sp, #48	; 0x30
 8000a60:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a62:	f107 031c 	add.w	r3, r7, #28
 8000a66:	2200      	movs	r2, #0
 8000a68:	601a      	str	r2, [r3, #0]
 8000a6a:	605a      	str	r2, [r3, #4]
 8000a6c:	609a      	str	r2, [r3, #8]
 8000a6e:	60da      	str	r2, [r3, #12]
 8000a70:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a72:	4b8d      	ldr	r3, [pc, #564]	; (8000ca8 <MX_GPIO_Init+0x24c>)
 8000a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a76:	4a8c      	ldr	r2, [pc, #560]	; (8000ca8 <MX_GPIO_Init+0x24c>)
 8000a78:	f043 0304 	orr.w	r3, r3, #4
 8000a7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a7e:	4b8a      	ldr	r3, [pc, #552]	; (8000ca8 <MX_GPIO_Init+0x24c>)
 8000a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a82:	f003 0304 	and.w	r3, r3, #4
 8000a86:	61bb      	str	r3, [r7, #24]
 8000a88:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a8a:	4b87      	ldr	r3, [pc, #540]	; (8000ca8 <MX_GPIO_Init+0x24c>)
 8000a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8e:	4a86      	ldr	r2, [pc, #536]	; (8000ca8 <MX_GPIO_Init+0x24c>)
 8000a90:	f043 0320 	orr.w	r3, r3, #32
 8000a94:	6313      	str	r3, [r2, #48]	; 0x30
 8000a96:	4b84      	ldr	r3, [pc, #528]	; (8000ca8 <MX_GPIO_Init+0x24c>)
 8000a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9a:	f003 0320 	and.w	r3, r3, #32
 8000a9e:	617b      	str	r3, [r7, #20]
 8000aa0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000aa2:	4b81      	ldr	r3, [pc, #516]	; (8000ca8 <MX_GPIO_Init+0x24c>)
 8000aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa6:	4a80      	ldr	r2, [pc, #512]	; (8000ca8 <MX_GPIO_Init+0x24c>)
 8000aa8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000aac:	6313      	str	r3, [r2, #48]	; 0x30
 8000aae:	4b7e      	ldr	r3, [pc, #504]	; (8000ca8 <MX_GPIO_Init+0x24c>)
 8000ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ab6:	613b      	str	r3, [r7, #16]
 8000ab8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aba:	4b7b      	ldr	r3, [pc, #492]	; (8000ca8 <MX_GPIO_Init+0x24c>)
 8000abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000abe:	4a7a      	ldr	r2, [pc, #488]	; (8000ca8 <MX_GPIO_Init+0x24c>)
 8000ac0:	f043 0301 	orr.w	r3, r3, #1
 8000ac4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ac6:	4b78      	ldr	r3, [pc, #480]	; (8000ca8 <MX_GPIO_Init+0x24c>)
 8000ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aca:	f003 0301 	and.w	r3, r3, #1
 8000ace:	60fb      	str	r3, [r7, #12]
 8000ad0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ad2:	4b75      	ldr	r3, [pc, #468]	; (8000ca8 <MX_GPIO_Init+0x24c>)
 8000ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad6:	4a74      	ldr	r2, [pc, #464]	; (8000ca8 <MX_GPIO_Init+0x24c>)
 8000ad8:	f043 0302 	orr.w	r3, r3, #2
 8000adc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ade:	4b72      	ldr	r3, [pc, #456]	; (8000ca8 <MX_GPIO_Init+0x24c>)
 8000ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae2:	f003 0302 	and.w	r3, r3, #2
 8000ae6:	60bb      	str	r3, [r7, #8]
 8000ae8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000aea:	4b6f      	ldr	r3, [pc, #444]	; (8000ca8 <MX_GPIO_Init+0x24c>)
 8000aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aee:	4a6e      	ldr	r2, [pc, #440]	; (8000ca8 <MX_GPIO_Init+0x24c>)
 8000af0:	f043 0308 	orr.w	r3, r3, #8
 8000af4:	6313      	str	r3, [r2, #48]	; 0x30
 8000af6:	4b6c      	ldr	r3, [pc, #432]	; (8000ca8 <MX_GPIO_Init+0x24c>)
 8000af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afa:	f003 0308 	and.w	r3, r3, #8
 8000afe:	607b      	str	r3, [r7, #4]
 8000b00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b02:	4b69      	ldr	r3, [pc, #420]	; (8000ca8 <MX_GPIO_Init+0x24c>)
 8000b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b06:	4a68      	ldr	r2, [pc, #416]	; (8000ca8 <MX_GPIO_Init+0x24c>)
 8000b08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b0e:	4b66      	ldr	r3, [pc, #408]	; (8000ca8 <MX_GPIO_Init+0x24c>)
 8000b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b16:	603b      	str	r3, [r7, #0]
 8000b18:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	f244 0181 	movw	r1, #16513	; 0x4081
 8000b20:	4862      	ldr	r0, [pc, #392]	; (8000cac <MX_GPIO_Init+0x250>)
 8000b22:	f001 fa25 	bl	8001f70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000b26:	2200      	movs	r2, #0
 8000b28:	2140      	movs	r1, #64	; 0x40
 8000b2a:	4861      	ldr	r0, [pc, #388]	; (8000cb0 <MX_GPIO_Init+0x254>)
 8000b2c:	f001 fa20 	bl	8001f70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000b30:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b36:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b3a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000b40:	f107 031c 	add.w	r3, r7, #28
 8000b44:	4619      	mov	r1, r3
 8000b46:	485b      	ldr	r0, [pc, #364]	; (8000cb4 <MX_GPIO_Init+0x258>)
 8000b48:	f001 f866 	bl	8001c18 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000b4c:	2332      	movs	r3, #50	; 0x32
 8000b4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b50:	2302      	movs	r3, #2
 8000b52:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b54:	2300      	movs	r3, #0
 8000b56:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b58:	2303      	movs	r3, #3
 8000b5a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b5c:	230b      	movs	r3, #11
 8000b5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b60:	f107 031c 	add.w	r3, r7, #28
 8000b64:	4619      	mov	r1, r3
 8000b66:	4853      	ldr	r0, [pc, #332]	; (8000cb4 <MX_GPIO_Init+0x258>)
 8000b68:	f001 f856 	bl	8001c18 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_CRS_DV_Pin;
 8000b6c:	2382      	movs	r3, #130	; 0x82
 8000b6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b70:	2302      	movs	r3, #2
 8000b72:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b74:	2300      	movs	r3, #0
 8000b76:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b78:	2303      	movs	r3, #3
 8000b7a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b7c:	230b      	movs	r3, #11
 8000b7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b80:	f107 031c 	add.w	r3, r7, #28
 8000b84:	4619      	mov	r1, r3
 8000b86:	484c      	ldr	r0, [pc, #304]	; (8000cb8 <MX_GPIO_Init+0x25c>)
 8000b88:	f001 f846 	bl	8001c18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000b8c:	2304      	movs	r3, #4
 8000b8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b90:	2302      	movs	r3, #2
 8000b92:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b94:	2300      	movs	r3, #0
 8000b96:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b98:	2303      	movs	r3, #3
 8000b9a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b9c:	2307      	movs	r3, #7
 8000b9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ba0:	f107 031c 	add.w	r3, r7, #28
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	4844      	ldr	r0, [pc, #272]	; (8000cb8 <MX_GPIO_Init+0x25c>)
 8000ba8:	f001 f836 	bl	8001c18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000bac:	2320      	movs	r3, #32
 8000bae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb0:	2302      	movs	r3, #2
 8000bb2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000bbc:	2301      	movs	r3, #1
 8000bbe:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bc0:	f107 031c 	add.w	r3, r7, #28
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	483c      	ldr	r0, [pc, #240]	; (8000cb8 <MX_GPIO_Init+0x25c>)
 8000bc8:	f001 f826 	bl	8001c18 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000bcc:	f244 0381 	movw	r3, #16513	; 0x4081
 8000bd0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bde:	f107 031c 	add.w	r3, r7, #28
 8000be2:	4619      	mov	r1, r3
 8000be4:	4831      	ldr	r0, [pc, #196]	; (8000cac <MX_GPIO_Init+0x250>)
 8000be6:	f001 f817 	bl	8001c18 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000bea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf0:	2302      	movs	r3, #2
 8000bf2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bf8:	2303      	movs	r3, #3
 8000bfa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000bfc:	230b      	movs	r3, #11
 8000bfe:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000c00:	f107 031c 	add.w	r3, r7, #28
 8000c04:	4619      	mov	r1, r3
 8000c06:	4829      	ldr	r0, [pc, #164]	; (8000cac <MX_GPIO_Init+0x250>)
 8000c08:	f001 f806 	bl	8001c18 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000c0c:	2340      	movs	r3, #64	; 0x40
 8000c0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c10:	2301      	movs	r3, #1
 8000c12:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c14:	2300      	movs	r3, #0
 8000c16:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000c1c:	f107 031c 	add.w	r3, r7, #28
 8000c20:	4619      	mov	r1, r3
 8000c22:	4823      	ldr	r0, [pc, #140]	; (8000cb0 <MX_GPIO_Init+0x254>)
 8000c24:	f000 fff8 	bl	8001c18 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000c28:	2380      	movs	r3, #128	; 0x80
 8000c2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c30:	2300      	movs	r3, #0
 8000c32:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000c34:	f107 031c 	add.w	r3, r7, #28
 8000c38:	4619      	mov	r1, r3
 8000c3a:	481d      	ldr	r0, [pc, #116]	; (8000cb0 <MX_GPIO_Init+0x254>)
 8000c3c:	f000 ffec 	bl	8001c18 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000c40:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000c44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c46:	2302      	movs	r3, #2
 8000c48:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c4e:	2303      	movs	r3, #3
 8000c50:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000c52:	230a      	movs	r3, #10
 8000c54:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c56:	f107 031c 	add.w	r3, r7, #28
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	4816      	ldr	r0, [pc, #88]	; (8000cb8 <MX_GPIO_Init+0x25c>)
 8000c5e:	f000 ffdb 	bl	8001c18 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000c62:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000c70:	f107 031c 	add.w	r3, r7, #28
 8000c74:	4619      	mov	r1, r3
 8000c76:	4810      	ldr	r0, [pc, #64]	; (8000cb8 <MX_GPIO_Init+0x25c>)
 8000c78:	f000 ffce 	bl	8001c18 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000c7c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000c80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c82:	2302      	movs	r3, #2
 8000c84:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c86:	2300      	movs	r3, #0
 8000c88:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c8a:	2303      	movs	r3, #3
 8000c8c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c8e:	230b      	movs	r3, #11
 8000c90:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c92:	f107 031c 	add.w	r3, r7, #28
 8000c96:	4619      	mov	r1, r3
 8000c98:	4805      	ldr	r0, [pc, #20]	; (8000cb0 <MX_GPIO_Init+0x254>)
 8000c9a:	f000 ffbd 	bl	8001c18 <HAL_GPIO_Init>

}
 8000c9e:	bf00      	nop
 8000ca0:	3730      	adds	r7, #48	; 0x30
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	40023800 	.word	0x40023800
 8000cac:	40020400 	.word	0x40020400
 8000cb0:	40021800 	.word	0x40021800
 8000cb4:	40020800 	.word	0x40020800
 8000cb8:	40020000 	.word	0x40020000

08000cbc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cc0:	b672      	cpsid	i
}
 8000cc2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cc4:	e7fe      	b.n	8000cc4 <Error_Handler+0x8>
	...

08000cc8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	b083      	sub	sp, #12
 8000ccc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000cce:	4b0f      	ldr	r3, [pc, #60]	; (8000d0c <HAL_MspInit+0x44>)
 8000cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cd2:	4a0e      	ldr	r2, [pc, #56]	; (8000d0c <HAL_MspInit+0x44>)
 8000cd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cd8:	6413      	str	r3, [r2, #64]	; 0x40
 8000cda:	4b0c      	ldr	r3, [pc, #48]	; (8000d0c <HAL_MspInit+0x44>)
 8000cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ce2:	607b      	str	r3, [r7, #4]
 8000ce4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ce6:	4b09      	ldr	r3, [pc, #36]	; (8000d0c <HAL_MspInit+0x44>)
 8000ce8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cea:	4a08      	ldr	r2, [pc, #32]	; (8000d0c <HAL_MspInit+0x44>)
 8000cec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cf0:	6453      	str	r3, [r2, #68]	; 0x44
 8000cf2:	4b06      	ldr	r3, [pc, #24]	; (8000d0c <HAL_MspInit+0x44>)
 8000cf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cf6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cfa:	603b      	str	r3, [r7, #0]
 8000cfc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cfe:	bf00      	nop
 8000d00:	370c      	adds	r7, #12
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr
 8000d0a:	bf00      	nop
 8000d0c:	40023800 	.word	0x40023800

08000d10 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b08a      	sub	sp, #40	; 0x28
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d18:	f107 0314 	add.w	r3, r7, #20
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	601a      	str	r2, [r3, #0]
 8000d20:	605a      	str	r2, [r3, #4]
 8000d22:	609a      	str	r2, [r3, #8]
 8000d24:	60da      	str	r2, [r3, #12]
 8000d26:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	4a15      	ldr	r2, [pc, #84]	; (8000d84 <HAL_ADC_MspInit+0x74>)
 8000d2e:	4293      	cmp	r3, r2
 8000d30:	d123      	bne.n	8000d7a <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000d32:	4b15      	ldr	r3, [pc, #84]	; (8000d88 <HAL_ADC_MspInit+0x78>)
 8000d34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d36:	4a14      	ldr	r2, [pc, #80]	; (8000d88 <HAL_ADC_MspInit+0x78>)
 8000d38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d3c:	6453      	str	r3, [r2, #68]	; 0x44
 8000d3e:	4b12      	ldr	r3, [pc, #72]	; (8000d88 <HAL_ADC_MspInit+0x78>)
 8000d40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d46:	613b      	str	r3, [r7, #16]
 8000d48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d4a:	4b0f      	ldr	r3, [pc, #60]	; (8000d88 <HAL_ADC_MspInit+0x78>)
 8000d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4e:	4a0e      	ldr	r2, [pc, #56]	; (8000d88 <HAL_ADC_MspInit+0x78>)
 8000d50:	f043 0301 	orr.w	r3, r3, #1
 8000d54:	6313      	str	r3, [r2, #48]	; 0x30
 8000d56:	4b0c      	ldr	r3, [pc, #48]	; (8000d88 <HAL_ADC_MspInit+0x78>)
 8000d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5a:	f003 0301 	and.w	r3, r3, #1
 8000d5e:	60fb      	str	r3, [r7, #12]
 8000d60:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000d62:	2308      	movs	r3, #8
 8000d64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d66:	2303      	movs	r3, #3
 8000d68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d6e:	f107 0314 	add.w	r3, r7, #20
 8000d72:	4619      	mov	r1, r3
 8000d74:	4805      	ldr	r0, [pc, #20]	; (8000d8c <HAL_ADC_MspInit+0x7c>)
 8000d76:	f000 ff4f 	bl	8001c18 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000d7a:	bf00      	nop
 8000d7c:	3728      	adds	r7, #40	; 0x28
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	40012000 	.word	0x40012000
 8000d88:	40023800 	.word	0x40023800
 8000d8c:	40020000 	.word	0x40020000

08000d90 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d90:	b480      	push	{r7}
 8000d92:	b085      	sub	sp, #20
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM11)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	4a0a      	ldr	r2, [pc, #40]	; (8000dc8 <HAL_TIM_Base_MspInit+0x38>)
 8000d9e:	4293      	cmp	r3, r2
 8000da0:	d10b      	bne.n	8000dba <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM11_MspInit 0 */

  /* USER CODE END TIM11_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();
 8000da2:	4b0a      	ldr	r3, [pc, #40]	; (8000dcc <HAL_TIM_Base_MspInit+0x3c>)
 8000da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000da6:	4a09      	ldr	r2, [pc, #36]	; (8000dcc <HAL_TIM_Base_MspInit+0x3c>)
 8000da8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000dac:	6453      	str	r3, [r2, #68]	; 0x44
 8000dae:	4b07      	ldr	r3, [pc, #28]	; (8000dcc <HAL_TIM_Base_MspInit+0x3c>)
 8000db0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000db2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000db6:	60fb      	str	r3, [r7, #12]
 8000db8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8000dba:	bf00      	nop
 8000dbc:	3714      	adds	r7, #20
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc4:	4770      	bx	lr
 8000dc6:	bf00      	nop
 8000dc8:	40014800 	.word	0x40014800
 8000dcc:	40023800 	.word	0x40023800

08000dd0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b088      	sub	sp, #32
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd8:	f107 030c 	add.w	r3, r7, #12
 8000ddc:	2200      	movs	r2, #0
 8000dde:	601a      	str	r2, [r3, #0]
 8000de0:	605a      	str	r2, [r3, #4]
 8000de2:	609a      	str	r2, [r3, #8]
 8000de4:	60da      	str	r2, [r3, #12]
 8000de6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM11)
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	4a11      	ldr	r2, [pc, #68]	; (8000e34 <HAL_TIM_MspPostInit+0x64>)
 8000dee:	4293      	cmp	r3, r2
 8000df0:	d11b      	bne.n	8000e2a <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM11_MspPostInit 0 */

  /* USER CODE END TIM11_MspPostInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000df2:	4b11      	ldr	r3, [pc, #68]	; (8000e38 <HAL_TIM_MspPostInit+0x68>)
 8000df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df6:	4a10      	ldr	r2, [pc, #64]	; (8000e38 <HAL_TIM_MspPostInit+0x68>)
 8000df8:	f043 0320 	orr.w	r3, r3, #32
 8000dfc:	6313      	str	r3, [r2, #48]	; 0x30
 8000dfe:	4b0e      	ldr	r3, [pc, #56]	; (8000e38 <HAL_TIM_MspPostInit+0x68>)
 8000e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e02:	f003 0320 	and.w	r3, r3, #32
 8000e06:	60bb      	str	r3, [r7, #8]
 8000e08:	68bb      	ldr	r3, [r7, #8]
    /**TIM11 GPIO Configuration
    PF7     ------> TIM11_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000e0a:	2380      	movs	r3, #128	; 0x80
 8000e0c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e0e:	2302      	movs	r3, #2
 8000e10:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e12:	2300      	movs	r3, #0
 8000e14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e16:	2300      	movs	r3, #0
 8000e18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8000e1a:	2303      	movs	r3, #3
 8000e1c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000e1e:	f107 030c 	add.w	r3, r7, #12
 8000e22:	4619      	mov	r1, r3
 8000e24:	4805      	ldr	r0, [pc, #20]	; (8000e3c <HAL_TIM_MspPostInit+0x6c>)
 8000e26:	f000 fef7 	bl	8001c18 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM11_MspPostInit 1 */

  /* USER CODE END TIM11_MspPostInit 1 */
  }

}
 8000e2a:	bf00      	nop
 8000e2c:	3720      	adds	r7, #32
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	40014800 	.word	0x40014800
 8000e38:	40023800 	.word	0x40023800
 8000e3c:	40021400 	.word	0x40021400

08000e40 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b0ae      	sub	sp, #184	; 0xb8
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e48:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	601a      	str	r2, [r3, #0]
 8000e50:	605a      	str	r2, [r3, #4]
 8000e52:	609a      	str	r2, [r3, #8]
 8000e54:	60da      	str	r2, [r3, #12]
 8000e56:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e58:	f107 0314 	add.w	r3, r7, #20
 8000e5c:	2290      	movs	r2, #144	; 0x90
 8000e5e:	2100      	movs	r1, #0
 8000e60:	4618      	mov	r0, r3
 8000e62:	f003 fc97 	bl	8004794 <memset>
  if(huart->Instance==USART3)
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	4a22      	ldr	r2, [pc, #136]	; (8000ef4 <HAL_UART_MspInit+0xb4>)
 8000e6c:	4293      	cmp	r3, r2
 8000e6e:	d13c      	bne.n	8000eea <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000e70:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e74:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000e76:	2300      	movs	r3, #0
 8000e78:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e7a:	f107 0314 	add.w	r3, r7, #20
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f001 fd62 	bl	8002948 <HAL_RCCEx_PeriphCLKConfig>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d001      	beq.n	8000e8e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000e8a:	f7ff ff17 	bl	8000cbc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000e8e:	4b1a      	ldr	r3, [pc, #104]	; (8000ef8 <HAL_UART_MspInit+0xb8>)
 8000e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e92:	4a19      	ldr	r2, [pc, #100]	; (8000ef8 <HAL_UART_MspInit+0xb8>)
 8000e94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e98:	6413      	str	r3, [r2, #64]	; 0x40
 8000e9a:	4b17      	ldr	r3, [pc, #92]	; (8000ef8 <HAL_UART_MspInit+0xb8>)
 8000e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e9e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000ea2:	613b      	str	r3, [r7, #16]
 8000ea4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ea6:	4b14      	ldr	r3, [pc, #80]	; (8000ef8 <HAL_UART_MspInit+0xb8>)
 8000ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eaa:	4a13      	ldr	r2, [pc, #76]	; (8000ef8 <HAL_UART_MspInit+0xb8>)
 8000eac:	f043 0308 	orr.w	r3, r3, #8
 8000eb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000eb2:	4b11      	ldr	r3, [pc, #68]	; (8000ef8 <HAL_UART_MspInit+0xb8>)
 8000eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb6:	f003 0308 	and.w	r3, r3, #8
 8000eba:	60fb      	str	r3, [r7, #12]
 8000ebc:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000ebe:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000ec2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec6:	2302      	movs	r3, #2
 8000ec8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ed2:	2303      	movs	r3, #3
 8000ed4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000ed8:	2307      	movs	r3, #7
 8000eda:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ede:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	4805      	ldr	r0, [pc, #20]	; (8000efc <HAL_UART_MspInit+0xbc>)
 8000ee6:	f000 fe97 	bl	8001c18 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000eea:	bf00      	nop
 8000eec:	37b8      	adds	r7, #184	; 0xb8
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	40004800 	.word	0x40004800
 8000ef8:	40023800 	.word	0x40023800
 8000efc:	40020c00 	.word	0x40020c00

08000f00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f04:	e7fe      	b.n	8000f04 <NMI_Handler+0x4>

08000f06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f06:	b480      	push	{r7}
 8000f08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f0a:	e7fe      	b.n	8000f0a <HardFault_Handler+0x4>

08000f0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f10:	e7fe      	b.n	8000f10 <MemManage_Handler+0x4>

08000f12 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f12:	b480      	push	{r7}
 8000f14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f16:	e7fe      	b.n	8000f16 <BusFault_Handler+0x4>

08000f18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f1c:	e7fe      	b.n	8000f1c <UsageFault_Handler+0x4>

08000f1e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f1e:	b480      	push	{r7}
 8000f20:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f22:	bf00      	nop
 8000f24:	46bd      	mov	sp, r7
 8000f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2a:	4770      	bx	lr

08000f2c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f30:	bf00      	nop
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr

08000f3a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f3a:	b480      	push	{r7}
 8000f3c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f3e:	bf00      	nop
 8000f40:	46bd      	mov	sp, r7
 8000f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f46:	4770      	bx	lr

08000f48 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f4c:	f000 f940 	bl	80011d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f50:	bf00      	nop
 8000f52:	bd80      	pop	{r7, pc}

08000f54 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
	return 1;
 8000f58:	2301      	movs	r3, #1
}
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f62:	4770      	bx	lr

08000f64 <_kill>:

int _kill(int pid, int sig)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b082      	sub	sp, #8
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
 8000f6c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000f6e:	f003 fbe7 	bl	8004740 <__errno>
 8000f72:	4603      	mov	r3, r0
 8000f74:	2216      	movs	r2, #22
 8000f76:	601a      	str	r2, [r3, #0]
	return -1;
 8000f78:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	3708      	adds	r7, #8
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}

08000f84 <_exit>:

void _exit (int status)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b082      	sub	sp, #8
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000f8c:	f04f 31ff 	mov.w	r1, #4294967295
 8000f90:	6878      	ldr	r0, [r7, #4]
 8000f92:	f7ff ffe7 	bl	8000f64 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000f96:	e7fe      	b.n	8000f96 <_exit+0x12>

08000f98 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b086      	sub	sp, #24
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	60f8      	str	r0, [r7, #12]
 8000fa0:	60b9      	str	r1, [r7, #8]
 8000fa2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	617b      	str	r3, [r7, #20]
 8000fa8:	e00a      	b.n	8000fc0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000faa:	f3af 8000 	nop.w
 8000fae:	4601      	mov	r1, r0
 8000fb0:	68bb      	ldr	r3, [r7, #8]
 8000fb2:	1c5a      	adds	r2, r3, #1
 8000fb4:	60ba      	str	r2, [r7, #8]
 8000fb6:	b2ca      	uxtb	r2, r1
 8000fb8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fba:	697b      	ldr	r3, [r7, #20]
 8000fbc:	3301      	adds	r3, #1
 8000fbe:	617b      	str	r3, [r7, #20]
 8000fc0:	697a      	ldr	r2, [r7, #20]
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	429a      	cmp	r2, r3
 8000fc6:	dbf0      	blt.n	8000faa <_read+0x12>
	}

return len;
 8000fc8:	687b      	ldr	r3, [r7, #4]
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	3718      	adds	r7, #24
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}

08000fd2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000fd2:	b580      	push	{r7, lr}
 8000fd4:	b086      	sub	sp, #24
 8000fd6:	af00      	add	r7, sp, #0
 8000fd8:	60f8      	str	r0, [r7, #12]
 8000fda:	60b9      	str	r1, [r7, #8]
 8000fdc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fde:	2300      	movs	r3, #0
 8000fe0:	617b      	str	r3, [r7, #20]
 8000fe2:	e009      	b.n	8000ff8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000fe4:	68bb      	ldr	r3, [r7, #8]
 8000fe6:	1c5a      	adds	r2, r3, #1
 8000fe8:	60ba      	str	r2, [r7, #8]
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	4618      	mov	r0, r3
 8000fee:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ff2:	697b      	ldr	r3, [r7, #20]
 8000ff4:	3301      	adds	r3, #1
 8000ff6:	617b      	str	r3, [r7, #20]
 8000ff8:	697a      	ldr	r2, [r7, #20]
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	429a      	cmp	r2, r3
 8000ffe:	dbf1      	blt.n	8000fe4 <_write+0x12>
	}
	return len;
 8001000:	687b      	ldr	r3, [r7, #4]
}
 8001002:	4618      	mov	r0, r3
 8001004:	3718      	adds	r7, #24
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}

0800100a <_close>:

int _close(int file)
{
 800100a:	b480      	push	{r7}
 800100c:	b083      	sub	sp, #12
 800100e:	af00      	add	r7, sp, #0
 8001010:	6078      	str	r0, [r7, #4]
	return -1;
 8001012:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001016:	4618      	mov	r0, r3
 8001018:	370c      	adds	r7, #12
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr

08001022 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001022:	b480      	push	{r7}
 8001024:	b083      	sub	sp, #12
 8001026:	af00      	add	r7, sp, #0
 8001028:	6078      	str	r0, [r7, #4]
 800102a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001032:	605a      	str	r2, [r3, #4]
	return 0;
 8001034:	2300      	movs	r3, #0
}
 8001036:	4618      	mov	r0, r3
 8001038:	370c      	adds	r7, #12
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr

08001042 <_isatty>:

int _isatty(int file)
{
 8001042:	b480      	push	{r7}
 8001044:	b083      	sub	sp, #12
 8001046:	af00      	add	r7, sp, #0
 8001048:	6078      	str	r0, [r7, #4]
	return 1;
 800104a:	2301      	movs	r3, #1
}
 800104c:	4618      	mov	r0, r3
 800104e:	370c      	adds	r7, #12
 8001050:	46bd      	mov	sp, r7
 8001052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001056:	4770      	bx	lr

08001058 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001058:	b480      	push	{r7}
 800105a:	b085      	sub	sp, #20
 800105c:	af00      	add	r7, sp, #0
 800105e:	60f8      	str	r0, [r7, #12]
 8001060:	60b9      	str	r1, [r7, #8]
 8001062:	607a      	str	r2, [r7, #4]
	return 0;
 8001064:	2300      	movs	r3, #0
}
 8001066:	4618      	mov	r0, r3
 8001068:	3714      	adds	r7, #20
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr
	...

08001074 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b086      	sub	sp, #24
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800107c:	4a14      	ldr	r2, [pc, #80]	; (80010d0 <_sbrk+0x5c>)
 800107e:	4b15      	ldr	r3, [pc, #84]	; (80010d4 <_sbrk+0x60>)
 8001080:	1ad3      	subs	r3, r2, r3
 8001082:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001084:	697b      	ldr	r3, [r7, #20]
 8001086:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001088:	4b13      	ldr	r3, [pc, #76]	; (80010d8 <_sbrk+0x64>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	2b00      	cmp	r3, #0
 800108e:	d102      	bne.n	8001096 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001090:	4b11      	ldr	r3, [pc, #68]	; (80010d8 <_sbrk+0x64>)
 8001092:	4a12      	ldr	r2, [pc, #72]	; (80010dc <_sbrk+0x68>)
 8001094:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001096:	4b10      	ldr	r3, [pc, #64]	; (80010d8 <_sbrk+0x64>)
 8001098:	681a      	ldr	r2, [r3, #0]
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	4413      	add	r3, r2
 800109e:	693a      	ldr	r2, [r7, #16]
 80010a0:	429a      	cmp	r2, r3
 80010a2:	d207      	bcs.n	80010b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010a4:	f003 fb4c 	bl	8004740 <__errno>
 80010a8:	4603      	mov	r3, r0
 80010aa:	220c      	movs	r2, #12
 80010ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010ae:	f04f 33ff 	mov.w	r3, #4294967295
 80010b2:	e009      	b.n	80010c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010b4:	4b08      	ldr	r3, [pc, #32]	; (80010d8 <_sbrk+0x64>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010ba:	4b07      	ldr	r3, [pc, #28]	; (80010d8 <_sbrk+0x64>)
 80010bc:	681a      	ldr	r2, [r3, #0]
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	4413      	add	r3, r2
 80010c2:	4a05      	ldr	r2, [pc, #20]	; (80010d8 <_sbrk+0x64>)
 80010c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010c6:	68fb      	ldr	r3, [r7, #12]
}
 80010c8:	4618      	mov	r0, r3
 80010ca:	3718      	adds	r7, #24
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	20080000 	.word	0x20080000
 80010d4:	00000400 	.word	0x00000400
 80010d8:	2000035c 	.word	0x2000035c
 80010dc:	20000378 	.word	0x20000378

080010e0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010e4:	4b06      	ldr	r3, [pc, #24]	; (8001100 <SystemInit+0x20>)
 80010e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010ea:	4a05      	ldr	r2, [pc, #20]	; (8001100 <SystemInit+0x20>)
 80010ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010f4:	bf00      	nop
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr
 80010fe:	bf00      	nop
 8001100:	e000ed00 	.word	0xe000ed00

08001104 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001104:	f8df d034 	ldr.w	sp, [pc, #52]	; 800113c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001108:	480d      	ldr	r0, [pc, #52]	; (8001140 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800110a:	490e      	ldr	r1, [pc, #56]	; (8001144 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800110c:	4a0e      	ldr	r2, [pc, #56]	; (8001148 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800110e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001110:	e002      	b.n	8001118 <LoopCopyDataInit>

08001112 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001112:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001114:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001116:	3304      	adds	r3, #4

08001118 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001118:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800111a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800111c:	d3f9      	bcc.n	8001112 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800111e:	4a0b      	ldr	r2, [pc, #44]	; (800114c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001120:	4c0b      	ldr	r4, [pc, #44]	; (8001150 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001122:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001124:	e001      	b.n	800112a <LoopFillZerobss>

08001126 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001126:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001128:	3204      	adds	r2, #4

0800112a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800112a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800112c:	d3fb      	bcc.n	8001126 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800112e:	f7ff ffd7 	bl	80010e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001132:	f003 fb0b 	bl	800474c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001136:	f7ff fb4d 	bl	80007d4 <main>
  bx  lr    
 800113a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800113c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001140:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001144:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001148:	08007844 	.word	0x08007844
  ldr r2, =_sbss
 800114c:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001150:	20000374 	.word	0x20000374

08001154 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001154:	e7fe      	b.n	8001154 <ADC_IRQHandler>

08001156 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001156:	b580      	push	{r7, lr}
 8001158:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800115a:	2003      	movs	r0, #3
 800115c:	f000 fd28 	bl	8001bb0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001160:	2000      	movs	r0, #0
 8001162:	f000 f805 	bl	8001170 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001166:	f7ff fdaf 	bl	8000cc8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800116a:	2300      	movs	r3, #0
}
 800116c:	4618      	mov	r0, r3
 800116e:	bd80      	pop	{r7, pc}

08001170 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b082      	sub	sp, #8
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001178:	4b12      	ldr	r3, [pc, #72]	; (80011c4 <HAL_InitTick+0x54>)
 800117a:	681a      	ldr	r2, [r3, #0]
 800117c:	4b12      	ldr	r3, [pc, #72]	; (80011c8 <HAL_InitTick+0x58>)
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	4619      	mov	r1, r3
 8001182:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001186:	fbb3 f3f1 	udiv	r3, r3, r1
 800118a:	fbb2 f3f3 	udiv	r3, r2, r3
 800118e:	4618      	mov	r0, r3
 8001190:	f000 fd35 	bl	8001bfe <HAL_SYSTICK_Config>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d001      	beq.n	800119e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800119a:	2301      	movs	r3, #1
 800119c:	e00e      	b.n	80011bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	2b0f      	cmp	r3, #15
 80011a2:	d80a      	bhi.n	80011ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011a4:	2200      	movs	r2, #0
 80011a6:	6879      	ldr	r1, [r7, #4]
 80011a8:	f04f 30ff 	mov.w	r0, #4294967295
 80011ac:	f000 fd0b 	bl	8001bc6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011b0:	4a06      	ldr	r2, [pc, #24]	; (80011cc <HAL_InitTick+0x5c>)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011b6:	2300      	movs	r3, #0
 80011b8:	e000      	b.n	80011bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011ba:	2301      	movs	r3, #1
}
 80011bc:	4618      	mov	r0, r3
 80011be:	3708      	adds	r7, #8
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	20000000 	.word	0x20000000
 80011c8:	20000008 	.word	0x20000008
 80011cc:	20000004 	.word	0x20000004

080011d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011d4:	4b06      	ldr	r3, [pc, #24]	; (80011f0 <HAL_IncTick+0x20>)
 80011d6:	781b      	ldrb	r3, [r3, #0]
 80011d8:	461a      	mov	r2, r3
 80011da:	4b06      	ldr	r3, [pc, #24]	; (80011f4 <HAL_IncTick+0x24>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	4413      	add	r3, r2
 80011e0:	4a04      	ldr	r2, [pc, #16]	; (80011f4 <HAL_IncTick+0x24>)
 80011e2:	6013      	str	r3, [r2, #0]
}
 80011e4:	bf00      	nop
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr
 80011ee:	bf00      	nop
 80011f0:	20000008 	.word	0x20000008
 80011f4:	20000360 	.word	0x20000360

080011f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
  return uwTick;
 80011fc:	4b03      	ldr	r3, [pc, #12]	; (800120c <HAL_GetTick+0x14>)
 80011fe:	681b      	ldr	r3, [r3, #0]
}
 8001200:	4618      	mov	r0, r3
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr
 800120a:	bf00      	nop
 800120c:	20000360 	.word	0x20000360

08001210 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b084      	sub	sp, #16
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001218:	f7ff ffee 	bl	80011f8 <HAL_GetTick>
 800121c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001228:	d005      	beq.n	8001236 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800122a:	4b0a      	ldr	r3, [pc, #40]	; (8001254 <HAL_Delay+0x44>)
 800122c:	781b      	ldrb	r3, [r3, #0]
 800122e:	461a      	mov	r2, r3
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	4413      	add	r3, r2
 8001234:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001236:	bf00      	nop
 8001238:	f7ff ffde 	bl	80011f8 <HAL_GetTick>
 800123c:	4602      	mov	r2, r0
 800123e:	68bb      	ldr	r3, [r7, #8]
 8001240:	1ad3      	subs	r3, r2, r3
 8001242:	68fa      	ldr	r2, [r7, #12]
 8001244:	429a      	cmp	r2, r3
 8001246:	d8f7      	bhi.n	8001238 <HAL_Delay+0x28>
  {
  }
}
 8001248:	bf00      	nop
 800124a:	bf00      	nop
 800124c:	3710      	adds	r7, #16
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	20000008 	.word	0x20000008

08001258 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b084      	sub	sp, #16
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001260:	2300      	movs	r3, #0
 8001262:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d101      	bne.n	800126e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800126a:	2301      	movs	r3, #1
 800126c:	e031      	b.n	80012d2 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001272:	2b00      	cmp	r3, #0
 8001274:	d109      	bne.n	800128a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001276:	6878      	ldr	r0, [r7, #4]
 8001278:	f7ff fd4a 	bl	8000d10 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	2200      	movs	r2, #0
 8001280:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	2200      	movs	r2, #0
 8001286:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800128e:	f003 0310 	and.w	r3, r3, #16
 8001292:	2b00      	cmp	r3, #0
 8001294:	d116      	bne.n	80012c4 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800129a:	4b10      	ldr	r3, [pc, #64]	; (80012dc <HAL_ADC_Init+0x84>)
 800129c:	4013      	ands	r3, r2
 800129e:	f043 0202 	orr.w	r2, r3, #2
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80012a6:	6878      	ldr	r0, [r7, #4]
 80012a8:	f000 fad6 	bl	8001858 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	2200      	movs	r2, #0
 80012b0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b6:	f023 0303 	bic.w	r3, r3, #3
 80012ba:	f043 0201 	orr.w	r2, r3, #1
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	641a      	str	r2, [r3, #64]	; 0x40
 80012c2:	e001      	b.n	80012c8 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80012c4:	2301      	movs	r3, #1
 80012c6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	2200      	movs	r2, #0
 80012cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80012d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	3710      	adds	r7, #16
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	ffffeefd 	.word	0xffffeefd

080012e0 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b085      	sub	sp, #20
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 80012e8:	2300      	movs	r3, #0
 80012ea:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80012f2:	2b01      	cmp	r3, #1
 80012f4:	d101      	bne.n	80012fa <HAL_ADC_Start+0x1a>
 80012f6:	2302      	movs	r3, #2
 80012f8:	e0ad      	b.n	8001456 <HAL_ADC_Start+0x176>
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	2201      	movs	r2, #1
 80012fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	689b      	ldr	r3, [r3, #8]
 8001308:	f003 0301 	and.w	r3, r3, #1
 800130c:	2b01      	cmp	r3, #1
 800130e:	d018      	beq.n	8001342 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	689a      	ldr	r2, [r3, #8]
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f042 0201 	orr.w	r2, r2, #1
 800131e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8001320:	4b50      	ldr	r3, [pc, #320]	; (8001464 <HAL_ADC_Start+0x184>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a50      	ldr	r2, [pc, #320]	; (8001468 <HAL_ADC_Start+0x188>)
 8001326:	fba2 2303 	umull	r2, r3, r2, r3
 800132a:	0c9a      	lsrs	r2, r3, #18
 800132c:	4613      	mov	r3, r2
 800132e:	005b      	lsls	r3, r3, #1
 8001330:	4413      	add	r3, r2
 8001332:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8001334:	e002      	b.n	800133c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	3b01      	subs	r3, #1
 800133a:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d1f9      	bne.n	8001336 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	689b      	ldr	r3, [r3, #8]
 8001348:	f003 0301 	and.w	r3, r3, #1
 800134c:	2b01      	cmp	r3, #1
 800134e:	d175      	bne.n	800143c <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001354:	4b45      	ldr	r3, [pc, #276]	; (800146c <HAL_ADC_Start+0x18c>)
 8001356:	4013      	ands	r3, r2
 8001358:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800136a:	2b00      	cmp	r3, #0
 800136c:	d007      	beq.n	800137e <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001372:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001376:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001382:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001386:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800138a:	d106      	bne.n	800139a <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001390:	f023 0206 	bic.w	r2, r3, #6
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	645a      	str	r2, [r3, #68]	; 0x44
 8001398:	e002      	b.n	80013a0 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	2200      	movs	r2, #0
 800139e:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	2200      	movs	r2, #0
 80013a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80013b0:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 80013b2:	4b2f      	ldr	r3, [pc, #188]	; (8001470 <HAL_ADC_Start+0x190>)
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	f003 031f 	and.w	r3, r3, #31
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d10f      	bne.n	80013de <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	689b      	ldr	r3, [r3, #8]
 80013c4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d143      	bne.n	8001454 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	689a      	ldr	r2, [r3, #8]
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80013da:	609a      	str	r2, [r3, #8]
 80013dc:	e03a      	b.n	8001454 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	4a24      	ldr	r2, [pc, #144]	; (8001474 <HAL_ADC_Start+0x194>)
 80013e4:	4293      	cmp	r3, r2
 80013e6:	d10e      	bne.n	8001406 <HAL_ADC_Start+0x126>
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	689b      	ldr	r3, [r3, #8]
 80013ee:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d107      	bne.n	8001406 <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	689a      	ldr	r2, [r3, #8]
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001404:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8001406:	4b1a      	ldr	r3, [pc, #104]	; (8001470 <HAL_ADC_Start+0x190>)
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	f003 0310 	and.w	r3, r3, #16
 800140e:	2b00      	cmp	r3, #0
 8001410:	d120      	bne.n	8001454 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4a18      	ldr	r2, [pc, #96]	; (8001478 <HAL_ADC_Start+0x198>)
 8001418:	4293      	cmp	r3, r2
 800141a:	d11b      	bne.n	8001454 <HAL_ADC_Start+0x174>
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	689b      	ldr	r3, [r3, #8]
 8001422:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001426:	2b00      	cmp	r3, #0
 8001428:	d114      	bne.n	8001454 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	689a      	ldr	r2, [r3, #8]
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001438:	609a      	str	r2, [r3, #8]
 800143a:	e00b      	b.n	8001454 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001440:	f043 0210 	orr.w	r2, r3, #16
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800144c:	f043 0201 	orr.w	r2, r3, #1
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001454:	2300      	movs	r3, #0
}
 8001456:	4618      	mov	r0, r3
 8001458:	3714      	adds	r7, #20
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr
 8001462:	bf00      	nop
 8001464:	20000000 	.word	0x20000000
 8001468:	431bde83 	.word	0x431bde83
 800146c:	fffff8fe 	.word	0xfffff8fe
 8001470:	40012300 	.word	0x40012300
 8001474:	40012000 	.word	0x40012000
 8001478:	40012200 	.word	0x40012200

0800147c <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b084      	sub	sp, #16
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
 8001484:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001486:	2300      	movs	r3, #0
 8001488:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	689b      	ldr	r3, [r3, #8]
 8001490:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001494:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001498:	d113      	bne.n	80014c2 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	689b      	ldr	r3, [r3, #8]
 80014a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80014a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80014a8:	d10b      	bne.n	80014c2 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ae:	f043 0220 	orr.w	r2, r3, #32
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	2200      	movs	r2, #0
 80014ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80014be:	2301      	movs	r3, #1
 80014c0:	e063      	b.n	800158a <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 80014c2:	f7ff fe99 	bl	80011f8 <HAL_GetTick>
 80014c6:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80014c8:	e021      	b.n	800150e <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014d0:	d01d      	beq.n	800150e <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d007      	beq.n	80014e8 <HAL_ADC_PollForConversion+0x6c>
 80014d8:	f7ff fe8e 	bl	80011f8 <HAL_GetTick>
 80014dc:	4602      	mov	r2, r0
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	1ad3      	subs	r3, r2, r3
 80014e2:	683a      	ldr	r2, [r7, #0]
 80014e4:	429a      	cmp	r2, r3
 80014e6:	d212      	bcs.n	800150e <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f003 0302 	and.w	r3, r3, #2
 80014f2:	2b02      	cmp	r3, #2
 80014f4:	d00b      	beq.n	800150e <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014fa:	f043 0204 	orr.w	r2, r3, #4
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	2200      	movs	r2, #0
 8001506:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 800150a:	2303      	movs	r3, #3
 800150c:	e03d      	b.n	800158a <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f003 0302 	and.w	r3, r3, #2
 8001518:	2b02      	cmp	r3, #2
 800151a:	d1d6      	bne.n	80014ca <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f06f 0212 	mvn.w	r2, #18
 8001524:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800152a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	689b      	ldr	r3, [r3, #8]
 8001538:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800153c:	2b00      	cmp	r3, #0
 800153e:	d123      	bne.n	8001588 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001544:	2b00      	cmp	r3, #0
 8001546:	d11f      	bne.n	8001588 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800154e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001552:	2b00      	cmp	r3, #0
 8001554:	d006      	beq.n	8001564 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	689b      	ldr	r3, [r3, #8]
 800155c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001560:	2b00      	cmp	r3, #0
 8001562:	d111      	bne.n	8001588 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001568:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001574:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001578:	2b00      	cmp	r3, #0
 800157a:	d105      	bne.n	8001588 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001580:	f043 0201 	orr.w	r2, r3, #1
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001588:	2300      	movs	r3, #0
}
 800158a:	4618      	mov	r0, r3
 800158c:	3710      	adds	r7, #16
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}

08001592 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001592:	b480      	push	{r7}
 8001594:	b083      	sub	sp, #12
 8001596:	af00      	add	r7, sp, #0
 8001598:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80015a0:	4618      	mov	r0, r3
 80015a2:	370c      	adds	r7, #12
 80015a4:	46bd      	mov	sp, r7
 80015a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015aa:	4770      	bx	lr

080015ac <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80015ac:	b480      	push	{r7}
 80015ae:	b085      	sub	sp, #20
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
 80015b4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80015b6:	2300      	movs	r3, #0
 80015b8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80015c0:	2b01      	cmp	r3, #1
 80015c2:	d101      	bne.n	80015c8 <HAL_ADC_ConfigChannel+0x1c>
 80015c4:	2302      	movs	r3, #2
 80015c6:	e136      	b.n	8001836 <HAL_ADC_ConfigChannel+0x28a>
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2201      	movs	r2, #1
 80015cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	2b09      	cmp	r3, #9
 80015d6:	d93a      	bls.n	800164e <HAL_ADC_ConfigChannel+0xa2>
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80015e0:	d035      	beq.n	800164e <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	68d9      	ldr	r1, [r3, #12]
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	b29b      	uxth	r3, r3
 80015ee:	461a      	mov	r2, r3
 80015f0:	4613      	mov	r3, r2
 80015f2:	005b      	lsls	r3, r3, #1
 80015f4:	4413      	add	r3, r2
 80015f6:	3b1e      	subs	r3, #30
 80015f8:	2207      	movs	r2, #7
 80015fa:	fa02 f303 	lsl.w	r3, r2, r3
 80015fe:	43da      	mvns	r2, r3
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	400a      	ands	r2, r1
 8001606:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4a8d      	ldr	r2, [pc, #564]	; (8001844 <HAL_ADC_ConfigChannel+0x298>)
 800160e:	4293      	cmp	r3, r2
 8001610:	d10a      	bne.n	8001628 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	68d9      	ldr	r1, [r3, #12]
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	689b      	ldr	r3, [r3, #8]
 800161c:	061a      	lsls	r2, r3, #24
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	430a      	orrs	r2, r1
 8001624:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001626:	e035      	b.n	8001694 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	68d9      	ldr	r1, [r3, #12]
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	689a      	ldr	r2, [r3, #8]
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	b29b      	uxth	r3, r3
 8001638:	4618      	mov	r0, r3
 800163a:	4603      	mov	r3, r0
 800163c:	005b      	lsls	r3, r3, #1
 800163e:	4403      	add	r3, r0
 8001640:	3b1e      	subs	r3, #30
 8001642:	409a      	lsls	r2, r3
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	430a      	orrs	r2, r1
 800164a:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800164c:	e022      	b.n	8001694 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	6919      	ldr	r1, [r3, #16]
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	b29b      	uxth	r3, r3
 800165a:	461a      	mov	r2, r3
 800165c:	4613      	mov	r3, r2
 800165e:	005b      	lsls	r3, r3, #1
 8001660:	4413      	add	r3, r2
 8001662:	2207      	movs	r2, #7
 8001664:	fa02 f303 	lsl.w	r3, r2, r3
 8001668:	43da      	mvns	r2, r3
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	400a      	ands	r2, r1
 8001670:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	6919      	ldr	r1, [r3, #16]
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	689a      	ldr	r2, [r3, #8]
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	b29b      	uxth	r3, r3
 8001682:	4618      	mov	r0, r3
 8001684:	4603      	mov	r3, r0
 8001686:	005b      	lsls	r3, r3, #1
 8001688:	4403      	add	r3, r0
 800168a:	409a      	lsls	r2, r3
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	430a      	orrs	r2, r1
 8001692:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	2b06      	cmp	r3, #6
 800169a:	d824      	bhi.n	80016e6 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	685a      	ldr	r2, [r3, #4]
 80016a6:	4613      	mov	r3, r2
 80016a8:	009b      	lsls	r3, r3, #2
 80016aa:	4413      	add	r3, r2
 80016ac:	3b05      	subs	r3, #5
 80016ae:	221f      	movs	r2, #31
 80016b0:	fa02 f303 	lsl.w	r3, r2, r3
 80016b4:	43da      	mvns	r2, r3
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	400a      	ands	r2, r1
 80016bc:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	b29b      	uxth	r3, r3
 80016ca:	4618      	mov	r0, r3
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	685a      	ldr	r2, [r3, #4]
 80016d0:	4613      	mov	r3, r2
 80016d2:	009b      	lsls	r3, r3, #2
 80016d4:	4413      	add	r3, r2
 80016d6:	3b05      	subs	r3, #5
 80016d8:	fa00 f203 	lsl.w	r2, r0, r3
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	430a      	orrs	r2, r1
 80016e2:	635a      	str	r2, [r3, #52]	; 0x34
 80016e4:	e04c      	b.n	8001780 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	2b0c      	cmp	r3, #12
 80016ec:	d824      	bhi.n	8001738 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	685a      	ldr	r2, [r3, #4]
 80016f8:	4613      	mov	r3, r2
 80016fa:	009b      	lsls	r3, r3, #2
 80016fc:	4413      	add	r3, r2
 80016fe:	3b23      	subs	r3, #35	; 0x23
 8001700:	221f      	movs	r2, #31
 8001702:	fa02 f303 	lsl.w	r3, r2, r3
 8001706:	43da      	mvns	r2, r3
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	400a      	ands	r2, r1
 800170e:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	b29b      	uxth	r3, r3
 800171c:	4618      	mov	r0, r3
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	685a      	ldr	r2, [r3, #4]
 8001722:	4613      	mov	r3, r2
 8001724:	009b      	lsls	r3, r3, #2
 8001726:	4413      	add	r3, r2
 8001728:	3b23      	subs	r3, #35	; 0x23
 800172a:	fa00 f203 	lsl.w	r2, r0, r3
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	430a      	orrs	r2, r1
 8001734:	631a      	str	r2, [r3, #48]	; 0x30
 8001736:	e023      	b.n	8001780 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	685a      	ldr	r2, [r3, #4]
 8001742:	4613      	mov	r3, r2
 8001744:	009b      	lsls	r3, r3, #2
 8001746:	4413      	add	r3, r2
 8001748:	3b41      	subs	r3, #65	; 0x41
 800174a:	221f      	movs	r2, #31
 800174c:	fa02 f303 	lsl.w	r3, r2, r3
 8001750:	43da      	mvns	r2, r3
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	400a      	ands	r2, r1
 8001758:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	b29b      	uxth	r3, r3
 8001766:	4618      	mov	r0, r3
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	685a      	ldr	r2, [r3, #4]
 800176c:	4613      	mov	r3, r2
 800176e:	009b      	lsls	r3, r3, #2
 8001770:	4413      	add	r3, r2
 8001772:	3b41      	subs	r3, #65	; 0x41
 8001774:	fa00 f203 	lsl.w	r2, r0, r3
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	430a      	orrs	r2, r1
 800177e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a30      	ldr	r2, [pc, #192]	; (8001848 <HAL_ADC_ConfigChannel+0x29c>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d10a      	bne.n	80017a0 <HAL_ADC_ConfigChannel+0x1f4>
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001792:	d105      	bne.n	80017a0 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8001794:	4b2d      	ldr	r3, [pc, #180]	; (800184c <HAL_ADC_ConfigChannel+0x2a0>)
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	4a2c      	ldr	r2, [pc, #176]	; (800184c <HAL_ADC_ConfigChannel+0x2a0>)
 800179a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800179e:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a28      	ldr	r2, [pc, #160]	; (8001848 <HAL_ADC_ConfigChannel+0x29c>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d10f      	bne.n	80017ca <HAL_ADC_ConfigChannel+0x21e>
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	2b12      	cmp	r3, #18
 80017b0:	d10b      	bne.n	80017ca <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 80017b2:	4b26      	ldr	r3, [pc, #152]	; (800184c <HAL_ADC_ConfigChannel+0x2a0>)
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	4a25      	ldr	r2, [pc, #148]	; (800184c <HAL_ADC_ConfigChannel+0x2a0>)
 80017b8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80017bc:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80017be:	4b23      	ldr	r3, [pc, #140]	; (800184c <HAL_ADC_ConfigChannel+0x2a0>)
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	4a22      	ldr	r2, [pc, #136]	; (800184c <HAL_ADC_ConfigChannel+0x2a0>)
 80017c4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80017c8:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4a1e      	ldr	r2, [pc, #120]	; (8001848 <HAL_ADC_ConfigChannel+0x29c>)
 80017d0:	4293      	cmp	r3, r2
 80017d2:	d12b      	bne.n	800182c <HAL_ADC_ConfigChannel+0x280>
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4a1a      	ldr	r2, [pc, #104]	; (8001844 <HAL_ADC_ConfigChannel+0x298>)
 80017da:	4293      	cmp	r3, r2
 80017dc:	d003      	beq.n	80017e6 <HAL_ADC_ConfigChannel+0x23a>
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	2b11      	cmp	r3, #17
 80017e4:	d122      	bne.n	800182c <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 80017e6:	4b19      	ldr	r3, [pc, #100]	; (800184c <HAL_ADC_ConfigChannel+0x2a0>)
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	4a18      	ldr	r2, [pc, #96]	; (800184c <HAL_ADC_ConfigChannel+0x2a0>)
 80017ec:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80017f0:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80017f2:	4b16      	ldr	r3, [pc, #88]	; (800184c <HAL_ADC_ConfigChannel+0x2a0>)
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	4a15      	ldr	r2, [pc, #84]	; (800184c <HAL_ADC_ConfigChannel+0x2a0>)
 80017f8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80017fc:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4a10      	ldr	r2, [pc, #64]	; (8001844 <HAL_ADC_ConfigChannel+0x298>)
 8001804:	4293      	cmp	r3, r2
 8001806:	d111      	bne.n	800182c <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001808:	4b11      	ldr	r3, [pc, #68]	; (8001850 <HAL_ADC_ConfigChannel+0x2a4>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a11      	ldr	r2, [pc, #68]	; (8001854 <HAL_ADC_ConfigChannel+0x2a8>)
 800180e:	fba2 2303 	umull	r2, r3, r2, r3
 8001812:	0c9a      	lsrs	r2, r3, #18
 8001814:	4613      	mov	r3, r2
 8001816:	009b      	lsls	r3, r3, #2
 8001818:	4413      	add	r3, r2
 800181a:	005b      	lsls	r3, r3, #1
 800181c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800181e:	e002      	b.n	8001826 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	3b01      	subs	r3, #1
 8001824:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d1f9      	bne.n	8001820 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	2200      	movs	r2, #0
 8001830:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001834:	2300      	movs	r3, #0
}
 8001836:	4618      	mov	r0, r3
 8001838:	3714      	adds	r7, #20
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr
 8001842:	bf00      	nop
 8001844:	10000012 	.word	0x10000012
 8001848:	40012000 	.word	0x40012000
 800184c:	40012300 	.word	0x40012300
 8001850:	20000000 	.word	0x20000000
 8001854:	431bde83 	.word	0x431bde83

08001858 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001858:	b480      	push	{r7}
 800185a:	b083      	sub	sp, #12
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001860:	4b78      	ldr	r3, [pc, #480]	; (8001a44 <ADC_Init+0x1ec>)
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	4a77      	ldr	r2, [pc, #476]	; (8001a44 <ADC_Init+0x1ec>)
 8001866:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800186a:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 800186c:	4b75      	ldr	r3, [pc, #468]	; (8001a44 <ADC_Init+0x1ec>)
 800186e:	685a      	ldr	r2, [r3, #4]
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	4973      	ldr	r1, [pc, #460]	; (8001a44 <ADC_Init+0x1ec>)
 8001876:	4313      	orrs	r3, r2
 8001878:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	685a      	ldr	r2, [r3, #4]
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001888:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	6859      	ldr	r1, [r3, #4]
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	691b      	ldr	r3, [r3, #16]
 8001894:	021a      	lsls	r2, r3, #8
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	430a      	orrs	r2, r1
 800189c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	685a      	ldr	r2, [r3, #4]
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80018ac:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	6859      	ldr	r1, [r3, #4]
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	689a      	ldr	r2, [r3, #8]
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	430a      	orrs	r2, r1
 80018be:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	689a      	ldr	r2, [r3, #8]
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80018ce:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	6899      	ldr	r1, [r3, #8]
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	68da      	ldr	r2, [r3, #12]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	430a      	orrs	r2, r1
 80018e0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018e6:	4a58      	ldr	r2, [pc, #352]	; (8001a48 <ADC_Init+0x1f0>)
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d022      	beq.n	8001932 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	689a      	ldr	r2, [r3, #8]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80018fa:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	6899      	ldr	r1, [r3, #8]
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	430a      	orrs	r2, r1
 800190c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	689a      	ldr	r2, [r3, #8]
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800191c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	6899      	ldr	r1, [r3, #8]
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	430a      	orrs	r2, r1
 800192e:	609a      	str	r2, [r3, #8]
 8001930:	e00f      	b.n	8001952 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	689a      	ldr	r2, [r3, #8]
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001940:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	689a      	ldr	r2, [r3, #8]
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001950:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	689a      	ldr	r2, [r3, #8]
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f022 0202 	bic.w	r2, r2, #2
 8001960:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	6899      	ldr	r1, [r3, #8]
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	699b      	ldr	r3, [r3, #24]
 800196c:	005a      	lsls	r2, r3, #1
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	430a      	orrs	r2, r1
 8001974:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	f893 3020 	ldrb.w	r3, [r3, #32]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d01b      	beq.n	80019b8 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	685a      	ldr	r2, [r3, #4]
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800198e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	685a      	ldr	r2, [r3, #4]
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800199e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	6859      	ldr	r1, [r3, #4]
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019aa:	3b01      	subs	r3, #1
 80019ac:	035a      	lsls	r2, r3, #13
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	430a      	orrs	r2, r1
 80019b4:	605a      	str	r2, [r3, #4]
 80019b6:	e007      	b.n	80019c8 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	685a      	ldr	r2, [r3, #4]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80019c6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80019d6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	69db      	ldr	r3, [r3, #28]
 80019e2:	3b01      	subs	r3, #1
 80019e4:	051a      	lsls	r2, r3, #20
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	430a      	orrs	r2, r1
 80019ec:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	689a      	ldr	r2, [r3, #8]
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80019fc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	6899      	ldr	r1, [r3, #8]
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001a0a:	025a      	lsls	r2, r3, #9
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	430a      	orrs	r2, r1
 8001a12:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	689a      	ldr	r2, [r3, #8]
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001a22:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	6899      	ldr	r1, [r3, #8]
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	695b      	ldr	r3, [r3, #20]
 8001a2e:	029a      	lsls	r2, r3, #10
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	430a      	orrs	r2, r1
 8001a36:	609a      	str	r2, [r3, #8]
}
 8001a38:	bf00      	nop
 8001a3a:	370c      	adds	r7, #12
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a42:	4770      	bx	lr
 8001a44:	40012300 	.word	0x40012300
 8001a48:	0f000001 	.word	0x0f000001

08001a4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b085      	sub	sp, #20
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	f003 0307 	and.w	r3, r3, #7
 8001a5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a5c:	4b0b      	ldr	r3, [pc, #44]	; (8001a8c <__NVIC_SetPriorityGrouping+0x40>)
 8001a5e:	68db      	ldr	r3, [r3, #12]
 8001a60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a62:	68ba      	ldr	r2, [r7, #8]
 8001a64:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a68:	4013      	ands	r3, r2
 8001a6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a70:	68bb      	ldr	r3, [r7, #8]
 8001a72:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001a74:	4b06      	ldr	r3, [pc, #24]	; (8001a90 <__NVIC_SetPriorityGrouping+0x44>)
 8001a76:	4313      	orrs	r3, r2
 8001a78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a7a:	4a04      	ldr	r2, [pc, #16]	; (8001a8c <__NVIC_SetPriorityGrouping+0x40>)
 8001a7c:	68bb      	ldr	r3, [r7, #8]
 8001a7e:	60d3      	str	r3, [r2, #12]
}
 8001a80:	bf00      	nop
 8001a82:	3714      	adds	r7, #20
 8001a84:	46bd      	mov	sp, r7
 8001a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8a:	4770      	bx	lr
 8001a8c:	e000ed00 	.word	0xe000ed00
 8001a90:	05fa0000 	.word	0x05fa0000

08001a94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a94:	b480      	push	{r7}
 8001a96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a98:	4b04      	ldr	r3, [pc, #16]	; (8001aac <__NVIC_GetPriorityGrouping+0x18>)
 8001a9a:	68db      	ldr	r3, [r3, #12]
 8001a9c:	0a1b      	lsrs	r3, r3, #8
 8001a9e:	f003 0307 	and.w	r3, r3, #7
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aaa:	4770      	bx	lr
 8001aac:	e000ed00 	.word	0xe000ed00

08001ab0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b083      	sub	sp, #12
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	6039      	str	r1, [r7, #0]
 8001aba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001abc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	db0a      	blt.n	8001ada <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	b2da      	uxtb	r2, r3
 8001ac8:	490c      	ldr	r1, [pc, #48]	; (8001afc <__NVIC_SetPriority+0x4c>)
 8001aca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ace:	0112      	lsls	r2, r2, #4
 8001ad0:	b2d2      	uxtb	r2, r2
 8001ad2:	440b      	add	r3, r1
 8001ad4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ad8:	e00a      	b.n	8001af0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	b2da      	uxtb	r2, r3
 8001ade:	4908      	ldr	r1, [pc, #32]	; (8001b00 <__NVIC_SetPriority+0x50>)
 8001ae0:	79fb      	ldrb	r3, [r7, #7]
 8001ae2:	f003 030f 	and.w	r3, r3, #15
 8001ae6:	3b04      	subs	r3, #4
 8001ae8:	0112      	lsls	r2, r2, #4
 8001aea:	b2d2      	uxtb	r2, r2
 8001aec:	440b      	add	r3, r1
 8001aee:	761a      	strb	r2, [r3, #24]
}
 8001af0:	bf00      	nop
 8001af2:	370c      	adds	r7, #12
 8001af4:	46bd      	mov	sp, r7
 8001af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afa:	4770      	bx	lr
 8001afc:	e000e100 	.word	0xe000e100
 8001b00:	e000ed00 	.word	0xe000ed00

08001b04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b089      	sub	sp, #36	; 0x24
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	60f8      	str	r0, [r7, #12]
 8001b0c:	60b9      	str	r1, [r7, #8]
 8001b0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	f003 0307 	and.w	r3, r3, #7
 8001b16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b18:	69fb      	ldr	r3, [r7, #28]
 8001b1a:	f1c3 0307 	rsb	r3, r3, #7
 8001b1e:	2b04      	cmp	r3, #4
 8001b20:	bf28      	it	cs
 8001b22:	2304      	movcs	r3, #4
 8001b24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b26:	69fb      	ldr	r3, [r7, #28]
 8001b28:	3304      	adds	r3, #4
 8001b2a:	2b06      	cmp	r3, #6
 8001b2c:	d902      	bls.n	8001b34 <NVIC_EncodePriority+0x30>
 8001b2e:	69fb      	ldr	r3, [r7, #28]
 8001b30:	3b03      	subs	r3, #3
 8001b32:	e000      	b.n	8001b36 <NVIC_EncodePriority+0x32>
 8001b34:	2300      	movs	r3, #0
 8001b36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b38:	f04f 32ff 	mov.w	r2, #4294967295
 8001b3c:	69bb      	ldr	r3, [r7, #24]
 8001b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b42:	43da      	mvns	r2, r3
 8001b44:	68bb      	ldr	r3, [r7, #8]
 8001b46:	401a      	ands	r2, r3
 8001b48:	697b      	ldr	r3, [r7, #20]
 8001b4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b4c:	f04f 31ff 	mov.w	r1, #4294967295
 8001b50:	697b      	ldr	r3, [r7, #20]
 8001b52:	fa01 f303 	lsl.w	r3, r1, r3
 8001b56:	43d9      	mvns	r1, r3
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b5c:	4313      	orrs	r3, r2
         );
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	3724      	adds	r7, #36	; 0x24
 8001b62:	46bd      	mov	sp, r7
 8001b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b68:	4770      	bx	lr
	...

08001b6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b082      	sub	sp, #8
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	3b01      	subs	r3, #1
 8001b78:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b7c:	d301      	bcc.n	8001b82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b7e:	2301      	movs	r3, #1
 8001b80:	e00f      	b.n	8001ba2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b82:	4a0a      	ldr	r2, [pc, #40]	; (8001bac <SysTick_Config+0x40>)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	3b01      	subs	r3, #1
 8001b88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b8a:	210f      	movs	r1, #15
 8001b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8001b90:	f7ff ff8e 	bl	8001ab0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b94:	4b05      	ldr	r3, [pc, #20]	; (8001bac <SysTick_Config+0x40>)
 8001b96:	2200      	movs	r2, #0
 8001b98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b9a:	4b04      	ldr	r3, [pc, #16]	; (8001bac <SysTick_Config+0x40>)
 8001b9c:	2207      	movs	r2, #7
 8001b9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ba0:	2300      	movs	r3, #0
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	3708      	adds	r7, #8
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	e000e010 	.word	0xe000e010

08001bb0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b082      	sub	sp, #8
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bb8:	6878      	ldr	r0, [r7, #4]
 8001bba:	f7ff ff47 	bl	8001a4c <__NVIC_SetPriorityGrouping>
}
 8001bbe:	bf00      	nop
 8001bc0:	3708      	adds	r7, #8
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}

08001bc6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001bc6:	b580      	push	{r7, lr}
 8001bc8:	b086      	sub	sp, #24
 8001bca:	af00      	add	r7, sp, #0
 8001bcc:	4603      	mov	r3, r0
 8001bce:	60b9      	str	r1, [r7, #8]
 8001bd0:	607a      	str	r2, [r7, #4]
 8001bd2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001bd8:	f7ff ff5c 	bl	8001a94 <__NVIC_GetPriorityGrouping>
 8001bdc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bde:	687a      	ldr	r2, [r7, #4]
 8001be0:	68b9      	ldr	r1, [r7, #8]
 8001be2:	6978      	ldr	r0, [r7, #20]
 8001be4:	f7ff ff8e 	bl	8001b04 <NVIC_EncodePriority>
 8001be8:	4602      	mov	r2, r0
 8001bea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bee:	4611      	mov	r1, r2
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f7ff ff5d 	bl	8001ab0 <__NVIC_SetPriority>
}
 8001bf6:	bf00      	nop
 8001bf8:	3718      	adds	r7, #24
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}

08001bfe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bfe:	b580      	push	{r7, lr}
 8001c00:	b082      	sub	sp, #8
 8001c02:	af00      	add	r7, sp, #0
 8001c04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c06:	6878      	ldr	r0, [r7, #4]
 8001c08:	f7ff ffb0 	bl	8001b6c <SysTick_Config>
 8001c0c:	4603      	mov	r3, r0
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	3708      	adds	r7, #8
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}
	...

08001c18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b089      	sub	sp, #36	; 0x24
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
 8001c20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001c22:	2300      	movs	r3, #0
 8001c24:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001c26:	2300      	movs	r3, #0
 8001c28:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001c32:	2300      	movs	r3, #0
 8001c34:	61fb      	str	r3, [r7, #28]
 8001c36:	e175      	b.n	8001f24 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001c38:	2201      	movs	r2, #1
 8001c3a:	69fb      	ldr	r3, [r7, #28]
 8001c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c40:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	697a      	ldr	r2, [r7, #20]
 8001c48:	4013      	ands	r3, r2
 8001c4a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c4c:	693a      	ldr	r2, [r7, #16]
 8001c4e:	697b      	ldr	r3, [r7, #20]
 8001c50:	429a      	cmp	r2, r3
 8001c52:	f040 8164 	bne.w	8001f1e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	f003 0303 	and.w	r3, r3, #3
 8001c5e:	2b01      	cmp	r3, #1
 8001c60:	d005      	beq.n	8001c6e <HAL_GPIO_Init+0x56>
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	f003 0303 	and.w	r3, r3, #3
 8001c6a:	2b02      	cmp	r3, #2
 8001c6c:	d130      	bne.n	8001cd0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	689b      	ldr	r3, [r3, #8]
 8001c72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001c74:	69fb      	ldr	r3, [r7, #28]
 8001c76:	005b      	lsls	r3, r3, #1
 8001c78:	2203      	movs	r2, #3
 8001c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7e:	43db      	mvns	r3, r3
 8001c80:	69ba      	ldr	r2, [r7, #24]
 8001c82:	4013      	ands	r3, r2
 8001c84:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	68da      	ldr	r2, [r3, #12]
 8001c8a:	69fb      	ldr	r3, [r7, #28]
 8001c8c:	005b      	lsls	r3, r3, #1
 8001c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c92:	69ba      	ldr	r2, [r7, #24]
 8001c94:	4313      	orrs	r3, r2
 8001c96:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	69ba      	ldr	r2, [r7, #24]
 8001c9c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ca4:	2201      	movs	r2, #1
 8001ca6:	69fb      	ldr	r3, [r7, #28]
 8001ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cac:	43db      	mvns	r3, r3
 8001cae:	69ba      	ldr	r2, [r7, #24]
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	091b      	lsrs	r3, r3, #4
 8001cba:	f003 0201 	and.w	r2, r3, #1
 8001cbe:	69fb      	ldr	r3, [r7, #28]
 8001cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc4:	69ba      	ldr	r2, [r7, #24]
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	69ba      	ldr	r2, [r7, #24]
 8001cce:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	f003 0303 	and.w	r3, r3, #3
 8001cd8:	2b03      	cmp	r3, #3
 8001cda:	d017      	beq.n	8001d0c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	68db      	ldr	r3, [r3, #12]
 8001ce0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001ce2:	69fb      	ldr	r3, [r7, #28]
 8001ce4:	005b      	lsls	r3, r3, #1
 8001ce6:	2203      	movs	r2, #3
 8001ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cec:	43db      	mvns	r3, r3
 8001cee:	69ba      	ldr	r2, [r7, #24]
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	689a      	ldr	r2, [r3, #8]
 8001cf8:	69fb      	ldr	r3, [r7, #28]
 8001cfa:	005b      	lsls	r3, r3, #1
 8001cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001d00:	69ba      	ldr	r2, [r7, #24]
 8001d02:	4313      	orrs	r3, r2
 8001d04:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	69ba      	ldr	r2, [r7, #24]
 8001d0a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	f003 0303 	and.w	r3, r3, #3
 8001d14:	2b02      	cmp	r3, #2
 8001d16:	d123      	bne.n	8001d60 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001d18:	69fb      	ldr	r3, [r7, #28]
 8001d1a:	08da      	lsrs	r2, r3, #3
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	3208      	adds	r2, #8
 8001d20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001d26:	69fb      	ldr	r3, [r7, #28]
 8001d28:	f003 0307 	and.w	r3, r3, #7
 8001d2c:	009b      	lsls	r3, r3, #2
 8001d2e:	220f      	movs	r2, #15
 8001d30:	fa02 f303 	lsl.w	r3, r2, r3
 8001d34:	43db      	mvns	r3, r3
 8001d36:	69ba      	ldr	r2, [r7, #24]
 8001d38:	4013      	ands	r3, r2
 8001d3a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	691a      	ldr	r2, [r3, #16]
 8001d40:	69fb      	ldr	r3, [r7, #28]
 8001d42:	f003 0307 	and.w	r3, r3, #7
 8001d46:	009b      	lsls	r3, r3, #2
 8001d48:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4c:	69ba      	ldr	r2, [r7, #24]
 8001d4e:	4313      	orrs	r3, r2
 8001d50:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001d52:	69fb      	ldr	r3, [r7, #28]
 8001d54:	08da      	lsrs	r2, r3, #3
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	3208      	adds	r2, #8
 8001d5a:	69b9      	ldr	r1, [r7, #24]
 8001d5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001d66:	69fb      	ldr	r3, [r7, #28]
 8001d68:	005b      	lsls	r3, r3, #1
 8001d6a:	2203      	movs	r2, #3
 8001d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d70:	43db      	mvns	r3, r3
 8001d72:	69ba      	ldr	r2, [r7, #24]
 8001d74:	4013      	ands	r3, r2
 8001d76:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	f003 0203 	and.w	r2, r3, #3
 8001d80:	69fb      	ldr	r3, [r7, #28]
 8001d82:	005b      	lsls	r3, r3, #1
 8001d84:	fa02 f303 	lsl.w	r3, r2, r3
 8001d88:	69ba      	ldr	r2, [r7, #24]
 8001d8a:	4313      	orrs	r3, r2
 8001d8c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	69ba      	ldr	r2, [r7, #24]
 8001d92:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	f000 80be 	beq.w	8001f1e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001da2:	4b66      	ldr	r3, [pc, #408]	; (8001f3c <HAL_GPIO_Init+0x324>)
 8001da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001da6:	4a65      	ldr	r2, [pc, #404]	; (8001f3c <HAL_GPIO_Init+0x324>)
 8001da8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001dac:	6453      	str	r3, [r2, #68]	; 0x44
 8001dae:	4b63      	ldr	r3, [pc, #396]	; (8001f3c <HAL_GPIO_Init+0x324>)
 8001db0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001db2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001db6:	60fb      	str	r3, [r7, #12]
 8001db8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001dba:	4a61      	ldr	r2, [pc, #388]	; (8001f40 <HAL_GPIO_Init+0x328>)
 8001dbc:	69fb      	ldr	r3, [r7, #28]
 8001dbe:	089b      	lsrs	r3, r3, #2
 8001dc0:	3302      	adds	r3, #2
 8001dc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001dc8:	69fb      	ldr	r3, [r7, #28]
 8001dca:	f003 0303 	and.w	r3, r3, #3
 8001dce:	009b      	lsls	r3, r3, #2
 8001dd0:	220f      	movs	r2, #15
 8001dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd6:	43db      	mvns	r3, r3
 8001dd8:	69ba      	ldr	r2, [r7, #24]
 8001dda:	4013      	ands	r3, r2
 8001ddc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	4a58      	ldr	r2, [pc, #352]	; (8001f44 <HAL_GPIO_Init+0x32c>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d037      	beq.n	8001e56 <HAL_GPIO_Init+0x23e>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	4a57      	ldr	r2, [pc, #348]	; (8001f48 <HAL_GPIO_Init+0x330>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d031      	beq.n	8001e52 <HAL_GPIO_Init+0x23a>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	4a56      	ldr	r2, [pc, #344]	; (8001f4c <HAL_GPIO_Init+0x334>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d02b      	beq.n	8001e4e <HAL_GPIO_Init+0x236>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	4a55      	ldr	r2, [pc, #340]	; (8001f50 <HAL_GPIO_Init+0x338>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d025      	beq.n	8001e4a <HAL_GPIO_Init+0x232>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	4a54      	ldr	r2, [pc, #336]	; (8001f54 <HAL_GPIO_Init+0x33c>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d01f      	beq.n	8001e46 <HAL_GPIO_Init+0x22e>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	4a53      	ldr	r2, [pc, #332]	; (8001f58 <HAL_GPIO_Init+0x340>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d019      	beq.n	8001e42 <HAL_GPIO_Init+0x22a>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	4a52      	ldr	r2, [pc, #328]	; (8001f5c <HAL_GPIO_Init+0x344>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d013      	beq.n	8001e3e <HAL_GPIO_Init+0x226>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	4a51      	ldr	r2, [pc, #324]	; (8001f60 <HAL_GPIO_Init+0x348>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d00d      	beq.n	8001e3a <HAL_GPIO_Init+0x222>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	4a50      	ldr	r2, [pc, #320]	; (8001f64 <HAL_GPIO_Init+0x34c>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d007      	beq.n	8001e36 <HAL_GPIO_Init+0x21e>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	4a4f      	ldr	r2, [pc, #316]	; (8001f68 <HAL_GPIO_Init+0x350>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d101      	bne.n	8001e32 <HAL_GPIO_Init+0x21a>
 8001e2e:	2309      	movs	r3, #9
 8001e30:	e012      	b.n	8001e58 <HAL_GPIO_Init+0x240>
 8001e32:	230a      	movs	r3, #10
 8001e34:	e010      	b.n	8001e58 <HAL_GPIO_Init+0x240>
 8001e36:	2308      	movs	r3, #8
 8001e38:	e00e      	b.n	8001e58 <HAL_GPIO_Init+0x240>
 8001e3a:	2307      	movs	r3, #7
 8001e3c:	e00c      	b.n	8001e58 <HAL_GPIO_Init+0x240>
 8001e3e:	2306      	movs	r3, #6
 8001e40:	e00a      	b.n	8001e58 <HAL_GPIO_Init+0x240>
 8001e42:	2305      	movs	r3, #5
 8001e44:	e008      	b.n	8001e58 <HAL_GPIO_Init+0x240>
 8001e46:	2304      	movs	r3, #4
 8001e48:	e006      	b.n	8001e58 <HAL_GPIO_Init+0x240>
 8001e4a:	2303      	movs	r3, #3
 8001e4c:	e004      	b.n	8001e58 <HAL_GPIO_Init+0x240>
 8001e4e:	2302      	movs	r3, #2
 8001e50:	e002      	b.n	8001e58 <HAL_GPIO_Init+0x240>
 8001e52:	2301      	movs	r3, #1
 8001e54:	e000      	b.n	8001e58 <HAL_GPIO_Init+0x240>
 8001e56:	2300      	movs	r3, #0
 8001e58:	69fa      	ldr	r2, [r7, #28]
 8001e5a:	f002 0203 	and.w	r2, r2, #3
 8001e5e:	0092      	lsls	r2, r2, #2
 8001e60:	4093      	lsls	r3, r2
 8001e62:	69ba      	ldr	r2, [r7, #24]
 8001e64:	4313      	orrs	r3, r2
 8001e66:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001e68:	4935      	ldr	r1, [pc, #212]	; (8001f40 <HAL_GPIO_Init+0x328>)
 8001e6a:	69fb      	ldr	r3, [r7, #28]
 8001e6c:	089b      	lsrs	r3, r3, #2
 8001e6e:	3302      	adds	r3, #2
 8001e70:	69ba      	ldr	r2, [r7, #24]
 8001e72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e76:	4b3d      	ldr	r3, [pc, #244]	; (8001f6c <HAL_GPIO_Init+0x354>)
 8001e78:	689b      	ldr	r3, [r3, #8]
 8001e7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e7c:	693b      	ldr	r3, [r7, #16]
 8001e7e:	43db      	mvns	r3, r3
 8001e80:	69ba      	ldr	r2, [r7, #24]
 8001e82:	4013      	ands	r3, r2
 8001e84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d003      	beq.n	8001e9a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001e92:	69ba      	ldr	r2, [r7, #24]
 8001e94:	693b      	ldr	r3, [r7, #16]
 8001e96:	4313      	orrs	r3, r2
 8001e98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e9a:	4a34      	ldr	r2, [pc, #208]	; (8001f6c <HAL_GPIO_Init+0x354>)
 8001e9c:	69bb      	ldr	r3, [r7, #24]
 8001e9e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ea0:	4b32      	ldr	r3, [pc, #200]	; (8001f6c <HAL_GPIO_Init+0x354>)
 8001ea2:	68db      	ldr	r3, [r3, #12]
 8001ea4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ea6:	693b      	ldr	r3, [r7, #16]
 8001ea8:	43db      	mvns	r3, r3
 8001eaa:	69ba      	ldr	r2, [r7, #24]
 8001eac:	4013      	ands	r3, r2
 8001eae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d003      	beq.n	8001ec4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001ebc:	69ba      	ldr	r2, [r7, #24]
 8001ebe:	693b      	ldr	r3, [r7, #16]
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ec4:	4a29      	ldr	r2, [pc, #164]	; (8001f6c <HAL_GPIO_Init+0x354>)
 8001ec6:	69bb      	ldr	r3, [r7, #24]
 8001ec8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001eca:	4b28      	ldr	r3, [pc, #160]	; (8001f6c <HAL_GPIO_Init+0x354>)
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ed0:	693b      	ldr	r3, [r7, #16]
 8001ed2:	43db      	mvns	r3, r3
 8001ed4:	69ba      	ldr	r2, [r7, #24]
 8001ed6:	4013      	ands	r3, r2
 8001ed8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d003      	beq.n	8001eee <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001ee6:	69ba      	ldr	r2, [r7, #24]
 8001ee8:	693b      	ldr	r3, [r7, #16]
 8001eea:	4313      	orrs	r3, r2
 8001eec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001eee:	4a1f      	ldr	r2, [pc, #124]	; (8001f6c <HAL_GPIO_Init+0x354>)
 8001ef0:	69bb      	ldr	r3, [r7, #24]
 8001ef2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ef4:	4b1d      	ldr	r3, [pc, #116]	; (8001f6c <HAL_GPIO_Init+0x354>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001efa:	693b      	ldr	r3, [r7, #16]
 8001efc:	43db      	mvns	r3, r3
 8001efe:	69ba      	ldr	r2, [r7, #24]
 8001f00:	4013      	ands	r3, r2
 8001f02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d003      	beq.n	8001f18 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001f10:	69ba      	ldr	r2, [r7, #24]
 8001f12:	693b      	ldr	r3, [r7, #16]
 8001f14:	4313      	orrs	r3, r2
 8001f16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f18:	4a14      	ldr	r2, [pc, #80]	; (8001f6c <HAL_GPIO_Init+0x354>)
 8001f1a:	69bb      	ldr	r3, [r7, #24]
 8001f1c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001f1e:	69fb      	ldr	r3, [r7, #28]
 8001f20:	3301      	adds	r3, #1
 8001f22:	61fb      	str	r3, [r7, #28]
 8001f24:	69fb      	ldr	r3, [r7, #28]
 8001f26:	2b0f      	cmp	r3, #15
 8001f28:	f67f ae86 	bls.w	8001c38 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001f2c:	bf00      	nop
 8001f2e:	bf00      	nop
 8001f30:	3724      	adds	r7, #36	; 0x24
 8001f32:	46bd      	mov	sp, r7
 8001f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f38:	4770      	bx	lr
 8001f3a:	bf00      	nop
 8001f3c:	40023800 	.word	0x40023800
 8001f40:	40013800 	.word	0x40013800
 8001f44:	40020000 	.word	0x40020000
 8001f48:	40020400 	.word	0x40020400
 8001f4c:	40020800 	.word	0x40020800
 8001f50:	40020c00 	.word	0x40020c00
 8001f54:	40021000 	.word	0x40021000
 8001f58:	40021400 	.word	0x40021400
 8001f5c:	40021800 	.word	0x40021800
 8001f60:	40021c00 	.word	0x40021c00
 8001f64:	40022000 	.word	0x40022000
 8001f68:	40022400 	.word	0x40022400
 8001f6c:	40013c00 	.word	0x40013c00

08001f70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b083      	sub	sp, #12
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
 8001f78:	460b      	mov	r3, r1
 8001f7a:	807b      	strh	r3, [r7, #2]
 8001f7c:	4613      	mov	r3, r2
 8001f7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f80:	787b      	ldrb	r3, [r7, #1]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d003      	beq.n	8001f8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f86:	887a      	ldrh	r2, [r7, #2]
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001f8c:	e003      	b.n	8001f96 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001f8e:	887b      	ldrh	r3, [r7, #2]
 8001f90:	041a      	lsls	r2, r3, #16
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	619a      	str	r2, [r3, #24]
}
 8001f96:	bf00      	nop
 8001f98:	370c      	adds	r7, #12
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa0:	4770      	bx	lr
	...

08001fa4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b086      	sub	sp, #24
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001fac:	2300      	movs	r3, #0
 8001fae:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d101      	bne.n	8001fba <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	e29b      	b.n	80024f2 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f003 0301 	and.w	r3, r3, #1
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	f000 8087 	beq.w	80020d6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001fc8:	4b96      	ldr	r3, [pc, #600]	; (8002224 <HAL_RCC_OscConfig+0x280>)
 8001fca:	689b      	ldr	r3, [r3, #8]
 8001fcc:	f003 030c 	and.w	r3, r3, #12
 8001fd0:	2b04      	cmp	r3, #4
 8001fd2:	d00c      	beq.n	8001fee <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001fd4:	4b93      	ldr	r3, [pc, #588]	; (8002224 <HAL_RCC_OscConfig+0x280>)
 8001fd6:	689b      	ldr	r3, [r3, #8]
 8001fd8:	f003 030c 	and.w	r3, r3, #12
 8001fdc:	2b08      	cmp	r3, #8
 8001fde:	d112      	bne.n	8002006 <HAL_RCC_OscConfig+0x62>
 8001fe0:	4b90      	ldr	r3, [pc, #576]	; (8002224 <HAL_RCC_OscConfig+0x280>)
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fe8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001fec:	d10b      	bne.n	8002006 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fee:	4b8d      	ldr	r3, [pc, #564]	; (8002224 <HAL_RCC_OscConfig+0x280>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d06c      	beq.n	80020d4 <HAL_RCC_OscConfig+0x130>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d168      	bne.n	80020d4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002002:	2301      	movs	r3, #1
 8002004:	e275      	b.n	80024f2 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800200e:	d106      	bne.n	800201e <HAL_RCC_OscConfig+0x7a>
 8002010:	4b84      	ldr	r3, [pc, #528]	; (8002224 <HAL_RCC_OscConfig+0x280>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a83      	ldr	r2, [pc, #524]	; (8002224 <HAL_RCC_OscConfig+0x280>)
 8002016:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800201a:	6013      	str	r3, [r2, #0]
 800201c:	e02e      	b.n	800207c <HAL_RCC_OscConfig+0xd8>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d10c      	bne.n	8002040 <HAL_RCC_OscConfig+0x9c>
 8002026:	4b7f      	ldr	r3, [pc, #508]	; (8002224 <HAL_RCC_OscConfig+0x280>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4a7e      	ldr	r2, [pc, #504]	; (8002224 <HAL_RCC_OscConfig+0x280>)
 800202c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002030:	6013      	str	r3, [r2, #0]
 8002032:	4b7c      	ldr	r3, [pc, #496]	; (8002224 <HAL_RCC_OscConfig+0x280>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4a7b      	ldr	r2, [pc, #492]	; (8002224 <HAL_RCC_OscConfig+0x280>)
 8002038:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800203c:	6013      	str	r3, [r2, #0]
 800203e:	e01d      	b.n	800207c <HAL_RCC_OscConfig+0xd8>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002048:	d10c      	bne.n	8002064 <HAL_RCC_OscConfig+0xc0>
 800204a:	4b76      	ldr	r3, [pc, #472]	; (8002224 <HAL_RCC_OscConfig+0x280>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4a75      	ldr	r2, [pc, #468]	; (8002224 <HAL_RCC_OscConfig+0x280>)
 8002050:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002054:	6013      	str	r3, [r2, #0]
 8002056:	4b73      	ldr	r3, [pc, #460]	; (8002224 <HAL_RCC_OscConfig+0x280>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4a72      	ldr	r2, [pc, #456]	; (8002224 <HAL_RCC_OscConfig+0x280>)
 800205c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002060:	6013      	str	r3, [r2, #0]
 8002062:	e00b      	b.n	800207c <HAL_RCC_OscConfig+0xd8>
 8002064:	4b6f      	ldr	r3, [pc, #444]	; (8002224 <HAL_RCC_OscConfig+0x280>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4a6e      	ldr	r2, [pc, #440]	; (8002224 <HAL_RCC_OscConfig+0x280>)
 800206a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800206e:	6013      	str	r3, [r2, #0]
 8002070:	4b6c      	ldr	r3, [pc, #432]	; (8002224 <HAL_RCC_OscConfig+0x280>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a6b      	ldr	r2, [pc, #428]	; (8002224 <HAL_RCC_OscConfig+0x280>)
 8002076:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800207a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d013      	beq.n	80020ac <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002084:	f7ff f8b8 	bl	80011f8 <HAL_GetTick>
 8002088:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800208a:	e008      	b.n	800209e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800208c:	f7ff f8b4 	bl	80011f8 <HAL_GetTick>
 8002090:	4602      	mov	r2, r0
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	1ad3      	subs	r3, r2, r3
 8002096:	2b64      	cmp	r3, #100	; 0x64
 8002098:	d901      	bls.n	800209e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800209a:	2303      	movs	r3, #3
 800209c:	e229      	b.n	80024f2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800209e:	4b61      	ldr	r3, [pc, #388]	; (8002224 <HAL_RCC_OscConfig+0x280>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d0f0      	beq.n	800208c <HAL_RCC_OscConfig+0xe8>
 80020aa:	e014      	b.n	80020d6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020ac:	f7ff f8a4 	bl	80011f8 <HAL_GetTick>
 80020b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020b2:	e008      	b.n	80020c6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020b4:	f7ff f8a0 	bl	80011f8 <HAL_GetTick>
 80020b8:	4602      	mov	r2, r0
 80020ba:	693b      	ldr	r3, [r7, #16]
 80020bc:	1ad3      	subs	r3, r2, r3
 80020be:	2b64      	cmp	r3, #100	; 0x64
 80020c0:	d901      	bls.n	80020c6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80020c2:	2303      	movs	r3, #3
 80020c4:	e215      	b.n	80024f2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020c6:	4b57      	ldr	r3, [pc, #348]	; (8002224 <HAL_RCC_OscConfig+0x280>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d1f0      	bne.n	80020b4 <HAL_RCC_OscConfig+0x110>
 80020d2:	e000      	b.n	80020d6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f003 0302 	and.w	r3, r3, #2
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d069      	beq.n	80021b6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80020e2:	4b50      	ldr	r3, [pc, #320]	; (8002224 <HAL_RCC_OscConfig+0x280>)
 80020e4:	689b      	ldr	r3, [r3, #8]
 80020e6:	f003 030c 	and.w	r3, r3, #12
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d00b      	beq.n	8002106 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80020ee:	4b4d      	ldr	r3, [pc, #308]	; (8002224 <HAL_RCC_OscConfig+0x280>)
 80020f0:	689b      	ldr	r3, [r3, #8]
 80020f2:	f003 030c 	and.w	r3, r3, #12
 80020f6:	2b08      	cmp	r3, #8
 80020f8:	d11c      	bne.n	8002134 <HAL_RCC_OscConfig+0x190>
 80020fa:	4b4a      	ldr	r3, [pc, #296]	; (8002224 <HAL_RCC_OscConfig+0x280>)
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002102:	2b00      	cmp	r3, #0
 8002104:	d116      	bne.n	8002134 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002106:	4b47      	ldr	r3, [pc, #284]	; (8002224 <HAL_RCC_OscConfig+0x280>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f003 0302 	and.w	r3, r3, #2
 800210e:	2b00      	cmp	r3, #0
 8002110:	d005      	beq.n	800211e <HAL_RCC_OscConfig+0x17a>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	68db      	ldr	r3, [r3, #12]
 8002116:	2b01      	cmp	r3, #1
 8002118:	d001      	beq.n	800211e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800211a:	2301      	movs	r3, #1
 800211c:	e1e9      	b.n	80024f2 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800211e:	4b41      	ldr	r3, [pc, #260]	; (8002224 <HAL_RCC_OscConfig+0x280>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	691b      	ldr	r3, [r3, #16]
 800212a:	00db      	lsls	r3, r3, #3
 800212c:	493d      	ldr	r1, [pc, #244]	; (8002224 <HAL_RCC_OscConfig+0x280>)
 800212e:	4313      	orrs	r3, r2
 8002130:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002132:	e040      	b.n	80021b6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	68db      	ldr	r3, [r3, #12]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d023      	beq.n	8002184 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800213c:	4b39      	ldr	r3, [pc, #228]	; (8002224 <HAL_RCC_OscConfig+0x280>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a38      	ldr	r2, [pc, #224]	; (8002224 <HAL_RCC_OscConfig+0x280>)
 8002142:	f043 0301 	orr.w	r3, r3, #1
 8002146:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002148:	f7ff f856 	bl	80011f8 <HAL_GetTick>
 800214c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800214e:	e008      	b.n	8002162 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002150:	f7ff f852 	bl	80011f8 <HAL_GetTick>
 8002154:	4602      	mov	r2, r0
 8002156:	693b      	ldr	r3, [r7, #16]
 8002158:	1ad3      	subs	r3, r2, r3
 800215a:	2b02      	cmp	r3, #2
 800215c:	d901      	bls.n	8002162 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800215e:	2303      	movs	r3, #3
 8002160:	e1c7      	b.n	80024f2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002162:	4b30      	ldr	r3, [pc, #192]	; (8002224 <HAL_RCC_OscConfig+0x280>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f003 0302 	and.w	r3, r3, #2
 800216a:	2b00      	cmp	r3, #0
 800216c:	d0f0      	beq.n	8002150 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800216e:	4b2d      	ldr	r3, [pc, #180]	; (8002224 <HAL_RCC_OscConfig+0x280>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	691b      	ldr	r3, [r3, #16]
 800217a:	00db      	lsls	r3, r3, #3
 800217c:	4929      	ldr	r1, [pc, #164]	; (8002224 <HAL_RCC_OscConfig+0x280>)
 800217e:	4313      	orrs	r3, r2
 8002180:	600b      	str	r3, [r1, #0]
 8002182:	e018      	b.n	80021b6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002184:	4b27      	ldr	r3, [pc, #156]	; (8002224 <HAL_RCC_OscConfig+0x280>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a26      	ldr	r2, [pc, #152]	; (8002224 <HAL_RCC_OscConfig+0x280>)
 800218a:	f023 0301 	bic.w	r3, r3, #1
 800218e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002190:	f7ff f832 	bl	80011f8 <HAL_GetTick>
 8002194:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002196:	e008      	b.n	80021aa <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002198:	f7ff f82e 	bl	80011f8 <HAL_GetTick>
 800219c:	4602      	mov	r2, r0
 800219e:	693b      	ldr	r3, [r7, #16]
 80021a0:	1ad3      	subs	r3, r2, r3
 80021a2:	2b02      	cmp	r3, #2
 80021a4:	d901      	bls.n	80021aa <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80021a6:	2303      	movs	r3, #3
 80021a8:	e1a3      	b.n	80024f2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021aa:	4b1e      	ldr	r3, [pc, #120]	; (8002224 <HAL_RCC_OscConfig+0x280>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f003 0302 	and.w	r3, r3, #2
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d1f0      	bne.n	8002198 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f003 0308 	and.w	r3, r3, #8
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d038      	beq.n	8002234 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	695b      	ldr	r3, [r3, #20]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d019      	beq.n	80021fe <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021ca:	4b16      	ldr	r3, [pc, #88]	; (8002224 <HAL_RCC_OscConfig+0x280>)
 80021cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021ce:	4a15      	ldr	r2, [pc, #84]	; (8002224 <HAL_RCC_OscConfig+0x280>)
 80021d0:	f043 0301 	orr.w	r3, r3, #1
 80021d4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021d6:	f7ff f80f 	bl	80011f8 <HAL_GetTick>
 80021da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021dc:	e008      	b.n	80021f0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021de:	f7ff f80b 	bl	80011f8 <HAL_GetTick>
 80021e2:	4602      	mov	r2, r0
 80021e4:	693b      	ldr	r3, [r7, #16]
 80021e6:	1ad3      	subs	r3, r2, r3
 80021e8:	2b02      	cmp	r3, #2
 80021ea:	d901      	bls.n	80021f0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80021ec:	2303      	movs	r3, #3
 80021ee:	e180      	b.n	80024f2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021f0:	4b0c      	ldr	r3, [pc, #48]	; (8002224 <HAL_RCC_OscConfig+0x280>)
 80021f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021f4:	f003 0302 	and.w	r3, r3, #2
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d0f0      	beq.n	80021de <HAL_RCC_OscConfig+0x23a>
 80021fc:	e01a      	b.n	8002234 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021fe:	4b09      	ldr	r3, [pc, #36]	; (8002224 <HAL_RCC_OscConfig+0x280>)
 8002200:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002202:	4a08      	ldr	r2, [pc, #32]	; (8002224 <HAL_RCC_OscConfig+0x280>)
 8002204:	f023 0301 	bic.w	r3, r3, #1
 8002208:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800220a:	f7fe fff5 	bl	80011f8 <HAL_GetTick>
 800220e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002210:	e00a      	b.n	8002228 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002212:	f7fe fff1 	bl	80011f8 <HAL_GetTick>
 8002216:	4602      	mov	r2, r0
 8002218:	693b      	ldr	r3, [r7, #16]
 800221a:	1ad3      	subs	r3, r2, r3
 800221c:	2b02      	cmp	r3, #2
 800221e:	d903      	bls.n	8002228 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002220:	2303      	movs	r3, #3
 8002222:	e166      	b.n	80024f2 <HAL_RCC_OscConfig+0x54e>
 8002224:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002228:	4b92      	ldr	r3, [pc, #584]	; (8002474 <HAL_RCC_OscConfig+0x4d0>)
 800222a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800222c:	f003 0302 	and.w	r3, r3, #2
 8002230:	2b00      	cmp	r3, #0
 8002232:	d1ee      	bne.n	8002212 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f003 0304 	and.w	r3, r3, #4
 800223c:	2b00      	cmp	r3, #0
 800223e:	f000 80a4 	beq.w	800238a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002242:	4b8c      	ldr	r3, [pc, #560]	; (8002474 <HAL_RCC_OscConfig+0x4d0>)
 8002244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002246:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800224a:	2b00      	cmp	r3, #0
 800224c:	d10d      	bne.n	800226a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800224e:	4b89      	ldr	r3, [pc, #548]	; (8002474 <HAL_RCC_OscConfig+0x4d0>)
 8002250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002252:	4a88      	ldr	r2, [pc, #544]	; (8002474 <HAL_RCC_OscConfig+0x4d0>)
 8002254:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002258:	6413      	str	r3, [r2, #64]	; 0x40
 800225a:	4b86      	ldr	r3, [pc, #536]	; (8002474 <HAL_RCC_OscConfig+0x4d0>)
 800225c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800225e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002262:	60bb      	str	r3, [r7, #8]
 8002264:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002266:	2301      	movs	r3, #1
 8002268:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800226a:	4b83      	ldr	r3, [pc, #524]	; (8002478 <HAL_RCC_OscConfig+0x4d4>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002272:	2b00      	cmp	r3, #0
 8002274:	d118      	bne.n	80022a8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002276:	4b80      	ldr	r3, [pc, #512]	; (8002478 <HAL_RCC_OscConfig+0x4d4>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a7f      	ldr	r2, [pc, #508]	; (8002478 <HAL_RCC_OscConfig+0x4d4>)
 800227c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002280:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002282:	f7fe ffb9 	bl	80011f8 <HAL_GetTick>
 8002286:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002288:	e008      	b.n	800229c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800228a:	f7fe ffb5 	bl	80011f8 <HAL_GetTick>
 800228e:	4602      	mov	r2, r0
 8002290:	693b      	ldr	r3, [r7, #16]
 8002292:	1ad3      	subs	r3, r2, r3
 8002294:	2b64      	cmp	r3, #100	; 0x64
 8002296:	d901      	bls.n	800229c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002298:	2303      	movs	r3, #3
 800229a:	e12a      	b.n	80024f2 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800229c:	4b76      	ldr	r3, [pc, #472]	; (8002478 <HAL_RCC_OscConfig+0x4d4>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d0f0      	beq.n	800228a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	2b01      	cmp	r3, #1
 80022ae:	d106      	bne.n	80022be <HAL_RCC_OscConfig+0x31a>
 80022b0:	4b70      	ldr	r3, [pc, #448]	; (8002474 <HAL_RCC_OscConfig+0x4d0>)
 80022b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022b4:	4a6f      	ldr	r2, [pc, #444]	; (8002474 <HAL_RCC_OscConfig+0x4d0>)
 80022b6:	f043 0301 	orr.w	r3, r3, #1
 80022ba:	6713      	str	r3, [r2, #112]	; 0x70
 80022bc:	e02d      	b.n	800231a <HAL_RCC_OscConfig+0x376>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	689b      	ldr	r3, [r3, #8]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d10c      	bne.n	80022e0 <HAL_RCC_OscConfig+0x33c>
 80022c6:	4b6b      	ldr	r3, [pc, #428]	; (8002474 <HAL_RCC_OscConfig+0x4d0>)
 80022c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022ca:	4a6a      	ldr	r2, [pc, #424]	; (8002474 <HAL_RCC_OscConfig+0x4d0>)
 80022cc:	f023 0301 	bic.w	r3, r3, #1
 80022d0:	6713      	str	r3, [r2, #112]	; 0x70
 80022d2:	4b68      	ldr	r3, [pc, #416]	; (8002474 <HAL_RCC_OscConfig+0x4d0>)
 80022d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022d6:	4a67      	ldr	r2, [pc, #412]	; (8002474 <HAL_RCC_OscConfig+0x4d0>)
 80022d8:	f023 0304 	bic.w	r3, r3, #4
 80022dc:	6713      	str	r3, [r2, #112]	; 0x70
 80022de:	e01c      	b.n	800231a <HAL_RCC_OscConfig+0x376>
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	689b      	ldr	r3, [r3, #8]
 80022e4:	2b05      	cmp	r3, #5
 80022e6:	d10c      	bne.n	8002302 <HAL_RCC_OscConfig+0x35e>
 80022e8:	4b62      	ldr	r3, [pc, #392]	; (8002474 <HAL_RCC_OscConfig+0x4d0>)
 80022ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022ec:	4a61      	ldr	r2, [pc, #388]	; (8002474 <HAL_RCC_OscConfig+0x4d0>)
 80022ee:	f043 0304 	orr.w	r3, r3, #4
 80022f2:	6713      	str	r3, [r2, #112]	; 0x70
 80022f4:	4b5f      	ldr	r3, [pc, #380]	; (8002474 <HAL_RCC_OscConfig+0x4d0>)
 80022f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022f8:	4a5e      	ldr	r2, [pc, #376]	; (8002474 <HAL_RCC_OscConfig+0x4d0>)
 80022fa:	f043 0301 	orr.w	r3, r3, #1
 80022fe:	6713      	str	r3, [r2, #112]	; 0x70
 8002300:	e00b      	b.n	800231a <HAL_RCC_OscConfig+0x376>
 8002302:	4b5c      	ldr	r3, [pc, #368]	; (8002474 <HAL_RCC_OscConfig+0x4d0>)
 8002304:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002306:	4a5b      	ldr	r2, [pc, #364]	; (8002474 <HAL_RCC_OscConfig+0x4d0>)
 8002308:	f023 0301 	bic.w	r3, r3, #1
 800230c:	6713      	str	r3, [r2, #112]	; 0x70
 800230e:	4b59      	ldr	r3, [pc, #356]	; (8002474 <HAL_RCC_OscConfig+0x4d0>)
 8002310:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002312:	4a58      	ldr	r2, [pc, #352]	; (8002474 <HAL_RCC_OscConfig+0x4d0>)
 8002314:	f023 0304 	bic.w	r3, r3, #4
 8002318:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	689b      	ldr	r3, [r3, #8]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d015      	beq.n	800234e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002322:	f7fe ff69 	bl	80011f8 <HAL_GetTick>
 8002326:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002328:	e00a      	b.n	8002340 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800232a:	f7fe ff65 	bl	80011f8 <HAL_GetTick>
 800232e:	4602      	mov	r2, r0
 8002330:	693b      	ldr	r3, [r7, #16]
 8002332:	1ad3      	subs	r3, r2, r3
 8002334:	f241 3288 	movw	r2, #5000	; 0x1388
 8002338:	4293      	cmp	r3, r2
 800233a:	d901      	bls.n	8002340 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800233c:	2303      	movs	r3, #3
 800233e:	e0d8      	b.n	80024f2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002340:	4b4c      	ldr	r3, [pc, #304]	; (8002474 <HAL_RCC_OscConfig+0x4d0>)
 8002342:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002344:	f003 0302 	and.w	r3, r3, #2
 8002348:	2b00      	cmp	r3, #0
 800234a:	d0ee      	beq.n	800232a <HAL_RCC_OscConfig+0x386>
 800234c:	e014      	b.n	8002378 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800234e:	f7fe ff53 	bl	80011f8 <HAL_GetTick>
 8002352:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002354:	e00a      	b.n	800236c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002356:	f7fe ff4f 	bl	80011f8 <HAL_GetTick>
 800235a:	4602      	mov	r2, r0
 800235c:	693b      	ldr	r3, [r7, #16]
 800235e:	1ad3      	subs	r3, r2, r3
 8002360:	f241 3288 	movw	r2, #5000	; 0x1388
 8002364:	4293      	cmp	r3, r2
 8002366:	d901      	bls.n	800236c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002368:	2303      	movs	r3, #3
 800236a:	e0c2      	b.n	80024f2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800236c:	4b41      	ldr	r3, [pc, #260]	; (8002474 <HAL_RCC_OscConfig+0x4d0>)
 800236e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002370:	f003 0302 	and.w	r3, r3, #2
 8002374:	2b00      	cmp	r3, #0
 8002376:	d1ee      	bne.n	8002356 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002378:	7dfb      	ldrb	r3, [r7, #23]
 800237a:	2b01      	cmp	r3, #1
 800237c:	d105      	bne.n	800238a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800237e:	4b3d      	ldr	r3, [pc, #244]	; (8002474 <HAL_RCC_OscConfig+0x4d0>)
 8002380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002382:	4a3c      	ldr	r2, [pc, #240]	; (8002474 <HAL_RCC_OscConfig+0x4d0>)
 8002384:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002388:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	699b      	ldr	r3, [r3, #24]
 800238e:	2b00      	cmp	r3, #0
 8002390:	f000 80ae 	beq.w	80024f0 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002394:	4b37      	ldr	r3, [pc, #220]	; (8002474 <HAL_RCC_OscConfig+0x4d0>)
 8002396:	689b      	ldr	r3, [r3, #8]
 8002398:	f003 030c 	and.w	r3, r3, #12
 800239c:	2b08      	cmp	r3, #8
 800239e:	d06d      	beq.n	800247c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	699b      	ldr	r3, [r3, #24]
 80023a4:	2b02      	cmp	r3, #2
 80023a6:	d14b      	bne.n	8002440 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023a8:	4b32      	ldr	r3, [pc, #200]	; (8002474 <HAL_RCC_OscConfig+0x4d0>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a31      	ldr	r2, [pc, #196]	; (8002474 <HAL_RCC_OscConfig+0x4d0>)
 80023ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80023b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023b4:	f7fe ff20 	bl	80011f8 <HAL_GetTick>
 80023b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023ba:	e008      	b.n	80023ce <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023bc:	f7fe ff1c 	bl	80011f8 <HAL_GetTick>
 80023c0:	4602      	mov	r2, r0
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	1ad3      	subs	r3, r2, r3
 80023c6:	2b02      	cmp	r3, #2
 80023c8:	d901      	bls.n	80023ce <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80023ca:	2303      	movs	r3, #3
 80023cc:	e091      	b.n	80024f2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023ce:	4b29      	ldr	r3, [pc, #164]	; (8002474 <HAL_RCC_OscConfig+0x4d0>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d1f0      	bne.n	80023bc <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	69da      	ldr	r2, [r3, #28]
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6a1b      	ldr	r3, [r3, #32]
 80023e2:	431a      	orrs	r2, r3
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023e8:	019b      	lsls	r3, r3, #6
 80023ea:	431a      	orrs	r2, r3
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023f0:	085b      	lsrs	r3, r3, #1
 80023f2:	3b01      	subs	r3, #1
 80023f4:	041b      	lsls	r3, r3, #16
 80023f6:	431a      	orrs	r2, r3
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023fc:	061b      	lsls	r3, r3, #24
 80023fe:	431a      	orrs	r2, r3
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002404:	071b      	lsls	r3, r3, #28
 8002406:	491b      	ldr	r1, [pc, #108]	; (8002474 <HAL_RCC_OscConfig+0x4d0>)
 8002408:	4313      	orrs	r3, r2
 800240a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800240c:	4b19      	ldr	r3, [pc, #100]	; (8002474 <HAL_RCC_OscConfig+0x4d0>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a18      	ldr	r2, [pc, #96]	; (8002474 <HAL_RCC_OscConfig+0x4d0>)
 8002412:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002416:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002418:	f7fe feee 	bl	80011f8 <HAL_GetTick>
 800241c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800241e:	e008      	b.n	8002432 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002420:	f7fe feea 	bl	80011f8 <HAL_GetTick>
 8002424:	4602      	mov	r2, r0
 8002426:	693b      	ldr	r3, [r7, #16]
 8002428:	1ad3      	subs	r3, r2, r3
 800242a:	2b02      	cmp	r3, #2
 800242c:	d901      	bls.n	8002432 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800242e:	2303      	movs	r3, #3
 8002430:	e05f      	b.n	80024f2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002432:	4b10      	ldr	r3, [pc, #64]	; (8002474 <HAL_RCC_OscConfig+0x4d0>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800243a:	2b00      	cmp	r3, #0
 800243c:	d0f0      	beq.n	8002420 <HAL_RCC_OscConfig+0x47c>
 800243e:	e057      	b.n	80024f0 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002440:	4b0c      	ldr	r3, [pc, #48]	; (8002474 <HAL_RCC_OscConfig+0x4d0>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a0b      	ldr	r2, [pc, #44]	; (8002474 <HAL_RCC_OscConfig+0x4d0>)
 8002446:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800244a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800244c:	f7fe fed4 	bl	80011f8 <HAL_GetTick>
 8002450:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002452:	e008      	b.n	8002466 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002454:	f7fe fed0 	bl	80011f8 <HAL_GetTick>
 8002458:	4602      	mov	r2, r0
 800245a:	693b      	ldr	r3, [r7, #16]
 800245c:	1ad3      	subs	r3, r2, r3
 800245e:	2b02      	cmp	r3, #2
 8002460:	d901      	bls.n	8002466 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002462:	2303      	movs	r3, #3
 8002464:	e045      	b.n	80024f2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002466:	4b03      	ldr	r3, [pc, #12]	; (8002474 <HAL_RCC_OscConfig+0x4d0>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800246e:	2b00      	cmp	r3, #0
 8002470:	d1f0      	bne.n	8002454 <HAL_RCC_OscConfig+0x4b0>
 8002472:	e03d      	b.n	80024f0 <HAL_RCC_OscConfig+0x54c>
 8002474:	40023800 	.word	0x40023800
 8002478:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800247c:	4b1f      	ldr	r3, [pc, #124]	; (80024fc <HAL_RCC_OscConfig+0x558>)
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	699b      	ldr	r3, [r3, #24]
 8002486:	2b01      	cmp	r3, #1
 8002488:	d030      	beq.n	80024ec <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002494:	429a      	cmp	r2, r3
 8002496:	d129      	bne.n	80024ec <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024a2:	429a      	cmp	r2, r3
 80024a4:	d122      	bne.n	80024ec <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80024a6:	68fa      	ldr	r2, [r7, #12]
 80024a8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80024ac:	4013      	ands	r3, r2
 80024ae:	687a      	ldr	r2, [r7, #4]
 80024b0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80024b2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d119      	bne.n	80024ec <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024c2:	085b      	lsrs	r3, r3, #1
 80024c4:	3b01      	subs	r3, #1
 80024c6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80024c8:	429a      	cmp	r2, r3
 80024ca:	d10f      	bne.n	80024ec <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024d6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80024d8:	429a      	cmp	r2, r3
 80024da:	d107      	bne.n	80024ec <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e6:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80024e8:	429a      	cmp	r2, r3
 80024ea:	d001      	beq.n	80024f0 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80024ec:	2301      	movs	r3, #1
 80024ee:	e000      	b.n	80024f2 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80024f0:	2300      	movs	r3, #0
}
 80024f2:	4618      	mov	r0, r3
 80024f4:	3718      	adds	r7, #24
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}
 80024fa:	bf00      	nop
 80024fc:	40023800 	.word	0x40023800

08002500 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b084      	sub	sp, #16
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
 8002508:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800250a:	2300      	movs	r3, #0
 800250c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d101      	bne.n	8002518 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002514:	2301      	movs	r3, #1
 8002516:	e0d0      	b.n	80026ba <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002518:	4b6a      	ldr	r3, [pc, #424]	; (80026c4 <HAL_RCC_ClockConfig+0x1c4>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f003 030f 	and.w	r3, r3, #15
 8002520:	683a      	ldr	r2, [r7, #0]
 8002522:	429a      	cmp	r2, r3
 8002524:	d910      	bls.n	8002548 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002526:	4b67      	ldr	r3, [pc, #412]	; (80026c4 <HAL_RCC_ClockConfig+0x1c4>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f023 020f 	bic.w	r2, r3, #15
 800252e:	4965      	ldr	r1, [pc, #404]	; (80026c4 <HAL_RCC_ClockConfig+0x1c4>)
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	4313      	orrs	r3, r2
 8002534:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002536:	4b63      	ldr	r3, [pc, #396]	; (80026c4 <HAL_RCC_ClockConfig+0x1c4>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f003 030f 	and.w	r3, r3, #15
 800253e:	683a      	ldr	r2, [r7, #0]
 8002540:	429a      	cmp	r2, r3
 8002542:	d001      	beq.n	8002548 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002544:	2301      	movs	r3, #1
 8002546:	e0b8      	b.n	80026ba <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f003 0302 	and.w	r3, r3, #2
 8002550:	2b00      	cmp	r3, #0
 8002552:	d020      	beq.n	8002596 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f003 0304 	and.w	r3, r3, #4
 800255c:	2b00      	cmp	r3, #0
 800255e:	d005      	beq.n	800256c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002560:	4b59      	ldr	r3, [pc, #356]	; (80026c8 <HAL_RCC_ClockConfig+0x1c8>)
 8002562:	689b      	ldr	r3, [r3, #8]
 8002564:	4a58      	ldr	r2, [pc, #352]	; (80026c8 <HAL_RCC_ClockConfig+0x1c8>)
 8002566:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800256a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f003 0308 	and.w	r3, r3, #8
 8002574:	2b00      	cmp	r3, #0
 8002576:	d005      	beq.n	8002584 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002578:	4b53      	ldr	r3, [pc, #332]	; (80026c8 <HAL_RCC_ClockConfig+0x1c8>)
 800257a:	689b      	ldr	r3, [r3, #8]
 800257c:	4a52      	ldr	r2, [pc, #328]	; (80026c8 <HAL_RCC_ClockConfig+0x1c8>)
 800257e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002582:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002584:	4b50      	ldr	r3, [pc, #320]	; (80026c8 <HAL_RCC_ClockConfig+0x1c8>)
 8002586:	689b      	ldr	r3, [r3, #8]
 8002588:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	689b      	ldr	r3, [r3, #8]
 8002590:	494d      	ldr	r1, [pc, #308]	; (80026c8 <HAL_RCC_ClockConfig+0x1c8>)
 8002592:	4313      	orrs	r3, r2
 8002594:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f003 0301 	and.w	r3, r3, #1
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d040      	beq.n	8002624 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	2b01      	cmp	r3, #1
 80025a8:	d107      	bne.n	80025ba <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025aa:	4b47      	ldr	r3, [pc, #284]	; (80026c8 <HAL_RCC_ClockConfig+0x1c8>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d115      	bne.n	80025e2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
 80025b8:	e07f      	b.n	80026ba <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	2b02      	cmp	r3, #2
 80025c0:	d107      	bne.n	80025d2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025c2:	4b41      	ldr	r3, [pc, #260]	; (80026c8 <HAL_RCC_ClockConfig+0x1c8>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d109      	bne.n	80025e2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	e073      	b.n	80026ba <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025d2:	4b3d      	ldr	r3, [pc, #244]	; (80026c8 <HAL_RCC_ClockConfig+0x1c8>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f003 0302 	and.w	r3, r3, #2
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d101      	bne.n	80025e2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80025de:	2301      	movs	r3, #1
 80025e0:	e06b      	b.n	80026ba <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025e2:	4b39      	ldr	r3, [pc, #228]	; (80026c8 <HAL_RCC_ClockConfig+0x1c8>)
 80025e4:	689b      	ldr	r3, [r3, #8]
 80025e6:	f023 0203 	bic.w	r2, r3, #3
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	4936      	ldr	r1, [pc, #216]	; (80026c8 <HAL_RCC_ClockConfig+0x1c8>)
 80025f0:	4313      	orrs	r3, r2
 80025f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025f4:	f7fe fe00 	bl	80011f8 <HAL_GetTick>
 80025f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025fa:	e00a      	b.n	8002612 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025fc:	f7fe fdfc 	bl	80011f8 <HAL_GetTick>
 8002600:	4602      	mov	r2, r0
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	1ad3      	subs	r3, r2, r3
 8002606:	f241 3288 	movw	r2, #5000	; 0x1388
 800260a:	4293      	cmp	r3, r2
 800260c:	d901      	bls.n	8002612 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800260e:	2303      	movs	r3, #3
 8002610:	e053      	b.n	80026ba <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002612:	4b2d      	ldr	r3, [pc, #180]	; (80026c8 <HAL_RCC_ClockConfig+0x1c8>)
 8002614:	689b      	ldr	r3, [r3, #8]
 8002616:	f003 020c 	and.w	r2, r3, #12
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	009b      	lsls	r3, r3, #2
 8002620:	429a      	cmp	r2, r3
 8002622:	d1eb      	bne.n	80025fc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002624:	4b27      	ldr	r3, [pc, #156]	; (80026c4 <HAL_RCC_ClockConfig+0x1c4>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f003 030f 	and.w	r3, r3, #15
 800262c:	683a      	ldr	r2, [r7, #0]
 800262e:	429a      	cmp	r2, r3
 8002630:	d210      	bcs.n	8002654 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002632:	4b24      	ldr	r3, [pc, #144]	; (80026c4 <HAL_RCC_ClockConfig+0x1c4>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f023 020f 	bic.w	r2, r3, #15
 800263a:	4922      	ldr	r1, [pc, #136]	; (80026c4 <HAL_RCC_ClockConfig+0x1c4>)
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	4313      	orrs	r3, r2
 8002640:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002642:	4b20      	ldr	r3, [pc, #128]	; (80026c4 <HAL_RCC_ClockConfig+0x1c4>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f003 030f 	and.w	r3, r3, #15
 800264a:	683a      	ldr	r2, [r7, #0]
 800264c:	429a      	cmp	r2, r3
 800264e:	d001      	beq.n	8002654 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002650:	2301      	movs	r3, #1
 8002652:	e032      	b.n	80026ba <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f003 0304 	and.w	r3, r3, #4
 800265c:	2b00      	cmp	r3, #0
 800265e:	d008      	beq.n	8002672 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002660:	4b19      	ldr	r3, [pc, #100]	; (80026c8 <HAL_RCC_ClockConfig+0x1c8>)
 8002662:	689b      	ldr	r3, [r3, #8]
 8002664:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	68db      	ldr	r3, [r3, #12]
 800266c:	4916      	ldr	r1, [pc, #88]	; (80026c8 <HAL_RCC_ClockConfig+0x1c8>)
 800266e:	4313      	orrs	r3, r2
 8002670:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f003 0308 	and.w	r3, r3, #8
 800267a:	2b00      	cmp	r3, #0
 800267c:	d009      	beq.n	8002692 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800267e:	4b12      	ldr	r3, [pc, #72]	; (80026c8 <HAL_RCC_ClockConfig+0x1c8>)
 8002680:	689b      	ldr	r3, [r3, #8]
 8002682:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	691b      	ldr	r3, [r3, #16]
 800268a:	00db      	lsls	r3, r3, #3
 800268c:	490e      	ldr	r1, [pc, #56]	; (80026c8 <HAL_RCC_ClockConfig+0x1c8>)
 800268e:	4313      	orrs	r3, r2
 8002690:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002692:	f000 f821 	bl	80026d8 <HAL_RCC_GetSysClockFreq>
 8002696:	4602      	mov	r2, r0
 8002698:	4b0b      	ldr	r3, [pc, #44]	; (80026c8 <HAL_RCC_ClockConfig+0x1c8>)
 800269a:	689b      	ldr	r3, [r3, #8]
 800269c:	091b      	lsrs	r3, r3, #4
 800269e:	f003 030f 	and.w	r3, r3, #15
 80026a2:	490a      	ldr	r1, [pc, #40]	; (80026cc <HAL_RCC_ClockConfig+0x1cc>)
 80026a4:	5ccb      	ldrb	r3, [r1, r3]
 80026a6:	fa22 f303 	lsr.w	r3, r2, r3
 80026aa:	4a09      	ldr	r2, [pc, #36]	; (80026d0 <HAL_RCC_ClockConfig+0x1d0>)
 80026ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80026ae:	4b09      	ldr	r3, [pc, #36]	; (80026d4 <HAL_RCC_ClockConfig+0x1d4>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4618      	mov	r0, r3
 80026b4:	f7fe fd5c 	bl	8001170 <HAL_InitTick>

  return HAL_OK;
 80026b8:	2300      	movs	r3, #0
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	3710      	adds	r7, #16
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}
 80026c2:	bf00      	nop
 80026c4:	40023c00 	.word	0x40023c00
 80026c8:	40023800 	.word	0x40023800
 80026cc:	08007440 	.word	0x08007440
 80026d0:	20000000 	.word	0x20000000
 80026d4:	20000004 	.word	0x20000004

080026d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80026dc:	b094      	sub	sp, #80	; 0x50
 80026de:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80026e0:	2300      	movs	r3, #0
 80026e2:	647b      	str	r3, [r7, #68]	; 0x44
 80026e4:	2300      	movs	r3, #0
 80026e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80026e8:	2300      	movs	r3, #0
 80026ea:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 80026ec:	2300      	movs	r3, #0
 80026ee:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80026f0:	4b79      	ldr	r3, [pc, #484]	; (80028d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80026f2:	689b      	ldr	r3, [r3, #8]
 80026f4:	f003 030c 	and.w	r3, r3, #12
 80026f8:	2b08      	cmp	r3, #8
 80026fa:	d00d      	beq.n	8002718 <HAL_RCC_GetSysClockFreq+0x40>
 80026fc:	2b08      	cmp	r3, #8
 80026fe:	f200 80e1 	bhi.w	80028c4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002702:	2b00      	cmp	r3, #0
 8002704:	d002      	beq.n	800270c <HAL_RCC_GetSysClockFreq+0x34>
 8002706:	2b04      	cmp	r3, #4
 8002708:	d003      	beq.n	8002712 <HAL_RCC_GetSysClockFreq+0x3a>
 800270a:	e0db      	b.n	80028c4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800270c:	4b73      	ldr	r3, [pc, #460]	; (80028dc <HAL_RCC_GetSysClockFreq+0x204>)
 800270e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002710:	e0db      	b.n	80028ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002712:	4b72      	ldr	r3, [pc, #456]	; (80028dc <HAL_RCC_GetSysClockFreq+0x204>)
 8002714:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002716:	e0d8      	b.n	80028ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002718:	4b6f      	ldr	r3, [pc, #444]	; (80028d8 <HAL_RCC_GetSysClockFreq+0x200>)
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002720:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002722:	4b6d      	ldr	r3, [pc, #436]	; (80028d8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800272a:	2b00      	cmp	r3, #0
 800272c:	d063      	beq.n	80027f6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800272e:	4b6a      	ldr	r3, [pc, #424]	; (80028d8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	099b      	lsrs	r3, r3, #6
 8002734:	2200      	movs	r2, #0
 8002736:	63bb      	str	r3, [r7, #56]	; 0x38
 8002738:	63fa      	str	r2, [r7, #60]	; 0x3c
 800273a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800273c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002740:	633b      	str	r3, [r7, #48]	; 0x30
 8002742:	2300      	movs	r3, #0
 8002744:	637b      	str	r3, [r7, #52]	; 0x34
 8002746:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800274a:	4622      	mov	r2, r4
 800274c:	462b      	mov	r3, r5
 800274e:	f04f 0000 	mov.w	r0, #0
 8002752:	f04f 0100 	mov.w	r1, #0
 8002756:	0159      	lsls	r1, r3, #5
 8002758:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800275c:	0150      	lsls	r0, r2, #5
 800275e:	4602      	mov	r2, r0
 8002760:	460b      	mov	r3, r1
 8002762:	4621      	mov	r1, r4
 8002764:	1a51      	subs	r1, r2, r1
 8002766:	6139      	str	r1, [r7, #16]
 8002768:	4629      	mov	r1, r5
 800276a:	eb63 0301 	sbc.w	r3, r3, r1
 800276e:	617b      	str	r3, [r7, #20]
 8002770:	f04f 0200 	mov.w	r2, #0
 8002774:	f04f 0300 	mov.w	r3, #0
 8002778:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800277c:	4659      	mov	r1, fp
 800277e:	018b      	lsls	r3, r1, #6
 8002780:	4651      	mov	r1, sl
 8002782:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002786:	4651      	mov	r1, sl
 8002788:	018a      	lsls	r2, r1, #6
 800278a:	4651      	mov	r1, sl
 800278c:	ebb2 0801 	subs.w	r8, r2, r1
 8002790:	4659      	mov	r1, fp
 8002792:	eb63 0901 	sbc.w	r9, r3, r1
 8002796:	f04f 0200 	mov.w	r2, #0
 800279a:	f04f 0300 	mov.w	r3, #0
 800279e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80027a2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80027a6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80027aa:	4690      	mov	r8, r2
 80027ac:	4699      	mov	r9, r3
 80027ae:	4623      	mov	r3, r4
 80027b0:	eb18 0303 	adds.w	r3, r8, r3
 80027b4:	60bb      	str	r3, [r7, #8]
 80027b6:	462b      	mov	r3, r5
 80027b8:	eb49 0303 	adc.w	r3, r9, r3
 80027bc:	60fb      	str	r3, [r7, #12]
 80027be:	f04f 0200 	mov.w	r2, #0
 80027c2:	f04f 0300 	mov.w	r3, #0
 80027c6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80027ca:	4629      	mov	r1, r5
 80027cc:	028b      	lsls	r3, r1, #10
 80027ce:	4621      	mov	r1, r4
 80027d0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80027d4:	4621      	mov	r1, r4
 80027d6:	028a      	lsls	r2, r1, #10
 80027d8:	4610      	mov	r0, r2
 80027da:	4619      	mov	r1, r3
 80027dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027de:	2200      	movs	r2, #0
 80027e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80027e2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80027e4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80027e8:	f7fd fd82 	bl	80002f0 <__aeabi_uldivmod>
 80027ec:	4602      	mov	r2, r0
 80027ee:	460b      	mov	r3, r1
 80027f0:	4613      	mov	r3, r2
 80027f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80027f4:	e058      	b.n	80028a8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027f6:	4b38      	ldr	r3, [pc, #224]	; (80028d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	099b      	lsrs	r3, r3, #6
 80027fc:	2200      	movs	r2, #0
 80027fe:	4618      	mov	r0, r3
 8002800:	4611      	mov	r1, r2
 8002802:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002806:	623b      	str	r3, [r7, #32]
 8002808:	2300      	movs	r3, #0
 800280a:	627b      	str	r3, [r7, #36]	; 0x24
 800280c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002810:	4642      	mov	r2, r8
 8002812:	464b      	mov	r3, r9
 8002814:	f04f 0000 	mov.w	r0, #0
 8002818:	f04f 0100 	mov.w	r1, #0
 800281c:	0159      	lsls	r1, r3, #5
 800281e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002822:	0150      	lsls	r0, r2, #5
 8002824:	4602      	mov	r2, r0
 8002826:	460b      	mov	r3, r1
 8002828:	4641      	mov	r1, r8
 800282a:	ebb2 0a01 	subs.w	sl, r2, r1
 800282e:	4649      	mov	r1, r9
 8002830:	eb63 0b01 	sbc.w	fp, r3, r1
 8002834:	f04f 0200 	mov.w	r2, #0
 8002838:	f04f 0300 	mov.w	r3, #0
 800283c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002840:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002844:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002848:	ebb2 040a 	subs.w	r4, r2, sl
 800284c:	eb63 050b 	sbc.w	r5, r3, fp
 8002850:	f04f 0200 	mov.w	r2, #0
 8002854:	f04f 0300 	mov.w	r3, #0
 8002858:	00eb      	lsls	r3, r5, #3
 800285a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800285e:	00e2      	lsls	r2, r4, #3
 8002860:	4614      	mov	r4, r2
 8002862:	461d      	mov	r5, r3
 8002864:	4643      	mov	r3, r8
 8002866:	18e3      	adds	r3, r4, r3
 8002868:	603b      	str	r3, [r7, #0]
 800286a:	464b      	mov	r3, r9
 800286c:	eb45 0303 	adc.w	r3, r5, r3
 8002870:	607b      	str	r3, [r7, #4]
 8002872:	f04f 0200 	mov.w	r2, #0
 8002876:	f04f 0300 	mov.w	r3, #0
 800287a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800287e:	4629      	mov	r1, r5
 8002880:	028b      	lsls	r3, r1, #10
 8002882:	4621      	mov	r1, r4
 8002884:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002888:	4621      	mov	r1, r4
 800288a:	028a      	lsls	r2, r1, #10
 800288c:	4610      	mov	r0, r2
 800288e:	4619      	mov	r1, r3
 8002890:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002892:	2200      	movs	r2, #0
 8002894:	61bb      	str	r3, [r7, #24]
 8002896:	61fa      	str	r2, [r7, #28]
 8002898:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800289c:	f7fd fd28 	bl	80002f0 <__aeabi_uldivmod>
 80028a0:	4602      	mov	r2, r0
 80028a2:	460b      	mov	r3, r1
 80028a4:	4613      	mov	r3, r2
 80028a6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80028a8:	4b0b      	ldr	r3, [pc, #44]	; (80028d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	0c1b      	lsrs	r3, r3, #16
 80028ae:	f003 0303 	and.w	r3, r3, #3
 80028b2:	3301      	adds	r3, #1
 80028b4:	005b      	lsls	r3, r3, #1
 80028b6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 80028b8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80028ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80028bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80028c0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80028c2:	e002      	b.n	80028ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80028c4:	4b05      	ldr	r3, [pc, #20]	; (80028dc <HAL_RCC_GetSysClockFreq+0x204>)
 80028c6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80028c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80028ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80028cc:	4618      	mov	r0, r3
 80028ce:	3750      	adds	r7, #80	; 0x50
 80028d0:	46bd      	mov	sp, r7
 80028d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80028d6:	bf00      	nop
 80028d8:	40023800 	.word	0x40023800
 80028dc:	00f42400 	.word	0x00f42400

080028e0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028e0:	b480      	push	{r7}
 80028e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80028e4:	4b03      	ldr	r3, [pc, #12]	; (80028f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80028e6:	681b      	ldr	r3, [r3, #0]
}
 80028e8:	4618      	mov	r0, r3
 80028ea:	46bd      	mov	sp, r7
 80028ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f0:	4770      	bx	lr
 80028f2:	bf00      	nop
 80028f4:	20000000 	.word	0x20000000

080028f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80028fc:	f7ff fff0 	bl	80028e0 <HAL_RCC_GetHCLKFreq>
 8002900:	4602      	mov	r2, r0
 8002902:	4b05      	ldr	r3, [pc, #20]	; (8002918 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002904:	689b      	ldr	r3, [r3, #8]
 8002906:	0a9b      	lsrs	r3, r3, #10
 8002908:	f003 0307 	and.w	r3, r3, #7
 800290c:	4903      	ldr	r1, [pc, #12]	; (800291c <HAL_RCC_GetPCLK1Freq+0x24>)
 800290e:	5ccb      	ldrb	r3, [r1, r3]
 8002910:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002914:	4618      	mov	r0, r3
 8002916:	bd80      	pop	{r7, pc}
 8002918:	40023800 	.word	0x40023800
 800291c:	08007450 	.word	0x08007450

08002920 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002924:	f7ff ffdc 	bl	80028e0 <HAL_RCC_GetHCLKFreq>
 8002928:	4602      	mov	r2, r0
 800292a:	4b05      	ldr	r3, [pc, #20]	; (8002940 <HAL_RCC_GetPCLK2Freq+0x20>)
 800292c:	689b      	ldr	r3, [r3, #8]
 800292e:	0b5b      	lsrs	r3, r3, #13
 8002930:	f003 0307 	and.w	r3, r3, #7
 8002934:	4903      	ldr	r1, [pc, #12]	; (8002944 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002936:	5ccb      	ldrb	r3, [r1, r3]
 8002938:	fa22 f303 	lsr.w	r3, r2, r3
}
 800293c:	4618      	mov	r0, r3
 800293e:	bd80      	pop	{r7, pc}
 8002940:	40023800 	.word	0x40023800
 8002944:	08007450 	.word	0x08007450

08002948 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b088      	sub	sp, #32
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002950:	2300      	movs	r3, #0
 8002952:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002954:	2300      	movs	r3, #0
 8002956:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002958:	2300      	movs	r3, #0
 800295a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800295c:	2300      	movs	r3, #0
 800295e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002960:	2300      	movs	r3, #0
 8002962:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f003 0301 	and.w	r3, r3, #1
 800296c:	2b00      	cmp	r3, #0
 800296e:	d012      	beq.n	8002996 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002970:	4b69      	ldr	r3, [pc, #420]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002972:	689b      	ldr	r3, [r3, #8]
 8002974:	4a68      	ldr	r2, [pc, #416]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002976:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800297a:	6093      	str	r3, [r2, #8]
 800297c:	4b66      	ldr	r3, [pc, #408]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800297e:	689a      	ldr	r2, [r3, #8]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002984:	4964      	ldr	r1, [pc, #400]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002986:	4313      	orrs	r3, r2
 8002988:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800298e:	2b00      	cmp	r3, #0
 8002990:	d101      	bne.n	8002996 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002992:	2301      	movs	r3, #1
 8002994:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d017      	beq.n	80029d2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80029a2:	4b5d      	ldr	r3, [pc, #372]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80029a8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029b0:	4959      	ldr	r1, [pc, #356]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029b2:	4313      	orrs	r3, r2
 80029b4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80029c0:	d101      	bne.n	80029c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80029c2:	2301      	movs	r3, #1
 80029c4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d101      	bne.n	80029d2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80029ce:	2301      	movs	r3, #1
 80029d0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d017      	beq.n	8002a0e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80029de:	4b4e      	ldr	r3, [pc, #312]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80029e4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ec:	494a      	ldr	r1, [pc, #296]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029ee:	4313      	orrs	r3, r2
 80029f0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80029fc:	d101      	bne.n	8002a02 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80029fe:	2301      	movs	r3, #1
 8002a00:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d101      	bne.n	8002a0e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d001      	beq.n	8002a1e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f003 0320 	and.w	r3, r3, #32
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	f000 808b 	beq.w	8002b42 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002a2c:	4b3a      	ldr	r3, [pc, #232]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a30:	4a39      	ldr	r2, [pc, #228]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a36:	6413      	str	r3, [r2, #64]	; 0x40
 8002a38:	4b37      	ldr	r3, [pc, #220]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a40:	60bb      	str	r3, [r7, #8]
 8002a42:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002a44:	4b35      	ldr	r3, [pc, #212]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a34      	ldr	r2, [pc, #208]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002a4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a4e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a50:	f7fe fbd2 	bl	80011f8 <HAL_GetTick>
 8002a54:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002a56:	e008      	b.n	8002a6a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a58:	f7fe fbce 	bl	80011f8 <HAL_GetTick>
 8002a5c:	4602      	mov	r2, r0
 8002a5e:	697b      	ldr	r3, [r7, #20]
 8002a60:	1ad3      	subs	r3, r2, r3
 8002a62:	2b64      	cmp	r3, #100	; 0x64
 8002a64:	d901      	bls.n	8002a6a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002a66:	2303      	movs	r3, #3
 8002a68:	e38f      	b.n	800318a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002a6a:	4b2c      	ldr	r3, [pc, #176]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d0f0      	beq.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002a76:	4b28      	ldr	r3, [pc, #160]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a7e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002a80:	693b      	ldr	r3, [r7, #16]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d035      	beq.n	8002af2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a8e:	693a      	ldr	r2, [r7, #16]
 8002a90:	429a      	cmp	r2, r3
 8002a92:	d02e      	beq.n	8002af2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002a94:	4b20      	ldr	r3, [pc, #128]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a9c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002a9e:	4b1e      	ldr	r3, [pc, #120]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002aa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aa2:	4a1d      	ldr	r2, [pc, #116]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002aa4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002aa8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002aaa:	4b1b      	ldr	r3, [pc, #108]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002aac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aae:	4a1a      	ldr	r2, [pc, #104]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ab0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ab4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002ab6:	4a18      	ldr	r2, [pc, #96]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ab8:	693b      	ldr	r3, [r7, #16]
 8002aba:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002abc:	4b16      	ldr	r3, [pc, #88]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002abe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ac0:	f003 0301 	and.w	r3, r3, #1
 8002ac4:	2b01      	cmp	r3, #1
 8002ac6:	d114      	bne.n	8002af2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ac8:	f7fe fb96 	bl	80011f8 <HAL_GetTick>
 8002acc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ace:	e00a      	b.n	8002ae6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ad0:	f7fe fb92 	bl	80011f8 <HAL_GetTick>
 8002ad4:	4602      	mov	r2, r0
 8002ad6:	697b      	ldr	r3, [r7, #20]
 8002ad8:	1ad3      	subs	r3, r2, r3
 8002ada:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d901      	bls.n	8002ae6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002ae2:	2303      	movs	r3, #3
 8002ae4:	e351      	b.n	800318a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ae6:	4b0c      	ldr	r3, [pc, #48]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ae8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aea:	f003 0302 	and.w	r3, r3, #2
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d0ee      	beq.n	8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002af6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002afa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002afe:	d111      	bne.n	8002b24 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002b00:	4b05      	ldr	r3, [pc, #20]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b02:	689b      	ldr	r3, [r3, #8]
 8002b04:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002b0c:	4b04      	ldr	r3, [pc, #16]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002b0e:	400b      	ands	r3, r1
 8002b10:	4901      	ldr	r1, [pc, #4]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b12:	4313      	orrs	r3, r2
 8002b14:	608b      	str	r3, [r1, #8]
 8002b16:	e00b      	b.n	8002b30 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002b18:	40023800 	.word	0x40023800
 8002b1c:	40007000 	.word	0x40007000
 8002b20:	0ffffcff 	.word	0x0ffffcff
 8002b24:	4bac      	ldr	r3, [pc, #688]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b26:	689b      	ldr	r3, [r3, #8]
 8002b28:	4aab      	ldr	r2, [pc, #684]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b2a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002b2e:	6093      	str	r3, [r2, #8]
 8002b30:	4ba9      	ldr	r3, [pc, #676]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b32:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b3c:	49a6      	ldr	r1, [pc, #664]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f003 0310 	and.w	r3, r3, #16
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d010      	beq.n	8002b70 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002b4e:	4ba2      	ldr	r3, [pc, #648]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b54:	4aa0      	ldr	r2, [pc, #640]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b56:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b5a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002b5e:	4b9e      	ldr	r3, [pc, #632]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b60:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b68:	499b      	ldr	r1, [pc, #620]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d00a      	beq.n	8002b92 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002b7c:	4b96      	ldr	r3, [pc, #600]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b82:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002b8a:	4993      	ldr	r1, [pc, #588]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d00a      	beq.n	8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002b9e:	4b8e      	ldr	r3, [pc, #568]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ba0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ba4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002bac:	498a      	ldr	r1, [pc, #552]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d00a      	beq.n	8002bd6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002bc0:	4b85      	ldr	r3, [pc, #532]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bc6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002bce:	4982      	ldr	r1, [pc, #520]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d00a      	beq.n	8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002be2:	4b7d      	ldr	r3, [pc, #500]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002be4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002be8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bf0:	4979      	ldr	r1, [pc, #484]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d00a      	beq.n	8002c1a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002c04:	4b74      	ldr	r3, [pc, #464]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c0a:	f023 0203 	bic.w	r2, r3, #3
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c12:	4971      	ldr	r1, [pc, #452]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c14:	4313      	orrs	r3, r2
 8002c16:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d00a      	beq.n	8002c3c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002c26:	4b6c      	ldr	r3, [pc, #432]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c2c:	f023 020c 	bic.w	r2, r3, #12
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c34:	4968      	ldr	r1, [pc, #416]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c36:	4313      	orrs	r3, r2
 8002c38:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d00a      	beq.n	8002c5e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002c48:	4b63      	ldr	r3, [pc, #396]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c4e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c56:	4960      	ldr	r1, [pc, #384]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d00a      	beq.n	8002c80 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002c6a:	4b5b      	ldr	r3, [pc, #364]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c70:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c78:	4957      	ldr	r1, [pc, #348]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d00a      	beq.n	8002ca2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002c8c:	4b52      	ldr	r3, [pc, #328]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c92:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c9a:	494f      	ldr	r1, [pc, #316]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d00a      	beq.n	8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002cae:	4b4a      	ldr	r3, [pc, #296]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cb4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cbc:	4946      	ldr	r1, [pc, #280]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d00a      	beq.n	8002ce6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002cd0:	4b41      	ldr	r3, [pc, #260]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cd6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cde:	493e      	ldr	r1, [pc, #248]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d00a      	beq.n	8002d08 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002cf2:	4b39      	ldr	r3, [pc, #228]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cf8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d00:	4935      	ldr	r1, [pc, #212]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d02:	4313      	orrs	r3, r2
 8002d04:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d00a      	beq.n	8002d2a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002d14:	4b30      	ldr	r3, [pc, #192]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d1a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002d22:	492d      	ldr	r1, [pc, #180]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d24:	4313      	orrs	r3, r2
 8002d26:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d011      	beq.n	8002d5a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002d36:	4b28      	ldr	r3, [pc, #160]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d3c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d44:	4924      	ldr	r1, [pc, #144]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d46:	4313      	orrs	r3, r2
 8002d48:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d50:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002d54:	d101      	bne.n	8002d5a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002d56:	2301      	movs	r3, #1
 8002d58:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f003 0308 	and.w	r3, r3, #8
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d001      	beq.n	8002d6a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002d66:	2301      	movs	r3, #1
 8002d68:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d00a      	beq.n	8002d8c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002d76:	4b18      	ldr	r3, [pc, #96]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d7c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d84:	4914      	ldr	r1, [pc, #80]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d86:	4313      	orrs	r3, r2
 8002d88:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d00b      	beq.n	8002db0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002d98:	4b0f      	ldr	r3, [pc, #60]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d9e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002da8:	490b      	ldr	r1, [pc, #44]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002daa:	4313      	orrs	r3, r2
 8002dac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d00f      	beq.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002dbc:	4b06      	ldr	r3, [pc, #24]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002dbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dc2:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002dcc:	4902      	ldr	r1, [pc, #8]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002dd4:	e002      	b.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0x494>
 8002dd6:	bf00      	nop
 8002dd8:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d00b      	beq.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002de8:	4b8a      	ldr	r3, [pc, #552]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002dea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002dee:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002df8:	4986      	ldr	r1, [pc, #536]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d00b      	beq.n	8002e24 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002e0c:	4b81      	ldr	r3, [pc, #516]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e0e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e12:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e1c:	497d      	ldr	r1, [pc, #500]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002e24:	69fb      	ldr	r3, [r7, #28]
 8002e26:	2b01      	cmp	r3, #1
 8002e28:	d006      	beq.n	8002e38 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	f000 80d6 	beq.w	8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002e38:	4b76      	ldr	r3, [pc, #472]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a75      	ldr	r2, [pc, #468]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e3e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002e42:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e44:	f7fe f9d8 	bl	80011f8 <HAL_GetTick>
 8002e48:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002e4a:	e008      	b.n	8002e5e <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002e4c:	f7fe f9d4 	bl	80011f8 <HAL_GetTick>
 8002e50:	4602      	mov	r2, r0
 8002e52:	697b      	ldr	r3, [r7, #20]
 8002e54:	1ad3      	subs	r3, r2, r3
 8002e56:	2b64      	cmp	r3, #100	; 0x64
 8002e58:	d901      	bls.n	8002e5e <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002e5a:	2303      	movs	r3, #3
 8002e5c:	e195      	b.n	800318a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002e5e:	4b6d      	ldr	r3, [pc, #436]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d1f0      	bne.n	8002e4c <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f003 0301 	and.w	r3, r3, #1
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d021      	beq.n	8002eba <HAL_RCCEx_PeriphCLKConfig+0x572>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d11d      	bne.n	8002eba <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002e7e:	4b65      	ldr	r3, [pc, #404]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e80:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e84:	0c1b      	lsrs	r3, r3, #16
 8002e86:	f003 0303 	and.w	r3, r3, #3
 8002e8a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002e8c:	4b61      	ldr	r3, [pc, #388]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e92:	0e1b      	lsrs	r3, r3, #24
 8002e94:	f003 030f 	and.w	r3, r3, #15
 8002e98:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	019a      	lsls	r2, r3, #6
 8002ea0:	693b      	ldr	r3, [r7, #16]
 8002ea2:	041b      	lsls	r3, r3, #16
 8002ea4:	431a      	orrs	r2, r3
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	061b      	lsls	r3, r3, #24
 8002eaa:	431a      	orrs	r2, r3
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	689b      	ldr	r3, [r3, #8]
 8002eb0:	071b      	lsls	r3, r3, #28
 8002eb2:	4958      	ldr	r1, [pc, #352]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d004      	beq.n	8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002eca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002ece:	d00a      	beq.n	8002ee6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d02e      	beq.n	8002f3a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ee4:	d129      	bne.n	8002f3a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002ee6:	4b4b      	ldr	r3, [pc, #300]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ee8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002eec:	0c1b      	lsrs	r3, r3, #16
 8002eee:	f003 0303 	and.w	r3, r3, #3
 8002ef2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002ef4:	4b47      	ldr	r3, [pc, #284]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ef6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002efa:	0f1b      	lsrs	r3, r3, #28
 8002efc:	f003 0307 	and.w	r3, r3, #7
 8002f00:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	019a      	lsls	r2, r3, #6
 8002f08:	693b      	ldr	r3, [r7, #16]
 8002f0a:	041b      	lsls	r3, r3, #16
 8002f0c:	431a      	orrs	r2, r3
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	68db      	ldr	r3, [r3, #12]
 8002f12:	061b      	lsls	r3, r3, #24
 8002f14:	431a      	orrs	r2, r3
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	071b      	lsls	r3, r3, #28
 8002f1a:	493e      	ldr	r1, [pc, #248]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002f22:	4b3c      	ldr	r3, [pc, #240]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f24:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f28:	f023 021f 	bic.w	r2, r3, #31
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f30:	3b01      	subs	r3, #1
 8002f32:	4938      	ldr	r1, [pc, #224]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f34:	4313      	orrs	r3, r2
 8002f36:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d01d      	beq.n	8002f82 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002f46:	4b33      	ldr	r3, [pc, #204]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f48:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f4c:	0e1b      	lsrs	r3, r3, #24
 8002f4e:	f003 030f 	and.w	r3, r3, #15
 8002f52:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002f54:	4b2f      	ldr	r3, [pc, #188]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f56:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f5a:	0f1b      	lsrs	r3, r3, #28
 8002f5c:	f003 0307 	and.w	r3, r3, #7
 8002f60:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	019a      	lsls	r2, r3, #6
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	691b      	ldr	r3, [r3, #16]
 8002f6c:	041b      	lsls	r3, r3, #16
 8002f6e:	431a      	orrs	r2, r3
 8002f70:	693b      	ldr	r3, [r7, #16]
 8002f72:	061b      	lsls	r3, r3, #24
 8002f74:	431a      	orrs	r2, r3
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	071b      	lsls	r3, r3, #28
 8002f7a:	4926      	ldr	r1, [pc, #152]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d011      	beq.n	8002fb2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	019a      	lsls	r2, r3, #6
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	691b      	ldr	r3, [r3, #16]
 8002f98:	041b      	lsls	r3, r3, #16
 8002f9a:	431a      	orrs	r2, r3
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	68db      	ldr	r3, [r3, #12]
 8002fa0:	061b      	lsls	r3, r3, #24
 8002fa2:	431a      	orrs	r2, r3
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	689b      	ldr	r3, [r3, #8]
 8002fa8:	071b      	lsls	r3, r3, #28
 8002faa:	491a      	ldr	r1, [pc, #104]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002fac:	4313      	orrs	r3, r2
 8002fae:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002fb2:	4b18      	ldr	r3, [pc, #96]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4a17      	ldr	r2, [pc, #92]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002fb8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002fbc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002fbe:	f7fe f91b 	bl	80011f8 <HAL_GetTick>
 8002fc2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002fc4:	e008      	b.n	8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002fc6:	f7fe f917 	bl	80011f8 <HAL_GetTick>
 8002fca:	4602      	mov	r2, r0
 8002fcc:	697b      	ldr	r3, [r7, #20]
 8002fce:	1ad3      	subs	r3, r2, r3
 8002fd0:	2b64      	cmp	r3, #100	; 0x64
 8002fd2:	d901      	bls.n	8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002fd4:	2303      	movs	r3, #3
 8002fd6:	e0d8      	b.n	800318a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002fd8:	4b0e      	ldr	r3, [pc, #56]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d0f0      	beq.n	8002fc6 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002fe4:	69bb      	ldr	r3, [r7, #24]
 8002fe6:	2b01      	cmp	r3, #1
 8002fe8:	f040 80ce 	bne.w	8003188 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002fec:	4b09      	ldr	r3, [pc, #36]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a08      	ldr	r2, [pc, #32]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ff2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ff6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ff8:	f7fe f8fe 	bl	80011f8 <HAL_GetTick>
 8002ffc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002ffe:	e00b      	b.n	8003018 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003000:	f7fe f8fa 	bl	80011f8 <HAL_GetTick>
 8003004:	4602      	mov	r2, r0
 8003006:	697b      	ldr	r3, [r7, #20]
 8003008:	1ad3      	subs	r3, r2, r3
 800300a:	2b64      	cmp	r3, #100	; 0x64
 800300c:	d904      	bls.n	8003018 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800300e:	2303      	movs	r3, #3
 8003010:	e0bb      	b.n	800318a <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003012:	bf00      	nop
 8003014:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003018:	4b5e      	ldr	r3, [pc, #376]	; (8003194 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003020:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003024:	d0ec      	beq.n	8003000 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800302e:	2b00      	cmp	r3, #0
 8003030:	d003      	beq.n	800303a <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003036:	2b00      	cmp	r3, #0
 8003038:	d009      	beq.n	800304e <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003042:	2b00      	cmp	r3, #0
 8003044:	d02e      	beq.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800304a:	2b00      	cmp	r3, #0
 800304c:	d12a      	bne.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800304e:	4b51      	ldr	r3, [pc, #324]	; (8003194 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003050:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003054:	0c1b      	lsrs	r3, r3, #16
 8003056:	f003 0303 	and.w	r3, r3, #3
 800305a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800305c:	4b4d      	ldr	r3, [pc, #308]	; (8003194 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800305e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003062:	0f1b      	lsrs	r3, r3, #28
 8003064:	f003 0307 	and.w	r3, r3, #7
 8003068:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	695b      	ldr	r3, [r3, #20]
 800306e:	019a      	lsls	r2, r3, #6
 8003070:	693b      	ldr	r3, [r7, #16]
 8003072:	041b      	lsls	r3, r3, #16
 8003074:	431a      	orrs	r2, r3
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	699b      	ldr	r3, [r3, #24]
 800307a:	061b      	lsls	r3, r3, #24
 800307c:	431a      	orrs	r2, r3
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	071b      	lsls	r3, r3, #28
 8003082:	4944      	ldr	r1, [pc, #272]	; (8003194 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003084:	4313      	orrs	r3, r2
 8003086:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800308a:	4b42      	ldr	r3, [pc, #264]	; (8003194 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800308c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003090:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003098:	3b01      	subs	r3, #1
 800309a:	021b      	lsls	r3, r3, #8
 800309c:	493d      	ldr	r1, [pc, #244]	; (8003194 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800309e:	4313      	orrs	r3, r2
 80030a0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d022      	beq.n	80030f6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80030b4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80030b8:	d11d      	bne.n	80030f6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80030ba:	4b36      	ldr	r3, [pc, #216]	; (8003194 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80030bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030c0:	0e1b      	lsrs	r3, r3, #24
 80030c2:	f003 030f 	and.w	r3, r3, #15
 80030c6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80030c8:	4b32      	ldr	r3, [pc, #200]	; (8003194 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80030ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030ce:	0f1b      	lsrs	r3, r3, #28
 80030d0:	f003 0307 	and.w	r3, r3, #7
 80030d4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	695b      	ldr	r3, [r3, #20]
 80030da:	019a      	lsls	r2, r3, #6
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6a1b      	ldr	r3, [r3, #32]
 80030e0:	041b      	lsls	r3, r3, #16
 80030e2:	431a      	orrs	r2, r3
 80030e4:	693b      	ldr	r3, [r7, #16]
 80030e6:	061b      	lsls	r3, r3, #24
 80030e8:	431a      	orrs	r2, r3
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	071b      	lsls	r3, r3, #28
 80030ee:	4929      	ldr	r1, [pc, #164]	; (8003194 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80030f0:	4313      	orrs	r3, r2
 80030f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f003 0308 	and.w	r3, r3, #8
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d028      	beq.n	8003154 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003102:	4b24      	ldr	r3, [pc, #144]	; (8003194 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003104:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003108:	0e1b      	lsrs	r3, r3, #24
 800310a:	f003 030f 	and.w	r3, r3, #15
 800310e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003110:	4b20      	ldr	r3, [pc, #128]	; (8003194 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003112:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003116:	0c1b      	lsrs	r3, r3, #16
 8003118:	f003 0303 	and.w	r3, r3, #3
 800311c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	695b      	ldr	r3, [r3, #20]
 8003122:	019a      	lsls	r2, r3, #6
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	041b      	lsls	r3, r3, #16
 8003128:	431a      	orrs	r2, r3
 800312a:	693b      	ldr	r3, [r7, #16]
 800312c:	061b      	lsls	r3, r3, #24
 800312e:	431a      	orrs	r2, r3
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	69db      	ldr	r3, [r3, #28]
 8003134:	071b      	lsls	r3, r3, #28
 8003136:	4917      	ldr	r1, [pc, #92]	; (8003194 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003138:	4313      	orrs	r3, r2
 800313a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800313e:	4b15      	ldr	r3, [pc, #84]	; (8003194 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003140:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003144:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800314c:	4911      	ldr	r1, [pc, #68]	; (8003194 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800314e:	4313      	orrs	r3, r2
 8003150:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003154:	4b0f      	ldr	r3, [pc, #60]	; (8003194 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a0e      	ldr	r2, [pc, #56]	; (8003194 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800315a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800315e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003160:	f7fe f84a 	bl	80011f8 <HAL_GetTick>
 8003164:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003166:	e008      	b.n	800317a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003168:	f7fe f846 	bl	80011f8 <HAL_GetTick>
 800316c:	4602      	mov	r2, r0
 800316e:	697b      	ldr	r3, [r7, #20]
 8003170:	1ad3      	subs	r3, r2, r3
 8003172:	2b64      	cmp	r3, #100	; 0x64
 8003174:	d901      	bls.n	800317a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003176:	2303      	movs	r3, #3
 8003178:	e007      	b.n	800318a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800317a:	4b06      	ldr	r3, [pc, #24]	; (8003194 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003182:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003186:	d1ef      	bne.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003188:	2300      	movs	r3, #0
}
 800318a:	4618      	mov	r0, r3
 800318c:	3720      	adds	r7, #32
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}
 8003192:	bf00      	nop
 8003194:	40023800 	.word	0x40023800

08003198 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b082      	sub	sp, #8
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d101      	bne.n	80031aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	e049      	b.n	800323e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031b0:	b2db      	uxtb	r3, r3
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d106      	bne.n	80031c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2200      	movs	r2, #0
 80031ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80031be:	6878      	ldr	r0, [r7, #4]
 80031c0:	f7fd fde6 	bl	8000d90 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2202      	movs	r2, #2
 80031c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681a      	ldr	r2, [r3, #0]
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	3304      	adds	r3, #4
 80031d4:	4619      	mov	r1, r3
 80031d6:	4610      	mov	r0, r2
 80031d8:	f000 faa4 	bl	8003724 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2201      	movs	r2, #1
 80031e0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2201      	movs	r2, #1
 80031e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2201      	movs	r2, #1
 80031f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2201      	movs	r2, #1
 80031f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2201      	movs	r2, #1
 8003200:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2201      	movs	r2, #1
 8003208:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2201      	movs	r2, #1
 8003210:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2201      	movs	r2, #1
 8003218:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2201      	movs	r2, #1
 8003220:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2201      	movs	r2, #1
 8003228:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2201      	movs	r2, #1
 8003230:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2201      	movs	r2, #1
 8003238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800323c:	2300      	movs	r3, #0
}
 800323e:	4618      	mov	r0, r3
 8003240:	3708      	adds	r7, #8
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}

08003246 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003246:	b580      	push	{r7, lr}
 8003248:	b082      	sub	sp, #8
 800324a:	af00      	add	r7, sp, #0
 800324c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d101      	bne.n	8003258 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003254:	2301      	movs	r3, #1
 8003256:	e049      	b.n	80032ec <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800325e:	b2db      	uxtb	r3, r3
 8003260:	2b00      	cmp	r3, #0
 8003262:	d106      	bne.n	8003272 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2200      	movs	r2, #0
 8003268:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800326c:	6878      	ldr	r0, [r7, #4]
 800326e:	f000 f841 	bl	80032f4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2202      	movs	r2, #2
 8003276:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681a      	ldr	r2, [r3, #0]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	3304      	adds	r3, #4
 8003282:	4619      	mov	r1, r3
 8003284:	4610      	mov	r0, r2
 8003286:	f000 fa4d 	bl	8003724 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2201      	movs	r2, #1
 800328e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2201      	movs	r2, #1
 8003296:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2201      	movs	r2, #1
 800329e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2201      	movs	r2, #1
 80032a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2201      	movs	r2, #1
 80032ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2201      	movs	r2, #1
 80032b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2201      	movs	r2, #1
 80032be:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2201      	movs	r2, #1
 80032c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2201      	movs	r2, #1
 80032ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2201      	movs	r2, #1
 80032d6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2201      	movs	r2, #1
 80032de:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2201      	movs	r2, #1
 80032e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80032ea:	2300      	movs	r3, #0
}
 80032ec:	4618      	mov	r0, r3
 80032ee:	3708      	adds	r7, #8
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bd80      	pop	{r7, pc}

080032f4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80032f4:	b480      	push	{r7}
 80032f6:	b083      	sub	sp, #12
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80032fc:	bf00      	nop
 80032fe:	370c      	adds	r7, #12
 8003300:	46bd      	mov	sp, r7
 8003302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003306:	4770      	bx	lr

08003308 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b084      	sub	sp, #16
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
 8003310:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d109      	bne.n	800332c <HAL_TIM_PWM_Start+0x24>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800331e:	b2db      	uxtb	r3, r3
 8003320:	2b01      	cmp	r3, #1
 8003322:	bf14      	ite	ne
 8003324:	2301      	movne	r3, #1
 8003326:	2300      	moveq	r3, #0
 8003328:	b2db      	uxtb	r3, r3
 800332a:	e03c      	b.n	80033a6 <HAL_TIM_PWM_Start+0x9e>
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	2b04      	cmp	r3, #4
 8003330:	d109      	bne.n	8003346 <HAL_TIM_PWM_Start+0x3e>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003338:	b2db      	uxtb	r3, r3
 800333a:	2b01      	cmp	r3, #1
 800333c:	bf14      	ite	ne
 800333e:	2301      	movne	r3, #1
 8003340:	2300      	moveq	r3, #0
 8003342:	b2db      	uxtb	r3, r3
 8003344:	e02f      	b.n	80033a6 <HAL_TIM_PWM_Start+0x9e>
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	2b08      	cmp	r3, #8
 800334a:	d109      	bne.n	8003360 <HAL_TIM_PWM_Start+0x58>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003352:	b2db      	uxtb	r3, r3
 8003354:	2b01      	cmp	r3, #1
 8003356:	bf14      	ite	ne
 8003358:	2301      	movne	r3, #1
 800335a:	2300      	moveq	r3, #0
 800335c:	b2db      	uxtb	r3, r3
 800335e:	e022      	b.n	80033a6 <HAL_TIM_PWM_Start+0x9e>
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	2b0c      	cmp	r3, #12
 8003364:	d109      	bne.n	800337a <HAL_TIM_PWM_Start+0x72>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800336c:	b2db      	uxtb	r3, r3
 800336e:	2b01      	cmp	r3, #1
 8003370:	bf14      	ite	ne
 8003372:	2301      	movne	r3, #1
 8003374:	2300      	moveq	r3, #0
 8003376:	b2db      	uxtb	r3, r3
 8003378:	e015      	b.n	80033a6 <HAL_TIM_PWM_Start+0x9e>
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	2b10      	cmp	r3, #16
 800337e:	d109      	bne.n	8003394 <HAL_TIM_PWM_Start+0x8c>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003386:	b2db      	uxtb	r3, r3
 8003388:	2b01      	cmp	r3, #1
 800338a:	bf14      	ite	ne
 800338c:	2301      	movne	r3, #1
 800338e:	2300      	moveq	r3, #0
 8003390:	b2db      	uxtb	r3, r3
 8003392:	e008      	b.n	80033a6 <HAL_TIM_PWM_Start+0x9e>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800339a:	b2db      	uxtb	r3, r3
 800339c:	2b01      	cmp	r3, #1
 800339e:	bf14      	ite	ne
 80033a0:	2301      	movne	r3, #1
 80033a2:	2300      	moveq	r3, #0
 80033a4:	b2db      	uxtb	r3, r3
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d001      	beq.n	80033ae <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80033aa:	2301      	movs	r3, #1
 80033ac:	e092      	b.n	80034d4 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d104      	bne.n	80033be <HAL_TIM_PWM_Start+0xb6>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2202      	movs	r2, #2
 80033b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80033bc:	e023      	b.n	8003406 <HAL_TIM_PWM_Start+0xfe>
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	2b04      	cmp	r3, #4
 80033c2:	d104      	bne.n	80033ce <HAL_TIM_PWM_Start+0xc6>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2202      	movs	r2, #2
 80033c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80033cc:	e01b      	b.n	8003406 <HAL_TIM_PWM_Start+0xfe>
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	2b08      	cmp	r3, #8
 80033d2:	d104      	bne.n	80033de <HAL_TIM_PWM_Start+0xd6>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2202      	movs	r2, #2
 80033d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80033dc:	e013      	b.n	8003406 <HAL_TIM_PWM_Start+0xfe>
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	2b0c      	cmp	r3, #12
 80033e2:	d104      	bne.n	80033ee <HAL_TIM_PWM_Start+0xe6>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2202      	movs	r2, #2
 80033e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80033ec:	e00b      	b.n	8003406 <HAL_TIM_PWM_Start+0xfe>
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	2b10      	cmp	r3, #16
 80033f2:	d104      	bne.n	80033fe <HAL_TIM_PWM_Start+0xf6>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2202      	movs	r2, #2
 80033f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80033fc:	e003      	b.n	8003406 <HAL_TIM_PWM_Start+0xfe>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2202      	movs	r2, #2
 8003402:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	2201      	movs	r2, #1
 800340c:	6839      	ldr	r1, [r7, #0]
 800340e:	4618      	mov	r0, r3
 8003410:	f000 fc86 	bl	8003d20 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a30      	ldr	r2, [pc, #192]	; (80034dc <HAL_TIM_PWM_Start+0x1d4>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d004      	beq.n	8003428 <HAL_TIM_PWM_Start+0x120>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a2f      	ldr	r2, [pc, #188]	; (80034e0 <HAL_TIM_PWM_Start+0x1d8>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d101      	bne.n	800342c <HAL_TIM_PWM_Start+0x124>
 8003428:	2301      	movs	r3, #1
 800342a:	e000      	b.n	800342e <HAL_TIM_PWM_Start+0x126>
 800342c:	2300      	movs	r3, #0
 800342e:	2b00      	cmp	r3, #0
 8003430:	d007      	beq.n	8003442 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003440:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a25      	ldr	r2, [pc, #148]	; (80034dc <HAL_TIM_PWM_Start+0x1d4>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d022      	beq.n	8003492 <HAL_TIM_PWM_Start+0x18a>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003454:	d01d      	beq.n	8003492 <HAL_TIM_PWM_Start+0x18a>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a22      	ldr	r2, [pc, #136]	; (80034e4 <HAL_TIM_PWM_Start+0x1dc>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d018      	beq.n	8003492 <HAL_TIM_PWM_Start+0x18a>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4a20      	ldr	r2, [pc, #128]	; (80034e8 <HAL_TIM_PWM_Start+0x1e0>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d013      	beq.n	8003492 <HAL_TIM_PWM_Start+0x18a>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a1f      	ldr	r2, [pc, #124]	; (80034ec <HAL_TIM_PWM_Start+0x1e4>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d00e      	beq.n	8003492 <HAL_TIM_PWM_Start+0x18a>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a19      	ldr	r2, [pc, #100]	; (80034e0 <HAL_TIM_PWM_Start+0x1d8>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d009      	beq.n	8003492 <HAL_TIM_PWM_Start+0x18a>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a1b      	ldr	r2, [pc, #108]	; (80034f0 <HAL_TIM_PWM_Start+0x1e8>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d004      	beq.n	8003492 <HAL_TIM_PWM_Start+0x18a>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a19      	ldr	r2, [pc, #100]	; (80034f4 <HAL_TIM_PWM_Start+0x1ec>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d115      	bne.n	80034be <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	689a      	ldr	r2, [r3, #8]
 8003498:	4b17      	ldr	r3, [pc, #92]	; (80034f8 <HAL_TIM_PWM_Start+0x1f0>)
 800349a:	4013      	ands	r3, r2
 800349c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	2b06      	cmp	r3, #6
 80034a2:	d015      	beq.n	80034d0 <HAL_TIM_PWM_Start+0x1c8>
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034aa:	d011      	beq.n	80034d0 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	681a      	ldr	r2, [r3, #0]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f042 0201 	orr.w	r2, r2, #1
 80034ba:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034bc:	e008      	b.n	80034d0 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	681a      	ldr	r2, [r3, #0]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f042 0201 	orr.w	r2, r2, #1
 80034cc:	601a      	str	r2, [r3, #0]
 80034ce:	e000      	b.n	80034d2 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034d0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80034d2:	2300      	movs	r3, #0
}
 80034d4:	4618      	mov	r0, r3
 80034d6:	3710      	adds	r7, #16
 80034d8:	46bd      	mov	sp, r7
 80034da:	bd80      	pop	{r7, pc}
 80034dc:	40010000 	.word	0x40010000
 80034e0:	40010400 	.word	0x40010400
 80034e4:	40000400 	.word	0x40000400
 80034e8:	40000800 	.word	0x40000800
 80034ec:	40000c00 	.word	0x40000c00
 80034f0:	40014000 	.word	0x40014000
 80034f4:	40001800 	.word	0x40001800
 80034f8:	00010007 	.word	0x00010007

080034fc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b086      	sub	sp, #24
 8003500:	af00      	add	r7, sp, #0
 8003502:	60f8      	str	r0, [r7, #12]
 8003504:	60b9      	str	r1, [r7, #8]
 8003506:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003508:	2300      	movs	r3, #0
 800350a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003512:	2b01      	cmp	r3, #1
 8003514:	d101      	bne.n	800351a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003516:	2302      	movs	r3, #2
 8003518:	e0ff      	b.n	800371a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	2201      	movs	r2, #1
 800351e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2b14      	cmp	r3, #20
 8003526:	f200 80f0 	bhi.w	800370a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800352a:	a201      	add	r2, pc, #4	; (adr r2, 8003530 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800352c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003530:	08003585 	.word	0x08003585
 8003534:	0800370b 	.word	0x0800370b
 8003538:	0800370b 	.word	0x0800370b
 800353c:	0800370b 	.word	0x0800370b
 8003540:	080035c5 	.word	0x080035c5
 8003544:	0800370b 	.word	0x0800370b
 8003548:	0800370b 	.word	0x0800370b
 800354c:	0800370b 	.word	0x0800370b
 8003550:	08003607 	.word	0x08003607
 8003554:	0800370b 	.word	0x0800370b
 8003558:	0800370b 	.word	0x0800370b
 800355c:	0800370b 	.word	0x0800370b
 8003560:	08003647 	.word	0x08003647
 8003564:	0800370b 	.word	0x0800370b
 8003568:	0800370b 	.word	0x0800370b
 800356c:	0800370b 	.word	0x0800370b
 8003570:	08003689 	.word	0x08003689
 8003574:	0800370b 	.word	0x0800370b
 8003578:	0800370b 	.word	0x0800370b
 800357c:	0800370b 	.word	0x0800370b
 8003580:	080036c9 	.word	0x080036c9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	68b9      	ldr	r1, [r7, #8]
 800358a:	4618      	mov	r0, r3
 800358c:	f000 f96a 	bl	8003864 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	699a      	ldr	r2, [r3, #24]
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f042 0208 	orr.w	r2, r2, #8
 800359e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	699a      	ldr	r2, [r3, #24]
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f022 0204 	bic.w	r2, r2, #4
 80035ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	6999      	ldr	r1, [r3, #24]
 80035b6:	68bb      	ldr	r3, [r7, #8]
 80035b8:	691a      	ldr	r2, [r3, #16]
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	430a      	orrs	r2, r1
 80035c0:	619a      	str	r2, [r3, #24]
      break;
 80035c2:	e0a5      	b.n	8003710 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	68b9      	ldr	r1, [r7, #8]
 80035ca:	4618      	mov	r0, r3
 80035cc:	f000 f9bc 	bl	8003948 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	699a      	ldr	r2, [r3, #24]
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80035de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	699a      	ldr	r2, [r3, #24]
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	6999      	ldr	r1, [r3, #24]
 80035f6:	68bb      	ldr	r3, [r7, #8]
 80035f8:	691b      	ldr	r3, [r3, #16]
 80035fa:	021a      	lsls	r2, r3, #8
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	430a      	orrs	r2, r1
 8003602:	619a      	str	r2, [r3, #24]
      break;
 8003604:	e084      	b.n	8003710 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	68b9      	ldr	r1, [r7, #8]
 800360c:	4618      	mov	r0, r3
 800360e:	f000 fa13 	bl	8003a38 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	69da      	ldr	r2, [r3, #28]
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f042 0208 	orr.w	r2, r2, #8
 8003620:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	69da      	ldr	r2, [r3, #28]
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f022 0204 	bic.w	r2, r2, #4
 8003630:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	69d9      	ldr	r1, [r3, #28]
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	691a      	ldr	r2, [r3, #16]
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	430a      	orrs	r2, r1
 8003642:	61da      	str	r2, [r3, #28]
      break;
 8003644:	e064      	b.n	8003710 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	68b9      	ldr	r1, [r7, #8]
 800364c:	4618      	mov	r0, r3
 800364e:	f000 fa69 	bl	8003b24 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	69da      	ldr	r2, [r3, #28]
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003660:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	69da      	ldr	r2, [r3, #28]
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003670:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	69d9      	ldr	r1, [r3, #28]
 8003678:	68bb      	ldr	r3, [r7, #8]
 800367a:	691b      	ldr	r3, [r3, #16]
 800367c:	021a      	lsls	r2, r3, #8
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	430a      	orrs	r2, r1
 8003684:	61da      	str	r2, [r3, #28]
      break;
 8003686:	e043      	b.n	8003710 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	68b9      	ldr	r1, [r7, #8]
 800368e:	4618      	mov	r0, r3
 8003690:	f000 faa0 	bl	8003bd4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f042 0208 	orr.w	r2, r2, #8
 80036a2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f022 0204 	bic.w	r2, r2, #4
 80036b2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80036ba:	68bb      	ldr	r3, [r7, #8]
 80036bc:	691a      	ldr	r2, [r3, #16]
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	430a      	orrs	r2, r1
 80036c4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80036c6:	e023      	b.n	8003710 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	68b9      	ldr	r1, [r7, #8]
 80036ce:	4618      	mov	r0, r3
 80036d0:	f000 fad2 	bl	8003c78 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80036e2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036f2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80036fa:	68bb      	ldr	r3, [r7, #8]
 80036fc:	691b      	ldr	r3, [r3, #16]
 80036fe:	021a      	lsls	r2, r3, #8
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	430a      	orrs	r2, r1
 8003706:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003708:	e002      	b.n	8003710 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800370a:	2301      	movs	r3, #1
 800370c:	75fb      	strb	r3, [r7, #23]
      break;
 800370e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	2200      	movs	r2, #0
 8003714:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003718:	7dfb      	ldrb	r3, [r7, #23]
}
 800371a:	4618      	mov	r0, r3
 800371c:	3718      	adds	r7, #24
 800371e:	46bd      	mov	sp, r7
 8003720:	bd80      	pop	{r7, pc}
 8003722:	bf00      	nop

08003724 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003724:	b480      	push	{r7}
 8003726:	b085      	sub	sp, #20
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
 800372c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	4a40      	ldr	r2, [pc, #256]	; (8003838 <TIM_Base_SetConfig+0x114>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d013      	beq.n	8003764 <TIM_Base_SetConfig+0x40>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003742:	d00f      	beq.n	8003764 <TIM_Base_SetConfig+0x40>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	4a3d      	ldr	r2, [pc, #244]	; (800383c <TIM_Base_SetConfig+0x118>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d00b      	beq.n	8003764 <TIM_Base_SetConfig+0x40>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	4a3c      	ldr	r2, [pc, #240]	; (8003840 <TIM_Base_SetConfig+0x11c>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d007      	beq.n	8003764 <TIM_Base_SetConfig+0x40>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	4a3b      	ldr	r2, [pc, #236]	; (8003844 <TIM_Base_SetConfig+0x120>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d003      	beq.n	8003764 <TIM_Base_SetConfig+0x40>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	4a3a      	ldr	r2, [pc, #232]	; (8003848 <TIM_Base_SetConfig+0x124>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d108      	bne.n	8003776 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800376a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	68fa      	ldr	r2, [r7, #12]
 8003772:	4313      	orrs	r3, r2
 8003774:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	4a2f      	ldr	r2, [pc, #188]	; (8003838 <TIM_Base_SetConfig+0x114>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d02b      	beq.n	80037d6 <TIM_Base_SetConfig+0xb2>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003784:	d027      	beq.n	80037d6 <TIM_Base_SetConfig+0xb2>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	4a2c      	ldr	r2, [pc, #176]	; (800383c <TIM_Base_SetConfig+0x118>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d023      	beq.n	80037d6 <TIM_Base_SetConfig+0xb2>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	4a2b      	ldr	r2, [pc, #172]	; (8003840 <TIM_Base_SetConfig+0x11c>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d01f      	beq.n	80037d6 <TIM_Base_SetConfig+0xb2>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	4a2a      	ldr	r2, [pc, #168]	; (8003844 <TIM_Base_SetConfig+0x120>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d01b      	beq.n	80037d6 <TIM_Base_SetConfig+0xb2>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	4a29      	ldr	r2, [pc, #164]	; (8003848 <TIM_Base_SetConfig+0x124>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d017      	beq.n	80037d6 <TIM_Base_SetConfig+0xb2>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	4a28      	ldr	r2, [pc, #160]	; (800384c <TIM_Base_SetConfig+0x128>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d013      	beq.n	80037d6 <TIM_Base_SetConfig+0xb2>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	4a27      	ldr	r2, [pc, #156]	; (8003850 <TIM_Base_SetConfig+0x12c>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d00f      	beq.n	80037d6 <TIM_Base_SetConfig+0xb2>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	4a26      	ldr	r2, [pc, #152]	; (8003854 <TIM_Base_SetConfig+0x130>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d00b      	beq.n	80037d6 <TIM_Base_SetConfig+0xb2>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	4a25      	ldr	r2, [pc, #148]	; (8003858 <TIM_Base_SetConfig+0x134>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d007      	beq.n	80037d6 <TIM_Base_SetConfig+0xb2>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	4a24      	ldr	r2, [pc, #144]	; (800385c <TIM_Base_SetConfig+0x138>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d003      	beq.n	80037d6 <TIM_Base_SetConfig+0xb2>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	4a23      	ldr	r2, [pc, #140]	; (8003860 <TIM_Base_SetConfig+0x13c>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d108      	bne.n	80037e8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	68db      	ldr	r3, [r3, #12]
 80037e2:	68fa      	ldr	r2, [r7, #12]
 80037e4:	4313      	orrs	r3, r2
 80037e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	695b      	ldr	r3, [r3, #20]
 80037f2:	4313      	orrs	r3, r2
 80037f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	68fa      	ldr	r2, [r7, #12]
 80037fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	689a      	ldr	r2, [r3, #8]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	681a      	ldr	r2, [r3, #0]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	4a0a      	ldr	r2, [pc, #40]	; (8003838 <TIM_Base_SetConfig+0x114>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d003      	beq.n	800381c <TIM_Base_SetConfig+0xf8>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	4a0c      	ldr	r2, [pc, #48]	; (8003848 <TIM_Base_SetConfig+0x124>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d103      	bne.n	8003824 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	691a      	ldr	r2, [r3, #16]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2201      	movs	r2, #1
 8003828:	615a      	str	r2, [r3, #20]
}
 800382a:	bf00      	nop
 800382c:	3714      	adds	r7, #20
 800382e:	46bd      	mov	sp, r7
 8003830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003834:	4770      	bx	lr
 8003836:	bf00      	nop
 8003838:	40010000 	.word	0x40010000
 800383c:	40000400 	.word	0x40000400
 8003840:	40000800 	.word	0x40000800
 8003844:	40000c00 	.word	0x40000c00
 8003848:	40010400 	.word	0x40010400
 800384c:	40014000 	.word	0x40014000
 8003850:	40014400 	.word	0x40014400
 8003854:	40014800 	.word	0x40014800
 8003858:	40001800 	.word	0x40001800
 800385c:	40001c00 	.word	0x40001c00
 8003860:	40002000 	.word	0x40002000

08003864 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003864:	b480      	push	{r7}
 8003866:	b087      	sub	sp, #28
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
 800386c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6a1b      	ldr	r3, [r3, #32]
 8003872:	f023 0201 	bic.w	r2, r3, #1
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6a1b      	ldr	r3, [r3, #32]
 800387e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	699b      	ldr	r3, [r3, #24]
 800388a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800388c:	68fa      	ldr	r2, [r7, #12]
 800388e:	4b2b      	ldr	r3, [pc, #172]	; (800393c <TIM_OC1_SetConfig+0xd8>)
 8003890:	4013      	ands	r3, r2
 8003892:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	f023 0303 	bic.w	r3, r3, #3
 800389a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	68fa      	ldr	r2, [r7, #12]
 80038a2:	4313      	orrs	r3, r2
 80038a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80038a6:	697b      	ldr	r3, [r7, #20]
 80038a8:	f023 0302 	bic.w	r3, r3, #2
 80038ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	689b      	ldr	r3, [r3, #8]
 80038b2:	697a      	ldr	r2, [r7, #20]
 80038b4:	4313      	orrs	r3, r2
 80038b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	4a21      	ldr	r2, [pc, #132]	; (8003940 <TIM_OC1_SetConfig+0xdc>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d003      	beq.n	80038c8 <TIM_OC1_SetConfig+0x64>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	4a20      	ldr	r2, [pc, #128]	; (8003944 <TIM_OC1_SetConfig+0xe0>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d10c      	bne.n	80038e2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80038c8:	697b      	ldr	r3, [r7, #20]
 80038ca:	f023 0308 	bic.w	r3, r3, #8
 80038ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	68db      	ldr	r3, [r3, #12]
 80038d4:	697a      	ldr	r2, [r7, #20]
 80038d6:	4313      	orrs	r3, r2
 80038d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80038da:	697b      	ldr	r3, [r7, #20]
 80038dc:	f023 0304 	bic.w	r3, r3, #4
 80038e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	4a16      	ldr	r2, [pc, #88]	; (8003940 <TIM_OC1_SetConfig+0xdc>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d003      	beq.n	80038f2 <TIM_OC1_SetConfig+0x8e>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	4a15      	ldr	r2, [pc, #84]	; (8003944 <TIM_OC1_SetConfig+0xe0>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d111      	bne.n	8003916 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80038f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003900:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	695b      	ldr	r3, [r3, #20]
 8003906:	693a      	ldr	r2, [r7, #16]
 8003908:	4313      	orrs	r3, r2
 800390a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	699b      	ldr	r3, [r3, #24]
 8003910:	693a      	ldr	r2, [r7, #16]
 8003912:	4313      	orrs	r3, r2
 8003914:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	693a      	ldr	r2, [r7, #16]
 800391a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	68fa      	ldr	r2, [r7, #12]
 8003920:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	685a      	ldr	r2, [r3, #4]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	697a      	ldr	r2, [r7, #20]
 800392e:	621a      	str	r2, [r3, #32]
}
 8003930:	bf00      	nop
 8003932:	371c      	adds	r7, #28
 8003934:	46bd      	mov	sp, r7
 8003936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393a:	4770      	bx	lr
 800393c:	fffeff8f 	.word	0xfffeff8f
 8003940:	40010000 	.word	0x40010000
 8003944:	40010400 	.word	0x40010400

08003948 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003948:	b480      	push	{r7}
 800394a:	b087      	sub	sp, #28
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
 8003950:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6a1b      	ldr	r3, [r3, #32]
 8003956:	f023 0210 	bic.w	r2, r3, #16
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6a1b      	ldr	r3, [r3, #32]
 8003962:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	699b      	ldr	r3, [r3, #24]
 800396e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003970:	68fa      	ldr	r2, [r7, #12]
 8003972:	4b2e      	ldr	r3, [pc, #184]	; (8003a2c <TIM_OC2_SetConfig+0xe4>)
 8003974:	4013      	ands	r3, r2
 8003976:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800397e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	021b      	lsls	r3, r3, #8
 8003986:	68fa      	ldr	r2, [r7, #12]
 8003988:	4313      	orrs	r3, r2
 800398a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800398c:	697b      	ldr	r3, [r7, #20]
 800398e:	f023 0320 	bic.w	r3, r3, #32
 8003992:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	689b      	ldr	r3, [r3, #8]
 8003998:	011b      	lsls	r3, r3, #4
 800399a:	697a      	ldr	r2, [r7, #20]
 800399c:	4313      	orrs	r3, r2
 800399e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	4a23      	ldr	r2, [pc, #140]	; (8003a30 <TIM_OC2_SetConfig+0xe8>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d003      	beq.n	80039b0 <TIM_OC2_SetConfig+0x68>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	4a22      	ldr	r2, [pc, #136]	; (8003a34 <TIM_OC2_SetConfig+0xec>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d10d      	bne.n	80039cc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80039b0:	697b      	ldr	r3, [r7, #20]
 80039b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80039b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	68db      	ldr	r3, [r3, #12]
 80039bc:	011b      	lsls	r3, r3, #4
 80039be:	697a      	ldr	r2, [r7, #20]
 80039c0:	4313      	orrs	r3, r2
 80039c2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80039c4:	697b      	ldr	r3, [r7, #20]
 80039c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80039ca:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	4a18      	ldr	r2, [pc, #96]	; (8003a30 <TIM_OC2_SetConfig+0xe8>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d003      	beq.n	80039dc <TIM_OC2_SetConfig+0x94>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	4a17      	ldr	r2, [pc, #92]	; (8003a34 <TIM_OC2_SetConfig+0xec>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d113      	bne.n	8003a04 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80039dc:	693b      	ldr	r3, [r7, #16]
 80039de:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80039e2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80039e4:	693b      	ldr	r3, [r7, #16]
 80039e6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80039ea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	695b      	ldr	r3, [r3, #20]
 80039f0:	009b      	lsls	r3, r3, #2
 80039f2:	693a      	ldr	r2, [r7, #16]
 80039f4:	4313      	orrs	r3, r2
 80039f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	699b      	ldr	r3, [r3, #24]
 80039fc:	009b      	lsls	r3, r3, #2
 80039fe:	693a      	ldr	r2, [r7, #16]
 8003a00:	4313      	orrs	r3, r2
 8003a02:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	693a      	ldr	r2, [r7, #16]
 8003a08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	68fa      	ldr	r2, [r7, #12]
 8003a0e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	685a      	ldr	r2, [r3, #4]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	697a      	ldr	r2, [r7, #20]
 8003a1c:	621a      	str	r2, [r3, #32]
}
 8003a1e:	bf00      	nop
 8003a20:	371c      	adds	r7, #28
 8003a22:	46bd      	mov	sp, r7
 8003a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a28:	4770      	bx	lr
 8003a2a:	bf00      	nop
 8003a2c:	feff8fff 	.word	0xfeff8fff
 8003a30:	40010000 	.word	0x40010000
 8003a34:	40010400 	.word	0x40010400

08003a38 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b087      	sub	sp, #28
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
 8003a40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6a1b      	ldr	r3, [r3, #32]
 8003a46:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6a1b      	ldr	r3, [r3, #32]
 8003a52:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	69db      	ldr	r3, [r3, #28]
 8003a5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003a60:	68fa      	ldr	r2, [r7, #12]
 8003a62:	4b2d      	ldr	r3, [pc, #180]	; (8003b18 <TIM_OC3_SetConfig+0xe0>)
 8003a64:	4013      	ands	r3, r2
 8003a66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	f023 0303 	bic.w	r3, r3, #3
 8003a6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	68fa      	ldr	r2, [r7, #12]
 8003a76:	4313      	orrs	r3, r2
 8003a78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003a7a:	697b      	ldr	r3, [r7, #20]
 8003a7c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003a80:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	689b      	ldr	r3, [r3, #8]
 8003a86:	021b      	lsls	r3, r3, #8
 8003a88:	697a      	ldr	r2, [r7, #20]
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	4a22      	ldr	r2, [pc, #136]	; (8003b1c <TIM_OC3_SetConfig+0xe4>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d003      	beq.n	8003a9e <TIM_OC3_SetConfig+0x66>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	4a21      	ldr	r2, [pc, #132]	; (8003b20 <TIM_OC3_SetConfig+0xe8>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d10d      	bne.n	8003aba <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003a9e:	697b      	ldr	r3, [r7, #20]
 8003aa0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003aa4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	68db      	ldr	r3, [r3, #12]
 8003aaa:	021b      	lsls	r3, r3, #8
 8003aac:	697a      	ldr	r2, [r7, #20]
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003ab2:	697b      	ldr	r3, [r7, #20]
 8003ab4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003ab8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	4a17      	ldr	r2, [pc, #92]	; (8003b1c <TIM_OC3_SetConfig+0xe4>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d003      	beq.n	8003aca <TIM_OC3_SetConfig+0x92>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	4a16      	ldr	r2, [pc, #88]	; (8003b20 <TIM_OC3_SetConfig+0xe8>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d113      	bne.n	8003af2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003aca:	693b      	ldr	r3, [r7, #16]
 8003acc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003ad0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003ad2:	693b      	ldr	r3, [r7, #16]
 8003ad4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003ad8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	695b      	ldr	r3, [r3, #20]
 8003ade:	011b      	lsls	r3, r3, #4
 8003ae0:	693a      	ldr	r2, [r7, #16]
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	699b      	ldr	r3, [r3, #24]
 8003aea:	011b      	lsls	r3, r3, #4
 8003aec:	693a      	ldr	r2, [r7, #16]
 8003aee:	4313      	orrs	r3, r2
 8003af0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	693a      	ldr	r2, [r7, #16]
 8003af6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	68fa      	ldr	r2, [r7, #12]
 8003afc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	685a      	ldr	r2, [r3, #4]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	697a      	ldr	r2, [r7, #20]
 8003b0a:	621a      	str	r2, [r3, #32]
}
 8003b0c:	bf00      	nop
 8003b0e:	371c      	adds	r7, #28
 8003b10:	46bd      	mov	sp, r7
 8003b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b16:	4770      	bx	lr
 8003b18:	fffeff8f 	.word	0xfffeff8f
 8003b1c:	40010000 	.word	0x40010000
 8003b20:	40010400 	.word	0x40010400

08003b24 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003b24:	b480      	push	{r7}
 8003b26:	b087      	sub	sp, #28
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
 8003b2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6a1b      	ldr	r3, [r3, #32]
 8003b32:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6a1b      	ldr	r3, [r3, #32]
 8003b3e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	69db      	ldr	r3, [r3, #28]
 8003b4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003b4c:	68fa      	ldr	r2, [r7, #12]
 8003b4e:	4b1e      	ldr	r3, [pc, #120]	; (8003bc8 <TIM_OC4_SetConfig+0xa4>)
 8003b50:	4013      	ands	r3, r2
 8003b52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b5a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	021b      	lsls	r3, r3, #8
 8003b62:	68fa      	ldr	r2, [r7, #12]
 8003b64:	4313      	orrs	r3, r2
 8003b66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003b68:	693b      	ldr	r3, [r7, #16]
 8003b6a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003b6e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	689b      	ldr	r3, [r3, #8]
 8003b74:	031b      	lsls	r3, r3, #12
 8003b76:	693a      	ldr	r2, [r7, #16]
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	4a13      	ldr	r2, [pc, #76]	; (8003bcc <TIM_OC4_SetConfig+0xa8>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d003      	beq.n	8003b8c <TIM_OC4_SetConfig+0x68>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	4a12      	ldr	r2, [pc, #72]	; (8003bd0 <TIM_OC4_SetConfig+0xac>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d109      	bne.n	8003ba0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003b8c:	697b      	ldr	r3, [r7, #20]
 8003b8e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003b92:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	695b      	ldr	r3, [r3, #20]
 8003b98:	019b      	lsls	r3, r3, #6
 8003b9a:	697a      	ldr	r2, [r7, #20]
 8003b9c:	4313      	orrs	r3, r2
 8003b9e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	697a      	ldr	r2, [r7, #20]
 8003ba4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	68fa      	ldr	r2, [r7, #12]
 8003baa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	685a      	ldr	r2, [r3, #4]
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	693a      	ldr	r2, [r7, #16]
 8003bb8:	621a      	str	r2, [r3, #32]
}
 8003bba:	bf00      	nop
 8003bbc:	371c      	adds	r7, #28
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc4:	4770      	bx	lr
 8003bc6:	bf00      	nop
 8003bc8:	feff8fff 	.word	0xfeff8fff
 8003bcc:	40010000 	.word	0x40010000
 8003bd0:	40010400 	.word	0x40010400

08003bd4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	b087      	sub	sp, #28
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
 8003bdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6a1b      	ldr	r3, [r3, #32]
 8003be2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6a1b      	ldr	r3, [r3, #32]
 8003bee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003bfc:	68fa      	ldr	r2, [r7, #12]
 8003bfe:	4b1b      	ldr	r3, [pc, #108]	; (8003c6c <TIM_OC5_SetConfig+0x98>)
 8003c00:	4013      	ands	r3, r2
 8003c02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	68fa      	ldr	r2, [r7, #12]
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003c0e:	693b      	ldr	r3, [r7, #16]
 8003c10:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003c14:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	689b      	ldr	r3, [r3, #8]
 8003c1a:	041b      	lsls	r3, r3, #16
 8003c1c:	693a      	ldr	r2, [r7, #16]
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	4a12      	ldr	r2, [pc, #72]	; (8003c70 <TIM_OC5_SetConfig+0x9c>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d003      	beq.n	8003c32 <TIM_OC5_SetConfig+0x5e>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	4a11      	ldr	r2, [pc, #68]	; (8003c74 <TIM_OC5_SetConfig+0xa0>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d109      	bne.n	8003c46 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003c32:	697b      	ldr	r3, [r7, #20]
 8003c34:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c38:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	695b      	ldr	r3, [r3, #20]
 8003c3e:	021b      	lsls	r3, r3, #8
 8003c40:	697a      	ldr	r2, [r7, #20]
 8003c42:	4313      	orrs	r3, r2
 8003c44:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	697a      	ldr	r2, [r7, #20]
 8003c4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	68fa      	ldr	r2, [r7, #12]
 8003c50:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	685a      	ldr	r2, [r3, #4]
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	693a      	ldr	r2, [r7, #16]
 8003c5e:	621a      	str	r2, [r3, #32]
}
 8003c60:	bf00      	nop
 8003c62:	371c      	adds	r7, #28
 8003c64:	46bd      	mov	sp, r7
 8003c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6a:	4770      	bx	lr
 8003c6c:	fffeff8f 	.word	0xfffeff8f
 8003c70:	40010000 	.word	0x40010000
 8003c74:	40010400 	.word	0x40010400

08003c78 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003c78:	b480      	push	{r7}
 8003c7a:	b087      	sub	sp, #28
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
 8003c80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6a1b      	ldr	r3, [r3, #32]
 8003c86:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6a1b      	ldr	r3, [r3, #32]
 8003c92:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003ca0:	68fa      	ldr	r2, [r7, #12]
 8003ca2:	4b1c      	ldr	r3, [pc, #112]	; (8003d14 <TIM_OC6_SetConfig+0x9c>)
 8003ca4:	4013      	ands	r3, r2
 8003ca6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	021b      	lsls	r3, r3, #8
 8003cae:	68fa      	ldr	r2, [r7, #12]
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003cb4:	693b      	ldr	r3, [r7, #16]
 8003cb6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003cba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	689b      	ldr	r3, [r3, #8]
 8003cc0:	051b      	lsls	r3, r3, #20
 8003cc2:	693a      	ldr	r2, [r7, #16]
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	4a13      	ldr	r2, [pc, #76]	; (8003d18 <TIM_OC6_SetConfig+0xa0>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d003      	beq.n	8003cd8 <TIM_OC6_SetConfig+0x60>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	4a12      	ldr	r2, [pc, #72]	; (8003d1c <TIM_OC6_SetConfig+0xa4>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d109      	bne.n	8003cec <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003cd8:	697b      	ldr	r3, [r7, #20]
 8003cda:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003cde:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	695b      	ldr	r3, [r3, #20]
 8003ce4:	029b      	lsls	r3, r3, #10
 8003ce6:	697a      	ldr	r2, [r7, #20]
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	697a      	ldr	r2, [r7, #20]
 8003cf0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	68fa      	ldr	r2, [r7, #12]
 8003cf6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	685a      	ldr	r2, [r3, #4]
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	693a      	ldr	r2, [r7, #16]
 8003d04:	621a      	str	r2, [r3, #32]
}
 8003d06:	bf00      	nop
 8003d08:	371c      	adds	r7, #28
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d10:	4770      	bx	lr
 8003d12:	bf00      	nop
 8003d14:	feff8fff 	.word	0xfeff8fff
 8003d18:	40010000 	.word	0x40010000
 8003d1c:	40010400 	.word	0x40010400

08003d20 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003d20:	b480      	push	{r7}
 8003d22:	b087      	sub	sp, #28
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	60f8      	str	r0, [r7, #12]
 8003d28:	60b9      	str	r1, [r7, #8]
 8003d2a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003d2c:	68bb      	ldr	r3, [r7, #8]
 8003d2e:	f003 031f 	and.w	r3, r3, #31
 8003d32:	2201      	movs	r2, #1
 8003d34:	fa02 f303 	lsl.w	r3, r2, r3
 8003d38:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	6a1a      	ldr	r2, [r3, #32]
 8003d3e:	697b      	ldr	r3, [r7, #20]
 8003d40:	43db      	mvns	r3, r3
 8003d42:	401a      	ands	r2, r3
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	6a1a      	ldr	r2, [r3, #32]
 8003d4c:	68bb      	ldr	r3, [r7, #8]
 8003d4e:	f003 031f 	and.w	r3, r3, #31
 8003d52:	6879      	ldr	r1, [r7, #4]
 8003d54:	fa01 f303 	lsl.w	r3, r1, r3
 8003d58:	431a      	orrs	r2, r3
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	621a      	str	r2, [r3, #32]
}
 8003d5e:	bf00      	nop
 8003d60:	371c      	adds	r7, #28
 8003d62:	46bd      	mov	sp, r7
 8003d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d68:	4770      	bx	lr

08003d6a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d6a:	b580      	push	{r7, lr}
 8003d6c:	b082      	sub	sp, #8
 8003d6e:	af00      	add	r7, sp, #0
 8003d70:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d101      	bne.n	8003d7c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d78:	2301      	movs	r3, #1
 8003d7a:	e040      	b.n	8003dfe <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d106      	bne.n	8003d92 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2200      	movs	r2, #0
 8003d88:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d8c:	6878      	ldr	r0, [r7, #4]
 8003d8e:	f7fd f857 	bl	8000e40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2224      	movs	r2, #36	; 0x24
 8003d96:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	681a      	ldr	r2, [r3, #0]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f022 0201 	bic.w	r2, r2, #1
 8003da6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003da8:	6878      	ldr	r0, [r7, #4]
 8003daa:	f000 f8af 	bl	8003f0c <UART_SetConfig>
 8003dae:	4603      	mov	r3, r0
 8003db0:	2b01      	cmp	r3, #1
 8003db2:	d101      	bne.n	8003db8 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003db4:	2301      	movs	r3, #1
 8003db6:	e022      	b.n	8003dfe <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d002      	beq.n	8003dc6 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003dc0:	6878      	ldr	r0, [r7, #4]
 8003dc2:	f000 fb07 	bl	80043d4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	685a      	ldr	r2, [r3, #4]
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003dd4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	689a      	ldr	r2, [r3, #8]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003de4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	681a      	ldr	r2, [r3, #0]
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f042 0201 	orr.w	r2, r2, #1
 8003df4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003df6:	6878      	ldr	r0, [r7, #4]
 8003df8:	f000 fb8e 	bl	8004518 <UART_CheckIdleState>
 8003dfc:	4603      	mov	r3, r0
}
 8003dfe:	4618      	mov	r0, r3
 8003e00:	3708      	adds	r7, #8
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bd80      	pop	{r7, pc}

08003e06 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e06:	b580      	push	{r7, lr}
 8003e08:	b08a      	sub	sp, #40	; 0x28
 8003e0a:	af02      	add	r7, sp, #8
 8003e0c:	60f8      	str	r0, [r7, #12]
 8003e0e:	60b9      	str	r1, [r7, #8]
 8003e10:	603b      	str	r3, [r7, #0]
 8003e12:	4613      	mov	r3, r2
 8003e14:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e1a:	2b20      	cmp	r3, #32
 8003e1c:	d171      	bne.n	8003f02 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e1e:	68bb      	ldr	r3, [r7, #8]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d002      	beq.n	8003e2a <HAL_UART_Transmit+0x24>
 8003e24:	88fb      	ldrh	r3, [r7, #6]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d101      	bne.n	8003e2e <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	e06a      	b.n	8003f04 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	2200      	movs	r2, #0
 8003e32:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	2221      	movs	r2, #33	; 0x21
 8003e3a:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003e3c:	f7fd f9dc 	bl	80011f8 <HAL_GetTick>
 8003e40:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	88fa      	ldrh	r2, [r7, #6]
 8003e46:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	88fa      	ldrh	r2, [r7, #6]
 8003e4e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	689b      	ldr	r3, [r3, #8]
 8003e56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e5a:	d108      	bne.n	8003e6e <HAL_UART_Transmit+0x68>
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	691b      	ldr	r3, [r3, #16]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d104      	bne.n	8003e6e <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003e64:	2300      	movs	r3, #0
 8003e66:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003e68:	68bb      	ldr	r3, [r7, #8]
 8003e6a:	61bb      	str	r3, [r7, #24]
 8003e6c:	e003      	b.n	8003e76 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003e6e:	68bb      	ldr	r3, [r7, #8]
 8003e70:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003e72:	2300      	movs	r3, #0
 8003e74:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003e76:	e02c      	b.n	8003ed2 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	9300      	str	r3, [sp, #0]
 8003e7c:	697b      	ldr	r3, [r7, #20]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	2180      	movs	r1, #128	; 0x80
 8003e82:	68f8      	ldr	r0, [r7, #12]
 8003e84:	f000 fb95 	bl	80045b2 <UART_WaitOnFlagUntilTimeout>
 8003e88:	4603      	mov	r3, r0
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d001      	beq.n	8003e92 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8003e8e:	2303      	movs	r3, #3
 8003e90:	e038      	b.n	8003f04 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003e92:	69fb      	ldr	r3, [r7, #28]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d10b      	bne.n	8003eb0 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003e98:	69bb      	ldr	r3, [r7, #24]
 8003e9a:	881b      	ldrh	r3, [r3, #0]
 8003e9c:	461a      	mov	r2, r3
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ea6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003ea8:	69bb      	ldr	r3, [r7, #24]
 8003eaa:	3302      	adds	r3, #2
 8003eac:	61bb      	str	r3, [r7, #24]
 8003eae:	e007      	b.n	8003ec0 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003eb0:	69fb      	ldr	r3, [r7, #28]
 8003eb2:	781a      	ldrb	r2, [r3, #0]
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003eba:	69fb      	ldr	r3, [r7, #28]
 8003ebc:	3301      	adds	r3, #1
 8003ebe:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003ec6:	b29b      	uxth	r3, r3
 8003ec8:	3b01      	subs	r3, #1
 8003eca:	b29a      	uxth	r2, r3
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003ed8:	b29b      	uxth	r3, r3
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d1cc      	bne.n	8003e78 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	9300      	str	r3, [sp, #0]
 8003ee2:	697b      	ldr	r3, [r7, #20]
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	2140      	movs	r1, #64	; 0x40
 8003ee8:	68f8      	ldr	r0, [r7, #12]
 8003eea:	f000 fb62 	bl	80045b2 <UART_WaitOnFlagUntilTimeout>
 8003eee:	4603      	mov	r3, r0
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d001      	beq.n	8003ef8 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8003ef4:	2303      	movs	r3, #3
 8003ef6:	e005      	b.n	8003f04 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	2220      	movs	r2, #32
 8003efc:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003efe:	2300      	movs	r3, #0
 8003f00:	e000      	b.n	8003f04 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003f02:	2302      	movs	r3, #2
  }
}
 8003f04:	4618      	mov	r0, r3
 8003f06:	3720      	adds	r7, #32
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	bd80      	pop	{r7, pc}

08003f0c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b088      	sub	sp, #32
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003f14:	2300      	movs	r3, #0
 8003f16:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	689a      	ldr	r2, [r3, #8]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	691b      	ldr	r3, [r3, #16]
 8003f20:	431a      	orrs	r2, r3
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	695b      	ldr	r3, [r3, #20]
 8003f26:	431a      	orrs	r2, r3
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	69db      	ldr	r3, [r3, #28]
 8003f2c:	4313      	orrs	r3, r2
 8003f2e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	681a      	ldr	r2, [r3, #0]
 8003f36:	4ba6      	ldr	r3, [pc, #664]	; (80041d0 <UART_SetConfig+0x2c4>)
 8003f38:	4013      	ands	r3, r2
 8003f3a:	687a      	ldr	r2, [r7, #4]
 8003f3c:	6812      	ldr	r2, [r2, #0]
 8003f3e:	6979      	ldr	r1, [r7, #20]
 8003f40:	430b      	orrs	r3, r1
 8003f42:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	68da      	ldr	r2, [r3, #12]
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	430a      	orrs	r2, r1
 8003f58:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	699b      	ldr	r3, [r3, #24]
 8003f5e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6a1b      	ldr	r3, [r3, #32]
 8003f64:	697a      	ldr	r2, [r7, #20]
 8003f66:	4313      	orrs	r3, r2
 8003f68:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	689b      	ldr	r3, [r3, #8]
 8003f70:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	697a      	ldr	r2, [r7, #20]
 8003f7a:	430a      	orrs	r2, r1
 8003f7c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4a94      	ldr	r2, [pc, #592]	; (80041d4 <UART_SetConfig+0x2c8>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d120      	bne.n	8003fca <UART_SetConfig+0xbe>
 8003f88:	4b93      	ldr	r3, [pc, #588]	; (80041d8 <UART_SetConfig+0x2cc>)
 8003f8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f8e:	f003 0303 	and.w	r3, r3, #3
 8003f92:	2b03      	cmp	r3, #3
 8003f94:	d816      	bhi.n	8003fc4 <UART_SetConfig+0xb8>
 8003f96:	a201      	add	r2, pc, #4	; (adr r2, 8003f9c <UART_SetConfig+0x90>)
 8003f98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f9c:	08003fad 	.word	0x08003fad
 8003fa0:	08003fb9 	.word	0x08003fb9
 8003fa4:	08003fb3 	.word	0x08003fb3
 8003fa8:	08003fbf 	.word	0x08003fbf
 8003fac:	2301      	movs	r3, #1
 8003fae:	77fb      	strb	r3, [r7, #31]
 8003fb0:	e150      	b.n	8004254 <UART_SetConfig+0x348>
 8003fb2:	2302      	movs	r3, #2
 8003fb4:	77fb      	strb	r3, [r7, #31]
 8003fb6:	e14d      	b.n	8004254 <UART_SetConfig+0x348>
 8003fb8:	2304      	movs	r3, #4
 8003fba:	77fb      	strb	r3, [r7, #31]
 8003fbc:	e14a      	b.n	8004254 <UART_SetConfig+0x348>
 8003fbe:	2308      	movs	r3, #8
 8003fc0:	77fb      	strb	r3, [r7, #31]
 8003fc2:	e147      	b.n	8004254 <UART_SetConfig+0x348>
 8003fc4:	2310      	movs	r3, #16
 8003fc6:	77fb      	strb	r3, [r7, #31]
 8003fc8:	e144      	b.n	8004254 <UART_SetConfig+0x348>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a83      	ldr	r2, [pc, #524]	; (80041dc <UART_SetConfig+0x2d0>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d132      	bne.n	800403a <UART_SetConfig+0x12e>
 8003fd4:	4b80      	ldr	r3, [pc, #512]	; (80041d8 <UART_SetConfig+0x2cc>)
 8003fd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fda:	f003 030c 	and.w	r3, r3, #12
 8003fde:	2b0c      	cmp	r3, #12
 8003fe0:	d828      	bhi.n	8004034 <UART_SetConfig+0x128>
 8003fe2:	a201      	add	r2, pc, #4	; (adr r2, 8003fe8 <UART_SetConfig+0xdc>)
 8003fe4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fe8:	0800401d 	.word	0x0800401d
 8003fec:	08004035 	.word	0x08004035
 8003ff0:	08004035 	.word	0x08004035
 8003ff4:	08004035 	.word	0x08004035
 8003ff8:	08004029 	.word	0x08004029
 8003ffc:	08004035 	.word	0x08004035
 8004000:	08004035 	.word	0x08004035
 8004004:	08004035 	.word	0x08004035
 8004008:	08004023 	.word	0x08004023
 800400c:	08004035 	.word	0x08004035
 8004010:	08004035 	.word	0x08004035
 8004014:	08004035 	.word	0x08004035
 8004018:	0800402f 	.word	0x0800402f
 800401c:	2300      	movs	r3, #0
 800401e:	77fb      	strb	r3, [r7, #31]
 8004020:	e118      	b.n	8004254 <UART_SetConfig+0x348>
 8004022:	2302      	movs	r3, #2
 8004024:	77fb      	strb	r3, [r7, #31]
 8004026:	e115      	b.n	8004254 <UART_SetConfig+0x348>
 8004028:	2304      	movs	r3, #4
 800402a:	77fb      	strb	r3, [r7, #31]
 800402c:	e112      	b.n	8004254 <UART_SetConfig+0x348>
 800402e:	2308      	movs	r3, #8
 8004030:	77fb      	strb	r3, [r7, #31]
 8004032:	e10f      	b.n	8004254 <UART_SetConfig+0x348>
 8004034:	2310      	movs	r3, #16
 8004036:	77fb      	strb	r3, [r7, #31]
 8004038:	e10c      	b.n	8004254 <UART_SetConfig+0x348>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4a68      	ldr	r2, [pc, #416]	; (80041e0 <UART_SetConfig+0x2d4>)
 8004040:	4293      	cmp	r3, r2
 8004042:	d120      	bne.n	8004086 <UART_SetConfig+0x17a>
 8004044:	4b64      	ldr	r3, [pc, #400]	; (80041d8 <UART_SetConfig+0x2cc>)
 8004046:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800404a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800404e:	2b30      	cmp	r3, #48	; 0x30
 8004050:	d013      	beq.n	800407a <UART_SetConfig+0x16e>
 8004052:	2b30      	cmp	r3, #48	; 0x30
 8004054:	d814      	bhi.n	8004080 <UART_SetConfig+0x174>
 8004056:	2b20      	cmp	r3, #32
 8004058:	d009      	beq.n	800406e <UART_SetConfig+0x162>
 800405a:	2b20      	cmp	r3, #32
 800405c:	d810      	bhi.n	8004080 <UART_SetConfig+0x174>
 800405e:	2b00      	cmp	r3, #0
 8004060:	d002      	beq.n	8004068 <UART_SetConfig+0x15c>
 8004062:	2b10      	cmp	r3, #16
 8004064:	d006      	beq.n	8004074 <UART_SetConfig+0x168>
 8004066:	e00b      	b.n	8004080 <UART_SetConfig+0x174>
 8004068:	2300      	movs	r3, #0
 800406a:	77fb      	strb	r3, [r7, #31]
 800406c:	e0f2      	b.n	8004254 <UART_SetConfig+0x348>
 800406e:	2302      	movs	r3, #2
 8004070:	77fb      	strb	r3, [r7, #31]
 8004072:	e0ef      	b.n	8004254 <UART_SetConfig+0x348>
 8004074:	2304      	movs	r3, #4
 8004076:	77fb      	strb	r3, [r7, #31]
 8004078:	e0ec      	b.n	8004254 <UART_SetConfig+0x348>
 800407a:	2308      	movs	r3, #8
 800407c:	77fb      	strb	r3, [r7, #31]
 800407e:	e0e9      	b.n	8004254 <UART_SetConfig+0x348>
 8004080:	2310      	movs	r3, #16
 8004082:	77fb      	strb	r3, [r7, #31]
 8004084:	e0e6      	b.n	8004254 <UART_SetConfig+0x348>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4a56      	ldr	r2, [pc, #344]	; (80041e4 <UART_SetConfig+0x2d8>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d120      	bne.n	80040d2 <UART_SetConfig+0x1c6>
 8004090:	4b51      	ldr	r3, [pc, #324]	; (80041d8 <UART_SetConfig+0x2cc>)
 8004092:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004096:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800409a:	2bc0      	cmp	r3, #192	; 0xc0
 800409c:	d013      	beq.n	80040c6 <UART_SetConfig+0x1ba>
 800409e:	2bc0      	cmp	r3, #192	; 0xc0
 80040a0:	d814      	bhi.n	80040cc <UART_SetConfig+0x1c0>
 80040a2:	2b80      	cmp	r3, #128	; 0x80
 80040a4:	d009      	beq.n	80040ba <UART_SetConfig+0x1ae>
 80040a6:	2b80      	cmp	r3, #128	; 0x80
 80040a8:	d810      	bhi.n	80040cc <UART_SetConfig+0x1c0>
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d002      	beq.n	80040b4 <UART_SetConfig+0x1a8>
 80040ae:	2b40      	cmp	r3, #64	; 0x40
 80040b0:	d006      	beq.n	80040c0 <UART_SetConfig+0x1b4>
 80040b2:	e00b      	b.n	80040cc <UART_SetConfig+0x1c0>
 80040b4:	2300      	movs	r3, #0
 80040b6:	77fb      	strb	r3, [r7, #31]
 80040b8:	e0cc      	b.n	8004254 <UART_SetConfig+0x348>
 80040ba:	2302      	movs	r3, #2
 80040bc:	77fb      	strb	r3, [r7, #31]
 80040be:	e0c9      	b.n	8004254 <UART_SetConfig+0x348>
 80040c0:	2304      	movs	r3, #4
 80040c2:	77fb      	strb	r3, [r7, #31]
 80040c4:	e0c6      	b.n	8004254 <UART_SetConfig+0x348>
 80040c6:	2308      	movs	r3, #8
 80040c8:	77fb      	strb	r3, [r7, #31]
 80040ca:	e0c3      	b.n	8004254 <UART_SetConfig+0x348>
 80040cc:	2310      	movs	r3, #16
 80040ce:	77fb      	strb	r3, [r7, #31]
 80040d0:	e0c0      	b.n	8004254 <UART_SetConfig+0x348>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4a44      	ldr	r2, [pc, #272]	; (80041e8 <UART_SetConfig+0x2dc>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d125      	bne.n	8004128 <UART_SetConfig+0x21c>
 80040dc:	4b3e      	ldr	r3, [pc, #248]	; (80041d8 <UART_SetConfig+0x2cc>)
 80040de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80040ea:	d017      	beq.n	800411c <UART_SetConfig+0x210>
 80040ec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80040f0:	d817      	bhi.n	8004122 <UART_SetConfig+0x216>
 80040f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80040f6:	d00b      	beq.n	8004110 <UART_SetConfig+0x204>
 80040f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80040fc:	d811      	bhi.n	8004122 <UART_SetConfig+0x216>
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d003      	beq.n	800410a <UART_SetConfig+0x1fe>
 8004102:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004106:	d006      	beq.n	8004116 <UART_SetConfig+0x20a>
 8004108:	e00b      	b.n	8004122 <UART_SetConfig+0x216>
 800410a:	2300      	movs	r3, #0
 800410c:	77fb      	strb	r3, [r7, #31]
 800410e:	e0a1      	b.n	8004254 <UART_SetConfig+0x348>
 8004110:	2302      	movs	r3, #2
 8004112:	77fb      	strb	r3, [r7, #31]
 8004114:	e09e      	b.n	8004254 <UART_SetConfig+0x348>
 8004116:	2304      	movs	r3, #4
 8004118:	77fb      	strb	r3, [r7, #31]
 800411a:	e09b      	b.n	8004254 <UART_SetConfig+0x348>
 800411c:	2308      	movs	r3, #8
 800411e:	77fb      	strb	r3, [r7, #31]
 8004120:	e098      	b.n	8004254 <UART_SetConfig+0x348>
 8004122:	2310      	movs	r3, #16
 8004124:	77fb      	strb	r3, [r7, #31]
 8004126:	e095      	b.n	8004254 <UART_SetConfig+0x348>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a2f      	ldr	r2, [pc, #188]	; (80041ec <UART_SetConfig+0x2e0>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d125      	bne.n	800417e <UART_SetConfig+0x272>
 8004132:	4b29      	ldr	r3, [pc, #164]	; (80041d8 <UART_SetConfig+0x2cc>)
 8004134:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004138:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800413c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004140:	d017      	beq.n	8004172 <UART_SetConfig+0x266>
 8004142:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004146:	d817      	bhi.n	8004178 <UART_SetConfig+0x26c>
 8004148:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800414c:	d00b      	beq.n	8004166 <UART_SetConfig+0x25a>
 800414e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004152:	d811      	bhi.n	8004178 <UART_SetConfig+0x26c>
 8004154:	2b00      	cmp	r3, #0
 8004156:	d003      	beq.n	8004160 <UART_SetConfig+0x254>
 8004158:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800415c:	d006      	beq.n	800416c <UART_SetConfig+0x260>
 800415e:	e00b      	b.n	8004178 <UART_SetConfig+0x26c>
 8004160:	2301      	movs	r3, #1
 8004162:	77fb      	strb	r3, [r7, #31]
 8004164:	e076      	b.n	8004254 <UART_SetConfig+0x348>
 8004166:	2302      	movs	r3, #2
 8004168:	77fb      	strb	r3, [r7, #31]
 800416a:	e073      	b.n	8004254 <UART_SetConfig+0x348>
 800416c:	2304      	movs	r3, #4
 800416e:	77fb      	strb	r3, [r7, #31]
 8004170:	e070      	b.n	8004254 <UART_SetConfig+0x348>
 8004172:	2308      	movs	r3, #8
 8004174:	77fb      	strb	r3, [r7, #31]
 8004176:	e06d      	b.n	8004254 <UART_SetConfig+0x348>
 8004178:	2310      	movs	r3, #16
 800417a:	77fb      	strb	r3, [r7, #31]
 800417c:	e06a      	b.n	8004254 <UART_SetConfig+0x348>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4a1b      	ldr	r2, [pc, #108]	; (80041f0 <UART_SetConfig+0x2e4>)
 8004184:	4293      	cmp	r3, r2
 8004186:	d138      	bne.n	80041fa <UART_SetConfig+0x2ee>
 8004188:	4b13      	ldr	r3, [pc, #76]	; (80041d8 <UART_SetConfig+0x2cc>)
 800418a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800418e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004192:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004196:	d017      	beq.n	80041c8 <UART_SetConfig+0x2bc>
 8004198:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800419c:	d82a      	bhi.n	80041f4 <UART_SetConfig+0x2e8>
 800419e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041a2:	d00b      	beq.n	80041bc <UART_SetConfig+0x2b0>
 80041a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041a8:	d824      	bhi.n	80041f4 <UART_SetConfig+0x2e8>
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d003      	beq.n	80041b6 <UART_SetConfig+0x2aa>
 80041ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041b2:	d006      	beq.n	80041c2 <UART_SetConfig+0x2b6>
 80041b4:	e01e      	b.n	80041f4 <UART_SetConfig+0x2e8>
 80041b6:	2300      	movs	r3, #0
 80041b8:	77fb      	strb	r3, [r7, #31]
 80041ba:	e04b      	b.n	8004254 <UART_SetConfig+0x348>
 80041bc:	2302      	movs	r3, #2
 80041be:	77fb      	strb	r3, [r7, #31]
 80041c0:	e048      	b.n	8004254 <UART_SetConfig+0x348>
 80041c2:	2304      	movs	r3, #4
 80041c4:	77fb      	strb	r3, [r7, #31]
 80041c6:	e045      	b.n	8004254 <UART_SetConfig+0x348>
 80041c8:	2308      	movs	r3, #8
 80041ca:	77fb      	strb	r3, [r7, #31]
 80041cc:	e042      	b.n	8004254 <UART_SetConfig+0x348>
 80041ce:	bf00      	nop
 80041d0:	efff69f3 	.word	0xefff69f3
 80041d4:	40011000 	.word	0x40011000
 80041d8:	40023800 	.word	0x40023800
 80041dc:	40004400 	.word	0x40004400
 80041e0:	40004800 	.word	0x40004800
 80041e4:	40004c00 	.word	0x40004c00
 80041e8:	40005000 	.word	0x40005000
 80041ec:	40011400 	.word	0x40011400
 80041f0:	40007800 	.word	0x40007800
 80041f4:	2310      	movs	r3, #16
 80041f6:	77fb      	strb	r3, [r7, #31]
 80041f8:	e02c      	b.n	8004254 <UART_SetConfig+0x348>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4a72      	ldr	r2, [pc, #456]	; (80043c8 <UART_SetConfig+0x4bc>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d125      	bne.n	8004250 <UART_SetConfig+0x344>
 8004204:	4b71      	ldr	r3, [pc, #452]	; (80043cc <UART_SetConfig+0x4c0>)
 8004206:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800420a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800420e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004212:	d017      	beq.n	8004244 <UART_SetConfig+0x338>
 8004214:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004218:	d817      	bhi.n	800424a <UART_SetConfig+0x33e>
 800421a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800421e:	d00b      	beq.n	8004238 <UART_SetConfig+0x32c>
 8004220:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004224:	d811      	bhi.n	800424a <UART_SetConfig+0x33e>
 8004226:	2b00      	cmp	r3, #0
 8004228:	d003      	beq.n	8004232 <UART_SetConfig+0x326>
 800422a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800422e:	d006      	beq.n	800423e <UART_SetConfig+0x332>
 8004230:	e00b      	b.n	800424a <UART_SetConfig+0x33e>
 8004232:	2300      	movs	r3, #0
 8004234:	77fb      	strb	r3, [r7, #31]
 8004236:	e00d      	b.n	8004254 <UART_SetConfig+0x348>
 8004238:	2302      	movs	r3, #2
 800423a:	77fb      	strb	r3, [r7, #31]
 800423c:	e00a      	b.n	8004254 <UART_SetConfig+0x348>
 800423e:	2304      	movs	r3, #4
 8004240:	77fb      	strb	r3, [r7, #31]
 8004242:	e007      	b.n	8004254 <UART_SetConfig+0x348>
 8004244:	2308      	movs	r3, #8
 8004246:	77fb      	strb	r3, [r7, #31]
 8004248:	e004      	b.n	8004254 <UART_SetConfig+0x348>
 800424a:	2310      	movs	r3, #16
 800424c:	77fb      	strb	r3, [r7, #31]
 800424e:	e001      	b.n	8004254 <UART_SetConfig+0x348>
 8004250:	2310      	movs	r3, #16
 8004252:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	69db      	ldr	r3, [r3, #28]
 8004258:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800425c:	d15b      	bne.n	8004316 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800425e:	7ffb      	ldrb	r3, [r7, #31]
 8004260:	2b08      	cmp	r3, #8
 8004262:	d828      	bhi.n	80042b6 <UART_SetConfig+0x3aa>
 8004264:	a201      	add	r2, pc, #4	; (adr r2, 800426c <UART_SetConfig+0x360>)
 8004266:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800426a:	bf00      	nop
 800426c:	08004291 	.word	0x08004291
 8004270:	08004299 	.word	0x08004299
 8004274:	080042a1 	.word	0x080042a1
 8004278:	080042b7 	.word	0x080042b7
 800427c:	080042a7 	.word	0x080042a7
 8004280:	080042b7 	.word	0x080042b7
 8004284:	080042b7 	.word	0x080042b7
 8004288:	080042b7 	.word	0x080042b7
 800428c:	080042af 	.word	0x080042af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004290:	f7fe fb32 	bl	80028f8 <HAL_RCC_GetPCLK1Freq>
 8004294:	61b8      	str	r0, [r7, #24]
        break;
 8004296:	e013      	b.n	80042c0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004298:	f7fe fb42 	bl	8002920 <HAL_RCC_GetPCLK2Freq>
 800429c:	61b8      	str	r0, [r7, #24]
        break;
 800429e:	e00f      	b.n	80042c0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80042a0:	4b4b      	ldr	r3, [pc, #300]	; (80043d0 <UART_SetConfig+0x4c4>)
 80042a2:	61bb      	str	r3, [r7, #24]
        break;
 80042a4:	e00c      	b.n	80042c0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80042a6:	f7fe fa17 	bl	80026d8 <HAL_RCC_GetSysClockFreq>
 80042aa:	61b8      	str	r0, [r7, #24]
        break;
 80042ac:	e008      	b.n	80042c0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80042ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80042b2:	61bb      	str	r3, [r7, #24]
        break;
 80042b4:	e004      	b.n	80042c0 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80042b6:	2300      	movs	r3, #0
 80042b8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80042ba:	2301      	movs	r3, #1
 80042bc:	77bb      	strb	r3, [r7, #30]
        break;
 80042be:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80042c0:	69bb      	ldr	r3, [r7, #24]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d074      	beq.n	80043b0 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80042c6:	69bb      	ldr	r3, [r7, #24]
 80042c8:	005a      	lsls	r2, r3, #1
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	085b      	lsrs	r3, r3, #1
 80042d0:	441a      	add	r2, r3
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	685b      	ldr	r3, [r3, #4]
 80042d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80042da:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80042dc:	693b      	ldr	r3, [r7, #16]
 80042de:	2b0f      	cmp	r3, #15
 80042e0:	d916      	bls.n	8004310 <UART_SetConfig+0x404>
 80042e2:	693b      	ldr	r3, [r7, #16]
 80042e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042e8:	d212      	bcs.n	8004310 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80042ea:	693b      	ldr	r3, [r7, #16]
 80042ec:	b29b      	uxth	r3, r3
 80042ee:	f023 030f 	bic.w	r3, r3, #15
 80042f2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80042f4:	693b      	ldr	r3, [r7, #16]
 80042f6:	085b      	lsrs	r3, r3, #1
 80042f8:	b29b      	uxth	r3, r3
 80042fa:	f003 0307 	and.w	r3, r3, #7
 80042fe:	b29a      	uxth	r2, r3
 8004300:	89fb      	ldrh	r3, [r7, #14]
 8004302:	4313      	orrs	r3, r2
 8004304:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	89fa      	ldrh	r2, [r7, #14]
 800430c:	60da      	str	r2, [r3, #12]
 800430e:	e04f      	b.n	80043b0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004310:	2301      	movs	r3, #1
 8004312:	77bb      	strb	r3, [r7, #30]
 8004314:	e04c      	b.n	80043b0 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004316:	7ffb      	ldrb	r3, [r7, #31]
 8004318:	2b08      	cmp	r3, #8
 800431a:	d828      	bhi.n	800436e <UART_SetConfig+0x462>
 800431c:	a201      	add	r2, pc, #4	; (adr r2, 8004324 <UART_SetConfig+0x418>)
 800431e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004322:	bf00      	nop
 8004324:	08004349 	.word	0x08004349
 8004328:	08004351 	.word	0x08004351
 800432c:	08004359 	.word	0x08004359
 8004330:	0800436f 	.word	0x0800436f
 8004334:	0800435f 	.word	0x0800435f
 8004338:	0800436f 	.word	0x0800436f
 800433c:	0800436f 	.word	0x0800436f
 8004340:	0800436f 	.word	0x0800436f
 8004344:	08004367 	.word	0x08004367
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004348:	f7fe fad6 	bl	80028f8 <HAL_RCC_GetPCLK1Freq>
 800434c:	61b8      	str	r0, [r7, #24]
        break;
 800434e:	e013      	b.n	8004378 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004350:	f7fe fae6 	bl	8002920 <HAL_RCC_GetPCLK2Freq>
 8004354:	61b8      	str	r0, [r7, #24]
        break;
 8004356:	e00f      	b.n	8004378 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004358:	4b1d      	ldr	r3, [pc, #116]	; (80043d0 <UART_SetConfig+0x4c4>)
 800435a:	61bb      	str	r3, [r7, #24]
        break;
 800435c:	e00c      	b.n	8004378 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800435e:	f7fe f9bb 	bl	80026d8 <HAL_RCC_GetSysClockFreq>
 8004362:	61b8      	str	r0, [r7, #24]
        break;
 8004364:	e008      	b.n	8004378 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004366:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800436a:	61bb      	str	r3, [r7, #24]
        break;
 800436c:	e004      	b.n	8004378 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800436e:	2300      	movs	r3, #0
 8004370:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004372:	2301      	movs	r3, #1
 8004374:	77bb      	strb	r3, [r7, #30]
        break;
 8004376:	bf00      	nop
    }

    if (pclk != 0U)
 8004378:	69bb      	ldr	r3, [r7, #24]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d018      	beq.n	80043b0 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	085a      	lsrs	r2, r3, #1
 8004384:	69bb      	ldr	r3, [r7, #24]
 8004386:	441a      	add	r2, r3
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	685b      	ldr	r3, [r3, #4]
 800438c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004390:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004392:	693b      	ldr	r3, [r7, #16]
 8004394:	2b0f      	cmp	r3, #15
 8004396:	d909      	bls.n	80043ac <UART_SetConfig+0x4a0>
 8004398:	693b      	ldr	r3, [r7, #16]
 800439a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800439e:	d205      	bcs.n	80043ac <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80043a0:	693b      	ldr	r3, [r7, #16]
 80043a2:	b29a      	uxth	r2, r3
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	60da      	str	r2, [r3, #12]
 80043aa:	e001      	b.n	80043b0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80043ac:	2301      	movs	r3, #1
 80043ae:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2200      	movs	r2, #0
 80043b4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2200      	movs	r2, #0
 80043ba:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80043bc:	7fbb      	ldrb	r3, [r7, #30]
}
 80043be:	4618      	mov	r0, r3
 80043c0:	3720      	adds	r7, #32
 80043c2:	46bd      	mov	sp, r7
 80043c4:	bd80      	pop	{r7, pc}
 80043c6:	bf00      	nop
 80043c8:	40007c00 	.word	0x40007c00
 80043cc:	40023800 	.word	0x40023800
 80043d0:	00f42400 	.word	0x00f42400

080043d4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80043d4:	b480      	push	{r7}
 80043d6:	b083      	sub	sp, #12
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043e0:	f003 0301 	and.w	r3, r3, #1
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d00a      	beq.n	80043fe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	685b      	ldr	r3, [r3, #4]
 80043ee:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	430a      	orrs	r2, r1
 80043fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004402:	f003 0302 	and.w	r3, r3, #2
 8004406:	2b00      	cmp	r3, #0
 8004408:	d00a      	beq.n	8004420 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	430a      	orrs	r2, r1
 800441e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004424:	f003 0304 	and.w	r3, r3, #4
 8004428:	2b00      	cmp	r3, #0
 800442a:	d00a      	beq.n	8004442 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	685b      	ldr	r3, [r3, #4]
 8004432:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	430a      	orrs	r2, r1
 8004440:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004446:	f003 0308 	and.w	r3, r3, #8
 800444a:	2b00      	cmp	r3, #0
 800444c:	d00a      	beq.n	8004464 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	430a      	orrs	r2, r1
 8004462:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004468:	f003 0310 	and.w	r3, r3, #16
 800446c:	2b00      	cmp	r3, #0
 800446e:	d00a      	beq.n	8004486 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	689b      	ldr	r3, [r3, #8]
 8004476:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	430a      	orrs	r2, r1
 8004484:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800448a:	f003 0320 	and.w	r3, r3, #32
 800448e:	2b00      	cmp	r3, #0
 8004490:	d00a      	beq.n	80044a8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	689b      	ldr	r3, [r3, #8]
 8004498:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	430a      	orrs	r2, r1
 80044a6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d01a      	beq.n	80044ea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	430a      	orrs	r2, r1
 80044c8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80044d2:	d10a      	bne.n	80044ea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	685b      	ldr	r3, [r3, #4]
 80044da:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	430a      	orrs	r2, r1
 80044e8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d00a      	beq.n	800450c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	685b      	ldr	r3, [r3, #4]
 80044fc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	430a      	orrs	r2, r1
 800450a:	605a      	str	r2, [r3, #4]
  }
}
 800450c:	bf00      	nop
 800450e:	370c      	adds	r7, #12
 8004510:	46bd      	mov	sp, r7
 8004512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004516:	4770      	bx	lr

08004518 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b086      	sub	sp, #24
 800451c:	af02      	add	r7, sp, #8
 800451e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2200      	movs	r2, #0
 8004524:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004528:	f7fc fe66 	bl	80011f8 <HAL_GetTick>
 800452c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f003 0308 	and.w	r3, r3, #8
 8004538:	2b08      	cmp	r3, #8
 800453a:	d10e      	bne.n	800455a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800453c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004540:	9300      	str	r3, [sp, #0]
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	2200      	movs	r2, #0
 8004546:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800454a:	6878      	ldr	r0, [r7, #4]
 800454c:	f000 f831 	bl	80045b2 <UART_WaitOnFlagUntilTimeout>
 8004550:	4603      	mov	r3, r0
 8004552:	2b00      	cmp	r3, #0
 8004554:	d001      	beq.n	800455a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004556:	2303      	movs	r3, #3
 8004558:	e027      	b.n	80045aa <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f003 0304 	and.w	r3, r3, #4
 8004564:	2b04      	cmp	r3, #4
 8004566:	d10e      	bne.n	8004586 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004568:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800456c:	9300      	str	r3, [sp, #0]
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	2200      	movs	r2, #0
 8004572:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004576:	6878      	ldr	r0, [r7, #4]
 8004578:	f000 f81b 	bl	80045b2 <UART_WaitOnFlagUntilTimeout>
 800457c:	4603      	mov	r3, r0
 800457e:	2b00      	cmp	r3, #0
 8004580:	d001      	beq.n	8004586 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004582:	2303      	movs	r3, #3
 8004584:	e011      	b.n	80045aa <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2220      	movs	r2, #32
 800458a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2220      	movs	r2, #32
 8004590:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2200      	movs	r2, #0
 8004598:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2200      	movs	r2, #0
 800459e:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2200      	movs	r2, #0
 80045a4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80045a8:	2300      	movs	r3, #0
}
 80045aa:	4618      	mov	r0, r3
 80045ac:	3710      	adds	r7, #16
 80045ae:	46bd      	mov	sp, r7
 80045b0:	bd80      	pop	{r7, pc}

080045b2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80045b2:	b580      	push	{r7, lr}
 80045b4:	b09c      	sub	sp, #112	; 0x70
 80045b6:	af00      	add	r7, sp, #0
 80045b8:	60f8      	str	r0, [r7, #12]
 80045ba:	60b9      	str	r1, [r7, #8]
 80045bc:	603b      	str	r3, [r7, #0]
 80045be:	4613      	mov	r3, r2
 80045c0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045c2:	e0a7      	b.n	8004714 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80045c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045ca:	f000 80a3 	beq.w	8004714 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045ce:	f7fc fe13 	bl	80011f8 <HAL_GetTick>
 80045d2:	4602      	mov	r2, r0
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	1ad3      	subs	r3, r2, r3
 80045d8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80045da:	429a      	cmp	r2, r3
 80045dc:	d302      	bcc.n	80045e4 <UART_WaitOnFlagUntilTimeout+0x32>
 80045de:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d13f      	bne.n	8004664 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80045ec:	e853 3f00 	ldrex	r3, [r3]
 80045f0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80045f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045f4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80045f8:	667b      	str	r3, [r7, #100]	; 0x64
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	461a      	mov	r2, r3
 8004600:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004602:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004604:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004606:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004608:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800460a:	e841 2300 	strex	r3, r2, [r1]
 800460e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004610:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004612:	2b00      	cmp	r3, #0
 8004614:	d1e6      	bne.n	80045e4 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	3308      	adds	r3, #8
 800461c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800461e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004620:	e853 3f00 	ldrex	r3, [r3]
 8004624:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004626:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004628:	f023 0301 	bic.w	r3, r3, #1
 800462c:	663b      	str	r3, [r7, #96]	; 0x60
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	3308      	adds	r3, #8
 8004634:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004636:	64ba      	str	r2, [r7, #72]	; 0x48
 8004638:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800463a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800463c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800463e:	e841 2300 	strex	r3, r2, [r1]
 8004642:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004644:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004646:	2b00      	cmp	r3, #0
 8004648:	d1e5      	bne.n	8004616 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	2220      	movs	r2, #32
 800464e:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	2220      	movs	r2, #32
 8004654:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	2200      	movs	r2, #0
 800465c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8004660:	2303      	movs	r3, #3
 8004662:	e068      	b.n	8004736 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f003 0304 	and.w	r3, r3, #4
 800466e:	2b00      	cmp	r3, #0
 8004670:	d050      	beq.n	8004714 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	69db      	ldr	r3, [r3, #28]
 8004678:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800467c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004680:	d148      	bne.n	8004714 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800468a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004694:	e853 3f00 	ldrex	r3, [r3]
 8004698:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800469a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800469c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80046a0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	461a      	mov	r2, r3
 80046a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046aa:	637b      	str	r3, [r7, #52]	; 0x34
 80046ac:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046ae:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80046b0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80046b2:	e841 2300 	strex	r3, r2, [r1]
 80046b6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80046b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d1e6      	bne.n	800468c <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	3308      	adds	r3, #8
 80046c4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046c6:	697b      	ldr	r3, [r7, #20]
 80046c8:	e853 3f00 	ldrex	r3, [r3]
 80046cc:	613b      	str	r3, [r7, #16]
   return(result);
 80046ce:	693b      	ldr	r3, [r7, #16]
 80046d0:	f023 0301 	bic.w	r3, r3, #1
 80046d4:	66bb      	str	r3, [r7, #104]	; 0x68
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	3308      	adds	r3, #8
 80046dc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80046de:	623a      	str	r2, [r7, #32]
 80046e0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046e2:	69f9      	ldr	r1, [r7, #28]
 80046e4:	6a3a      	ldr	r2, [r7, #32]
 80046e6:	e841 2300 	strex	r3, r2, [r1]
 80046ea:	61bb      	str	r3, [r7, #24]
   return(result);
 80046ec:	69bb      	ldr	r3, [r7, #24]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d1e5      	bne.n	80046be <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	2220      	movs	r2, #32
 80046f6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	2220      	movs	r2, #32
 80046fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	2220      	movs	r2, #32
 8004704:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	2200      	movs	r2, #0
 800470c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004710:	2303      	movs	r3, #3
 8004712:	e010      	b.n	8004736 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	69da      	ldr	r2, [r3, #28]
 800471a:	68bb      	ldr	r3, [r7, #8]
 800471c:	4013      	ands	r3, r2
 800471e:	68ba      	ldr	r2, [r7, #8]
 8004720:	429a      	cmp	r2, r3
 8004722:	bf0c      	ite	eq
 8004724:	2301      	moveq	r3, #1
 8004726:	2300      	movne	r3, #0
 8004728:	b2db      	uxtb	r3, r3
 800472a:	461a      	mov	r2, r3
 800472c:	79fb      	ldrb	r3, [r7, #7]
 800472e:	429a      	cmp	r2, r3
 8004730:	f43f af48 	beq.w	80045c4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004734:	2300      	movs	r3, #0
}
 8004736:	4618      	mov	r0, r3
 8004738:	3770      	adds	r7, #112	; 0x70
 800473a:	46bd      	mov	sp, r7
 800473c:	bd80      	pop	{r7, pc}
	...

08004740 <__errno>:
 8004740:	4b01      	ldr	r3, [pc, #4]	; (8004748 <__errno+0x8>)
 8004742:	6818      	ldr	r0, [r3, #0]
 8004744:	4770      	bx	lr
 8004746:	bf00      	nop
 8004748:	2000000c 	.word	0x2000000c

0800474c <__libc_init_array>:
 800474c:	b570      	push	{r4, r5, r6, lr}
 800474e:	4d0d      	ldr	r5, [pc, #52]	; (8004784 <__libc_init_array+0x38>)
 8004750:	4c0d      	ldr	r4, [pc, #52]	; (8004788 <__libc_init_array+0x3c>)
 8004752:	1b64      	subs	r4, r4, r5
 8004754:	10a4      	asrs	r4, r4, #2
 8004756:	2600      	movs	r6, #0
 8004758:	42a6      	cmp	r6, r4
 800475a:	d109      	bne.n	8004770 <__libc_init_array+0x24>
 800475c:	4d0b      	ldr	r5, [pc, #44]	; (800478c <__libc_init_array+0x40>)
 800475e:	4c0c      	ldr	r4, [pc, #48]	; (8004790 <__libc_init_array+0x44>)
 8004760:	f002 fe5e 	bl	8007420 <_init>
 8004764:	1b64      	subs	r4, r4, r5
 8004766:	10a4      	asrs	r4, r4, #2
 8004768:	2600      	movs	r6, #0
 800476a:	42a6      	cmp	r6, r4
 800476c:	d105      	bne.n	800477a <__libc_init_array+0x2e>
 800476e:	bd70      	pop	{r4, r5, r6, pc}
 8004770:	f855 3b04 	ldr.w	r3, [r5], #4
 8004774:	4798      	blx	r3
 8004776:	3601      	adds	r6, #1
 8004778:	e7ee      	b.n	8004758 <__libc_init_array+0xc>
 800477a:	f855 3b04 	ldr.w	r3, [r5], #4
 800477e:	4798      	blx	r3
 8004780:	3601      	adds	r6, #1
 8004782:	e7f2      	b.n	800476a <__libc_init_array+0x1e>
 8004784:	0800783c 	.word	0x0800783c
 8004788:	0800783c 	.word	0x0800783c
 800478c:	0800783c 	.word	0x0800783c
 8004790:	08007840 	.word	0x08007840

08004794 <memset>:
 8004794:	4402      	add	r2, r0
 8004796:	4603      	mov	r3, r0
 8004798:	4293      	cmp	r3, r2
 800479a:	d100      	bne.n	800479e <memset+0xa>
 800479c:	4770      	bx	lr
 800479e:	f803 1b01 	strb.w	r1, [r3], #1
 80047a2:	e7f9      	b.n	8004798 <memset+0x4>

080047a4 <__cvt>:
 80047a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80047a6:	ed2d 8b02 	vpush	{d8}
 80047aa:	eeb0 8b40 	vmov.f64	d8, d0
 80047ae:	b085      	sub	sp, #20
 80047b0:	4617      	mov	r7, r2
 80047b2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80047b4:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80047b6:	ee18 2a90 	vmov	r2, s17
 80047ba:	f025 0520 	bic.w	r5, r5, #32
 80047be:	2a00      	cmp	r2, #0
 80047c0:	bfb6      	itet	lt
 80047c2:	222d      	movlt	r2, #45	; 0x2d
 80047c4:	2200      	movge	r2, #0
 80047c6:	eeb1 8b40 	vneglt.f64	d8, d0
 80047ca:	2d46      	cmp	r5, #70	; 0x46
 80047cc:	460c      	mov	r4, r1
 80047ce:	701a      	strb	r2, [r3, #0]
 80047d0:	d004      	beq.n	80047dc <__cvt+0x38>
 80047d2:	2d45      	cmp	r5, #69	; 0x45
 80047d4:	d100      	bne.n	80047d8 <__cvt+0x34>
 80047d6:	3401      	adds	r4, #1
 80047d8:	2102      	movs	r1, #2
 80047da:	e000      	b.n	80047de <__cvt+0x3a>
 80047dc:	2103      	movs	r1, #3
 80047de:	ab03      	add	r3, sp, #12
 80047e0:	9301      	str	r3, [sp, #4]
 80047e2:	ab02      	add	r3, sp, #8
 80047e4:	9300      	str	r3, [sp, #0]
 80047e6:	4622      	mov	r2, r4
 80047e8:	4633      	mov	r3, r6
 80047ea:	eeb0 0b48 	vmov.f64	d0, d8
 80047ee:	f000 fccb 	bl	8005188 <_dtoa_r>
 80047f2:	2d47      	cmp	r5, #71	; 0x47
 80047f4:	d101      	bne.n	80047fa <__cvt+0x56>
 80047f6:	07fb      	lsls	r3, r7, #31
 80047f8:	d51a      	bpl.n	8004830 <__cvt+0x8c>
 80047fa:	2d46      	cmp	r5, #70	; 0x46
 80047fc:	eb00 0204 	add.w	r2, r0, r4
 8004800:	d10c      	bne.n	800481c <__cvt+0x78>
 8004802:	7803      	ldrb	r3, [r0, #0]
 8004804:	2b30      	cmp	r3, #48	; 0x30
 8004806:	d107      	bne.n	8004818 <__cvt+0x74>
 8004808:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800480c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004810:	bf1c      	itt	ne
 8004812:	f1c4 0401 	rsbne	r4, r4, #1
 8004816:	6034      	strne	r4, [r6, #0]
 8004818:	6833      	ldr	r3, [r6, #0]
 800481a:	441a      	add	r2, r3
 800481c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8004820:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004824:	bf08      	it	eq
 8004826:	9203      	streq	r2, [sp, #12]
 8004828:	2130      	movs	r1, #48	; 0x30
 800482a:	9b03      	ldr	r3, [sp, #12]
 800482c:	4293      	cmp	r3, r2
 800482e:	d307      	bcc.n	8004840 <__cvt+0x9c>
 8004830:	9b03      	ldr	r3, [sp, #12]
 8004832:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004834:	1a1b      	subs	r3, r3, r0
 8004836:	6013      	str	r3, [r2, #0]
 8004838:	b005      	add	sp, #20
 800483a:	ecbd 8b02 	vpop	{d8}
 800483e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004840:	1c5c      	adds	r4, r3, #1
 8004842:	9403      	str	r4, [sp, #12]
 8004844:	7019      	strb	r1, [r3, #0]
 8004846:	e7f0      	b.n	800482a <__cvt+0x86>

08004848 <__exponent>:
 8004848:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800484a:	4603      	mov	r3, r0
 800484c:	2900      	cmp	r1, #0
 800484e:	bfb8      	it	lt
 8004850:	4249      	neglt	r1, r1
 8004852:	f803 2b02 	strb.w	r2, [r3], #2
 8004856:	bfb4      	ite	lt
 8004858:	222d      	movlt	r2, #45	; 0x2d
 800485a:	222b      	movge	r2, #43	; 0x2b
 800485c:	2909      	cmp	r1, #9
 800485e:	7042      	strb	r2, [r0, #1]
 8004860:	dd2a      	ble.n	80048b8 <__exponent+0x70>
 8004862:	f10d 0407 	add.w	r4, sp, #7
 8004866:	46a4      	mov	ip, r4
 8004868:	270a      	movs	r7, #10
 800486a:	46a6      	mov	lr, r4
 800486c:	460a      	mov	r2, r1
 800486e:	fb91 f6f7 	sdiv	r6, r1, r7
 8004872:	fb07 1516 	mls	r5, r7, r6, r1
 8004876:	3530      	adds	r5, #48	; 0x30
 8004878:	2a63      	cmp	r2, #99	; 0x63
 800487a:	f104 34ff 	add.w	r4, r4, #4294967295
 800487e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8004882:	4631      	mov	r1, r6
 8004884:	dcf1      	bgt.n	800486a <__exponent+0x22>
 8004886:	3130      	adds	r1, #48	; 0x30
 8004888:	f1ae 0502 	sub.w	r5, lr, #2
 800488c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004890:	1c44      	adds	r4, r0, #1
 8004892:	4629      	mov	r1, r5
 8004894:	4561      	cmp	r1, ip
 8004896:	d30a      	bcc.n	80048ae <__exponent+0x66>
 8004898:	f10d 0209 	add.w	r2, sp, #9
 800489c:	eba2 020e 	sub.w	r2, r2, lr
 80048a0:	4565      	cmp	r5, ip
 80048a2:	bf88      	it	hi
 80048a4:	2200      	movhi	r2, #0
 80048a6:	4413      	add	r3, r2
 80048a8:	1a18      	subs	r0, r3, r0
 80048aa:	b003      	add	sp, #12
 80048ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80048ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 80048b2:	f804 2f01 	strb.w	r2, [r4, #1]!
 80048b6:	e7ed      	b.n	8004894 <__exponent+0x4c>
 80048b8:	2330      	movs	r3, #48	; 0x30
 80048ba:	3130      	adds	r1, #48	; 0x30
 80048bc:	7083      	strb	r3, [r0, #2]
 80048be:	70c1      	strb	r1, [r0, #3]
 80048c0:	1d03      	adds	r3, r0, #4
 80048c2:	e7f1      	b.n	80048a8 <__exponent+0x60>
 80048c4:	0000      	movs	r0, r0
	...

080048c8 <_printf_float>:
 80048c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048cc:	b08b      	sub	sp, #44	; 0x2c
 80048ce:	460c      	mov	r4, r1
 80048d0:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 80048d4:	4616      	mov	r6, r2
 80048d6:	461f      	mov	r7, r3
 80048d8:	4605      	mov	r5, r0
 80048da:	f001 f9c3 	bl	8005c64 <_localeconv_r>
 80048de:	f8d0 b000 	ldr.w	fp, [r0]
 80048e2:	4658      	mov	r0, fp
 80048e4:	f7fb fcac 	bl	8000240 <strlen>
 80048e8:	2300      	movs	r3, #0
 80048ea:	9308      	str	r3, [sp, #32]
 80048ec:	f8d8 3000 	ldr.w	r3, [r8]
 80048f0:	f894 9018 	ldrb.w	r9, [r4, #24]
 80048f4:	6822      	ldr	r2, [r4, #0]
 80048f6:	3307      	adds	r3, #7
 80048f8:	f023 0307 	bic.w	r3, r3, #7
 80048fc:	f103 0108 	add.w	r1, r3, #8
 8004900:	f8c8 1000 	str.w	r1, [r8]
 8004904:	4682      	mov	sl, r0
 8004906:	e9d3 0100 	ldrd	r0, r1, [r3]
 800490a:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 800490e:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8004b70 <_printf_float+0x2a8>
 8004912:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8004916:	eeb0 6bc0 	vabs.f64	d6, d0
 800491a:	eeb4 6b47 	vcmp.f64	d6, d7
 800491e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004922:	dd24      	ble.n	800496e <_printf_float+0xa6>
 8004924:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8004928:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800492c:	d502      	bpl.n	8004934 <_printf_float+0x6c>
 800492e:	232d      	movs	r3, #45	; 0x2d
 8004930:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004934:	4b90      	ldr	r3, [pc, #576]	; (8004b78 <_printf_float+0x2b0>)
 8004936:	4891      	ldr	r0, [pc, #580]	; (8004b7c <_printf_float+0x2b4>)
 8004938:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800493c:	bf94      	ite	ls
 800493e:	4698      	movls	r8, r3
 8004940:	4680      	movhi	r8, r0
 8004942:	2303      	movs	r3, #3
 8004944:	6123      	str	r3, [r4, #16]
 8004946:	f022 0204 	bic.w	r2, r2, #4
 800494a:	2300      	movs	r3, #0
 800494c:	6022      	str	r2, [r4, #0]
 800494e:	9304      	str	r3, [sp, #16]
 8004950:	9700      	str	r7, [sp, #0]
 8004952:	4633      	mov	r3, r6
 8004954:	aa09      	add	r2, sp, #36	; 0x24
 8004956:	4621      	mov	r1, r4
 8004958:	4628      	mov	r0, r5
 800495a:	f000 f9d3 	bl	8004d04 <_printf_common>
 800495e:	3001      	adds	r0, #1
 8004960:	f040 808a 	bne.w	8004a78 <_printf_float+0x1b0>
 8004964:	f04f 30ff 	mov.w	r0, #4294967295
 8004968:	b00b      	add	sp, #44	; 0x2c
 800496a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800496e:	eeb4 0b40 	vcmp.f64	d0, d0
 8004972:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004976:	d709      	bvc.n	800498c <_printf_float+0xc4>
 8004978:	ee10 3a90 	vmov	r3, s1
 800497c:	2b00      	cmp	r3, #0
 800497e:	bfbc      	itt	lt
 8004980:	232d      	movlt	r3, #45	; 0x2d
 8004982:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004986:	487e      	ldr	r0, [pc, #504]	; (8004b80 <_printf_float+0x2b8>)
 8004988:	4b7e      	ldr	r3, [pc, #504]	; (8004b84 <_printf_float+0x2bc>)
 800498a:	e7d5      	b.n	8004938 <_printf_float+0x70>
 800498c:	6863      	ldr	r3, [r4, #4]
 800498e:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8004992:	9104      	str	r1, [sp, #16]
 8004994:	1c59      	adds	r1, r3, #1
 8004996:	d13c      	bne.n	8004a12 <_printf_float+0x14a>
 8004998:	2306      	movs	r3, #6
 800499a:	6063      	str	r3, [r4, #4]
 800499c:	2300      	movs	r3, #0
 800499e:	9303      	str	r3, [sp, #12]
 80049a0:	ab08      	add	r3, sp, #32
 80049a2:	e9cd 9301 	strd	r9, r3, [sp, #4]
 80049a6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80049aa:	ab07      	add	r3, sp, #28
 80049ac:	6861      	ldr	r1, [r4, #4]
 80049ae:	9300      	str	r3, [sp, #0]
 80049b0:	6022      	str	r2, [r4, #0]
 80049b2:	f10d 031b 	add.w	r3, sp, #27
 80049b6:	4628      	mov	r0, r5
 80049b8:	f7ff fef4 	bl	80047a4 <__cvt>
 80049bc:	9b04      	ldr	r3, [sp, #16]
 80049be:	9907      	ldr	r1, [sp, #28]
 80049c0:	2b47      	cmp	r3, #71	; 0x47
 80049c2:	4680      	mov	r8, r0
 80049c4:	d108      	bne.n	80049d8 <_printf_float+0x110>
 80049c6:	1cc8      	adds	r0, r1, #3
 80049c8:	db02      	blt.n	80049d0 <_printf_float+0x108>
 80049ca:	6863      	ldr	r3, [r4, #4]
 80049cc:	4299      	cmp	r1, r3
 80049ce:	dd41      	ble.n	8004a54 <_printf_float+0x18c>
 80049d0:	f1a9 0902 	sub.w	r9, r9, #2
 80049d4:	fa5f f989 	uxtb.w	r9, r9
 80049d8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80049dc:	d820      	bhi.n	8004a20 <_printf_float+0x158>
 80049de:	3901      	subs	r1, #1
 80049e0:	464a      	mov	r2, r9
 80049e2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80049e6:	9107      	str	r1, [sp, #28]
 80049e8:	f7ff ff2e 	bl	8004848 <__exponent>
 80049ec:	9a08      	ldr	r2, [sp, #32]
 80049ee:	9004      	str	r0, [sp, #16]
 80049f0:	1813      	adds	r3, r2, r0
 80049f2:	2a01      	cmp	r2, #1
 80049f4:	6123      	str	r3, [r4, #16]
 80049f6:	dc02      	bgt.n	80049fe <_printf_float+0x136>
 80049f8:	6822      	ldr	r2, [r4, #0]
 80049fa:	07d2      	lsls	r2, r2, #31
 80049fc:	d501      	bpl.n	8004a02 <_printf_float+0x13a>
 80049fe:	3301      	adds	r3, #1
 8004a00:	6123      	str	r3, [r4, #16]
 8004a02:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d0a2      	beq.n	8004950 <_printf_float+0x88>
 8004a0a:	232d      	movs	r3, #45	; 0x2d
 8004a0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a10:	e79e      	b.n	8004950 <_printf_float+0x88>
 8004a12:	9904      	ldr	r1, [sp, #16]
 8004a14:	2947      	cmp	r1, #71	; 0x47
 8004a16:	d1c1      	bne.n	800499c <_printf_float+0xd4>
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d1bf      	bne.n	800499c <_printf_float+0xd4>
 8004a1c:	2301      	movs	r3, #1
 8004a1e:	e7bc      	b.n	800499a <_printf_float+0xd2>
 8004a20:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8004a24:	d118      	bne.n	8004a58 <_printf_float+0x190>
 8004a26:	2900      	cmp	r1, #0
 8004a28:	6863      	ldr	r3, [r4, #4]
 8004a2a:	dd0b      	ble.n	8004a44 <_printf_float+0x17c>
 8004a2c:	6121      	str	r1, [r4, #16]
 8004a2e:	b913      	cbnz	r3, 8004a36 <_printf_float+0x16e>
 8004a30:	6822      	ldr	r2, [r4, #0]
 8004a32:	07d0      	lsls	r0, r2, #31
 8004a34:	d502      	bpl.n	8004a3c <_printf_float+0x174>
 8004a36:	3301      	adds	r3, #1
 8004a38:	440b      	add	r3, r1
 8004a3a:	6123      	str	r3, [r4, #16]
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	65a1      	str	r1, [r4, #88]	; 0x58
 8004a40:	9304      	str	r3, [sp, #16]
 8004a42:	e7de      	b.n	8004a02 <_printf_float+0x13a>
 8004a44:	b913      	cbnz	r3, 8004a4c <_printf_float+0x184>
 8004a46:	6822      	ldr	r2, [r4, #0]
 8004a48:	07d2      	lsls	r2, r2, #31
 8004a4a:	d501      	bpl.n	8004a50 <_printf_float+0x188>
 8004a4c:	3302      	adds	r3, #2
 8004a4e:	e7f4      	b.n	8004a3a <_printf_float+0x172>
 8004a50:	2301      	movs	r3, #1
 8004a52:	e7f2      	b.n	8004a3a <_printf_float+0x172>
 8004a54:	f04f 0967 	mov.w	r9, #103	; 0x67
 8004a58:	9b08      	ldr	r3, [sp, #32]
 8004a5a:	4299      	cmp	r1, r3
 8004a5c:	db05      	blt.n	8004a6a <_printf_float+0x1a2>
 8004a5e:	6823      	ldr	r3, [r4, #0]
 8004a60:	6121      	str	r1, [r4, #16]
 8004a62:	07d8      	lsls	r0, r3, #31
 8004a64:	d5ea      	bpl.n	8004a3c <_printf_float+0x174>
 8004a66:	1c4b      	adds	r3, r1, #1
 8004a68:	e7e7      	b.n	8004a3a <_printf_float+0x172>
 8004a6a:	2900      	cmp	r1, #0
 8004a6c:	bfd4      	ite	le
 8004a6e:	f1c1 0202 	rsble	r2, r1, #2
 8004a72:	2201      	movgt	r2, #1
 8004a74:	4413      	add	r3, r2
 8004a76:	e7e0      	b.n	8004a3a <_printf_float+0x172>
 8004a78:	6823      	ldr	r3, [r4, #0]
 8004a7a:	055a      	lsls	r2, r3, #21
 8004a7c:	d407      	bmi.n	8004a8e <_printf_float+0x1c6>
 8004a7e:	6923      	ldr	r3, [r4, #16]
 8004a80:	4642      	mov	r2, r8
 8004a82:	4631      	mov	r1, r6
 8004a84:	4628      	mov	r0, r5
 8004a86:	47b8      	blx	r7
 8004a88:	3001      	adds	r0, #1
 8004a8a:	d12a      	bne.n	8004ae2 <_printf_float+0x21a>
 8004a8c:	e76a      	b.n	8004964 <_printf_float+0x9c>
 8004a8e:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004a92:	f240 80e2 	bls.w	8004c5a <_printf_float+0x392>
 8004a96:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8004a9a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8004a9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004aa2:	d133      	bne.n	8004b0c <_printf_float+0x244>
 8004aa4:	4a38      	ldr	r2, [pc, #224]	; (8004b88 <_printf_float+0x2c0>)
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	4631      	mov	r1, r6
 8004aaa:	4628      	mov	r0, r5
 8004aac:	47b8      	blx	r7
 8004aae:	3001      	adds	r0, #1
 8004ab0:	f43f af58 	beq.w	8004964 <_printf_float+0x9c>
 8004ab4:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8004ab8:	429a      	cmp	r2, r3
 8004aba:	db02      	blt.n	8004ac2 <_printf_float+0x1fa>
 8004abc:	6823      	ldr	r3, [r4, #0]
 8004abe:	07d8      	lsls	r0, r3, #31
 8004ac0:	d50f      	bpl.n	8004ae2 <_printf_float+0x21a>
 8004ac2:	4653      	mov	r3, sl
 8004ac4:	465a      	mov	r2, fp
 8004ac6:	4631      	mov	r1, r6
 8004ac8:	4628      	mov	r0, r5
 8004aca:	47b8      	blx	r7
 8004acc:	3001      	adds	r0, #1
 8004ace:	f43f af49 	beq.w	8004964 <_printf_float+0x9c>
 8004ad2:	f04f 0800 	mov.w	r8, #0
 8004ad6:	f104 091a 	add.w	r9, r4, #26
 8004ada:	9b08      	ldr	r3, [sp, #32]
 8004adc:	3b01      	subs	r3, #1
 8004ade:	4543      	cmp	r3, r8
 8004ae0:	dc09      	bgt.n	8004af6 <_printf_float+0x22e>
 8004ae2:	6823      	ldr	r3, [r4, #0]
 8004ae4:	079b      	lsls	r3, r3, #30
 8004ae6:	f100 8108 	bmi.w	8004cfa <_printf_float+0x432>
 8004aea:	68e0      	ldr	r0, [r4, #12]
 8004aec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004aee:	4298      	cmp	r0, r3
 8004af0:	bfb8      	it	lt
 8004af2:	4618      	movlt	r0, r3
 8004af4:	e738      	b.n	8004968 <_printf_float+0xa0>
 8004af6:	2301      	movs	r3, #1
 8004af8:	464a      	mov	r2, r9
 8004afa:	4631      	mov	r1, r6
 8004afc:	4628      	mov	r0, r5
 8004afe:	47b8      	blx	r7
 8004b00:	3001      	adds	r0, #1
 8004b02:	f43f af2f 	beq.w	8004964 <_printf_float+0x9c>
 8004b06:	f108 0801 	add.w	r8, r8, #1
 8004b0a:	e7e6      	b.n	8004ada <_printf_float+0x212>
 8004b0c:	9b07      	ldr	r3, [sp, #28]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	dc3c      	bgt.n	8004b8c <_printf_float+0x2c4>
 8004b12:	4a1d      	ldr	r2, [pc, #116]	; (8004b88 <_printf_float+0x2c0>)
 8004b14:	2301      	movs	r3, #1
 8004b16:	4631      	mov	r1, r6
 8004b18:	4628      	mov	r0, r5
 8004b1a:	47b8      	blx	r7
 8004b1c:	3001      	adds	r0, #1
 8004b1e:	f43f af21 	beq.w	8004964 <_printf_float+0x9c>
 8004b22:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8004b26:	4313      	orrs	r3, r2
 8004b28:	d102      	bne.n	8004b30 <_printf_float+0x268>
 8004b2a:	6823      	ldr	r3, [r4, #0]
 8004b2c:	07d9      	lsls	r1, r3, #31
 8004b2e:	d5d8      	bpl.n	8004ae2 <_printf_float+0x21a>
 8004b30:	4653      	mov	r3, sl
 8004b32:	465a      	mov	r2, fp
 8004b34:	4631      	mov	r1, r6
 8004b36:	4628      	mov	r0, r5
 8004b38:	47b8      	blx	r7
 8004b3a:	3001      	adds	r0, #1
 8004b3c:	f43f af12 	beq.w	8004964 <_printf_float+0x9c>
 8004b40:	f04f 0900 	mov.w	r9, #0
 8004b44:	f104 0a1a 	add.w	sl, r4, #26
 8004b48:	9b07      	ldr	r3, [sp, #28]
 8004b4a:	425b      	negs	r3, r3
 8004b4c:	454b      	cmp	r3, r9
 8004b4e:	dc01      	bgt.n	8004b54 <_printf_float+0x28c>
 8004b50:	9b08      	ldr	r3, [sp, #32]
 8004b52:	e795      	b.n	8004a80 <_printf_float+0x1b8>
 8004b54:	2301      	movs	r3, #1
 8004b56:	4652      	mov	r2, sl
 8004b58:	4631      	mov	r1, r6
 8004b5a:	4628      	mov	r0, r5
 8004b5c:	47b8      	blx	r7
 8004b5e:	3001      	adds	r0, #1
 8004b60:	f43f af00 	beq.w	8004964 <_printf_float+0x9c>
 8004b64:	f109 0901 	add.w	r9, r9, #1
 8004b68:	e7ee      	b.n	8004b48 <_printf_float+0x280>
 8004b6a:	bf00      	nop
 8004b6c:	f3af 8000 	nop.w
 8004b70:	ffffffff 	.word	0xffffffff
 8004b74:	7fefffff 	.word	0x7fefffff
 8004b78:	0800745c 	.word	0x0800745c
 8004b7c:	08007460 	.word	0x08007460
 8004b80:	08007468 	.word	0x08007468
 8004b84:	08007464 	.word	0x08007464
 8004b88:	0800746c 	.word	0x0800746c
 8004b8c:	9a08      	ldr	r2, [sp, #32]
 8004b8e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004b90:	429a      	cmp	r2, r3
 8004b92:	bfa8      	it	ge
 8004b94:	461a      	movge	r2, r3
 8004b96:	2a00      	cmp	r2, #0
 8004b98:	4691      	mov	r9, r2
 8004b9a:	dc38      	bgt.n	8004c0e <_printf_float+0x346>
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	9305      	str	r3, [sp, #20]
 8004ba0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004ba4:	f104 021a 	add.w	r2, r4, #26
 8004ba8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004baa:	9905      	ldr	r1, [sp, #20]
 8004bac:	9304      	str	r3, [sp, #16]
 8004bae:	eba3 0309 	sub.w	r3, r3, r9
 8004bb2:	428b      	cmp	r3, r1
 8004bb4:	dc33      	bgt.n	8004c1e <_printf_float+0x356>
 8004bb6:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8004bba:	429a      	cmp	r2, r3
 8004bbc:	db3c      	blt.n	8004c38 <_printf_float+0x370>
 8004bbe:	6823      	ldr	r3, [r4, #0]
 8004bc0:	07da      	lsls	r2, r3, #31
 8004bc2:	d439      	bmi.n	8004c38 <_printf_float+0x370>
 8004bc4:	9b08      	ldr	r3, [sp, #32]
 8004bc6:	9a04      	ldr	r2, [sp, #16]
 8004bc8:	9907      	ldr	r1, [sp, #28]
 8004bca:	1a9a      	subs	r2, r3, r2
 8004bcc:	eba3 0901 	sub.w	r9, r3, r1
 8004bd0:	4591      	cmp	r9, r2
 8004bd2:	bfa8      	it	ge
 8004bd4:	4691      	movge	r9, r2
 8004bd6:	f1b9 0f00 	cmp.w	r9, #0
 8004bda:	dc35      	bgt.n	8004c48 <_printf_float+0x380>
 8004bdc:	f04f 0800 	mov.w	r8, #0
 8004be0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004be4:	f104 0a1a 	add.w	sl, r4, #26
 8004be8:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8004bec:	1a9b      	subs	r3, r3, r2
 8004bee:	eba3 0309 	sub.w	r3, r3, r9
 8004bf2:	4543      	cmp	r3, r8
 8004bf4:	f77f af75 	ble.w	8004ae2 <_printf_float+0x21a>
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	4652      	mov	r2, sl
 8004bfc:	4631      	mov	r1, r6
 8004bfe:	4628      	mov	r0, r5
 8004c00:	47b8      	blx	r7
 8004c02:	3001      	adds	r0, #1
 8004c04:	f43f aeae 	beq.w	8004964 <_printf_float+0x9c>
 8004c08:	f108 0801 	add.w	r8, r8, #1
 8004c0c:	e7ec      	b.n	8004be8 <_printf_float+0x320>
 8004c0e:	4613      	mov	r3, r2
 8004c10:	4631      	mov	r1, r6
 8004c12:	4642      	mov	r2, r8
 8004c14:	4628      	mov	r0, r5
 8004c16:	47b8      	blx	r7
 8004c18:	3001      	adds	r0, #1
 8004c1a:	d1bf      	bne.n	8004b9c <_printf_float+0x2d4>
 8004c1c:	e6a2      	b.n	8004964 <_printf_float+0x9c>
 8004c1e:	2301      	movs	r3, #1
 8004c20:	4631      	mov	r1, r6
 8004c22:	4628      	mov	r0, r5
 8004c24:	9204      	str	r2, [sp, #16]
 8004c26:	47b8      	blx	r7
 8004c28:	3001      	adds	r0, #1
 8004c2a:	f43f ae9b 	beq.w	8004964 <_printf_float+0x9c>
 8004c2e:	9b05      	ldr	r3, [sp, #20]
 8004c30:	9a04      	ldr	r2, [sp, #16]
 8004c32:	3301      	adds	r3, #1
 8004c34:	9305      	str	r3, [sp, #20]
 8004c36:	e7b7      	b.n	8004ba8 <_printf_float+0x2e0>
 8004c38:	4653      	mov	r3, sl
 8004c3a:	465a      	mov	r2, fp
 8004c3c:	4631      	mov	r1, r6
 8004c3e:	4628      	mov	r0, r5
 8004c40:	47b8      	blx	r7
 8004c42:	3001      	adds	r0, #1
 8004c44:	d1be      	bne.n	8004bc4 <_printf_float+0x2fc>
 8004c46:	e68d      	b.n	8004964 <_printf_float+0x9c>
 8004c48:	9a04      	ldr	r2, [sp, #16]
 8004c4a:	464b      	mov	r3, r9
 8004c4c:	4442      	add	r2, r8
 8004c4e:	4631      	mov	r1, r6
 8004c50:	4628      	mov	r0, r5
 8004c52:	47b8      	blx	r7
 8004c54:	3001      	adds	r0, #1
 8004c56:	d1c1      	bne.n	8004bdc <_printf_float+0x314>
 8004c58:	e684      	b.n	8004964 <_printf_float+0x9c>
 8004c5a:	9a08      	ldr	r2, [sp, #32]
 8004c5c:	2a01      	cmp	r2, #1
 8004c5e:	dc01      	bgt.n	8004c64 <_printf_float+0x39c>
 8004c60:	07db      	lsls	r3, r3, #31
 8004c62:	d537      	bpl.n	8004cd4 <_printf_float+0x40c>
 8004c64:	2301      	movs	r3, #1
 8004c66:	4642      	mov	r2, r8
 8004c68:	4631      	mov	r1, r6
 8004c6a:	4628      	mov	r0, r5
 8004c6c:	47b8      	blx	r7
 8004c6e:	3001      	adds	r0, #1
 8004c70:	f43f ae78 	beq.w	8004964 <_printf_float+0x9c>
 8004c74:	4653      	mov	r3, sl
 8004c76:	465a      	mov	r2, fp
 8004c78:	4631      	mov	r1, r6
 8004c7a:	4628      	mov	r0, r5
 8004c7c:	47b8      	blx	r7
 8004c7e:	3001      	adds	r0, #1
 8004c80:	f43f ae70 	beq.w	8004964 <_printf_float+0x9c>
 8004c84:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8004c88:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8004c8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c90:	d01b      	beq.n	8004cca <_printf_float+0x402>
 8004c92:	9b08      	ldr	r3, [sp, #32]
 8004c94:	f108 0201 	add.w	r2, r8, #1
 8004c98:	3b01      	subs	r3, #1
 8004c9a:	4631      	mov	r1, r6
 8004c9c:	4628      	mov	r0, r5
 8004c9e:	47b8      	blx	r7
 8004ca0:	3001      	adds	r0, #1
 8004ca2:	d10e      	bne.n	8004cc2 <_printf_float+0x3fa>
 8004ca4:	e65e      	b.n	8004964 <_printf_float+0x9c>
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	464a      	mov	r2, r9
 8004caa:	4631      	mov	r1, r6
 8004cac:	4628      	mov	r0, r5
 8004cae:	47b8      	blx	r7
 8004cb0:	3001      	adds	r0, #1
 8004cb2:	f43f ae57 	beq.w	8004964 <_printf_float+0x9c>
 8004cb6:	f108 0801 	add.w	r8, r8, #1
 8004cba:	9b08      	ldr	r3, [sp, #32]
 8004cbc:	3b01      	subs	r3, #1
 8004cbe:	4543      	cmp	r3, r8
 8004cc0:	dcf1      	bgt.n	8004ca6 <_printf_float+0x3de>
 8004cc2:	9b04      	ldr	r3, [sp, #16]
 8004cc4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004cc8:	e6db      	b.n	8004a82 <_printf_float+0x1ba>
 8004cca:	f04f 0800 	mov.w	r8, #0
 8004cce:	f104 091a 	add.w	r9, r4, #26
 8004cd2:	e7f2      	b.n	8004cba <_printf_float+0x3f2>
 8004cd4:	2301      	movs	r3, #1
 8004cd6:	4642      	mov	r2, r8
 8004cd8:	e7df      	b.n	8004c9a <_printf_float+0x3d2>
 8004cda:	2301      	movs	r3, #1
 8004cdc:	464a      	mov	r2, r9
 8004cde:	4631      	mov	r1, r6
 8004ce0:	4628      	mov	r0, r5
 8004ce2:	47b8      	blx	r7
 8004ce4:	3001      	adds	r0, #1
 8004ce6:	f43f ae3d 	beq.w	8004964 <_printf_float+0x9c>
 8004cea:	f108 0801 	add.w	r8, r8, #1
 8004cee:	68e3      	ldr	r3, [r4, #12]
 8004cf0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004cf2:	1a5b      	subs	r3, r3, r1
 8004cf4:	4543      	cmp	r3, r8
 8004cf6:	dcf0      	bgt.n	8004cda <_printf_float+0x412>
 8004cf8:	e6f7      	b.n	8004aea <_printf_float+0x222>
 8004cfa:	f04f 0800 	mov.w	r8, #0
 8004cfe:	f104 0919 	add.w	r9, r4, #25
 8004d02:	e7f4      	b.n	8004cee <_printf_float+0x426>

08004d04 <_printf_common>:
 8004d04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d08:	4616      	mov	r6, r2
 8004d0a:	4699      	mov	r9, r3
 8004d0c:	688a      	ldr	r2, [r1, #8]
 8004d0e:	690b      	ldr	r3, [r1, #16]
 8004d10:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004d14:	4293      	cmp	r3, r2
 8004d16:	bfb8      	it	lt
 8004d18:	4613      	movlt	r3, r2
 8004d1a:	6033      	str	r3, [r6, #0]
 8004d1c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004d20:	4607      	mov	r7, r0
 8004d22:	460c      	mov	r4, r1
 8004d24:	b10a      	cbz	r2, 8004d2a <_printf_common+0x26>
 8004d26:	3301      	adds	r3, #1
 8004d28:	6033      	str	r3, [r6, #0]
 8004d2a:	6823      	ldr	r3, [r4, #0]
 8004d2c:	0699      	lsls	r1, r3, #26
 8004d2e:	bf42      	ittt	mi
 8004d30:	6833      	ldrmi	r3, [r6, #0]
 8004d32:	3302      	addmi	r3, #2
 8004d34:	6033      	strmi	r3, [r6, #0]
 8004d36:	6825      	ldr	r5, [r4, #0]
 8004d38:	f015 0506 	ands.w	r5, r5, #6
 8004d3c:	d106      	bne.n	8004d4c <_printf_common+0x48>
 8004d3e:	f104 0a19 	add.w	sl, r4, #25
 8004d42:	68e3      	ldr	r3, [r4, #12]
 8004d44:	6832      	ldr	r2, [r6, #0]
 8004d46:	1a9b      	subs	r3, r3, r2
 8004d48:	42ab      	cmp	r3, r5
 8004d4a:	dc26      	bgt.n	8004d9a <_printf_common+0x96>
 8004d4c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004d50:	1e13      	subs	r3, r2, #0
 8004d52:	6822      	ldr	r2, [r4, #0]
 8004d54:	bf18      	it	ne
 8004d56:	2301      	movne	r3, #1
 8004d58:	0692      	lsls	r2, r2, #26
 8004d5a:	d42b      	bmi.n	8004db4 <_printf_common+0xb0>
 8004d5c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004d60:	4649      	mov	r1, r9
 8004d62:	4638      	mov	r0, r7
 8004d64:	47c0      	blx	r8
 8004d66:	3001      	adds	r0, #1
 8004d68:	d01e      	beq.n	8004da8 <_printf_common+0xa4>
 8004d6a:	6823      	ldr	r3, [r4, #0]
 8004d6c:	68e5      	ldr	r5, [r4, #12]
 8004d6e:	6832      	ldr	r2, [r6, #0]
 8004d70:	f003 0306 	and.w	r3, r3, #6
 8004d74:	2b04      	cmp	r3, #4
 8004d76:	bf08      	it	eq
 8004d78:	1aad      	subeq	r5, r5, r2
 8004d7a:	68a3      	ldr	r3, [r4, #8]
 8004d7c:	6922      	ldr	r2, [r4, #16]
 8004d7e:	bf0c      	ite	eq
 8004d80:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004d84:	2500      	movne	r5, #0
 8004d86:	4293      	cmp	r3, r2
 8004d88:	bfc4      	itt	gt
 8004d8a:	1a9b      	subgt	r3, r3, r2
 8004d8c:	18ed      	addgt	r5, r5, r3
 8004d8e:	2600      	movs	r6, #0
 8004d90:	341a      	adds	r4, #26
 8004d92:	42b5      	cmp	r5, r6
 8004d94:	d11a      	bne.n	8004dcc <_printf_common+0xc8>
 8004d96:	2000      	movs	r0, #0
 8004d98:	e008      	b.n	8004dac <_printf_common+0xa8>
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	4652      	mov	r2, sl
 8004d9e:	4649      	mov	r1, r9
 8004da0:	4638      	mov	r0, r7
 8004da2:	47c0      	blx	r8
 8004da4:	3001      	adds	r0, #1
 8004da6:	d103      	bne.n	8004db0 <_printf_common+0xac>
 8004da8:	f04f 30ff 	mov.w	r0, #4294967295
 8004dac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004db0:	3501      	adds	r5, #1
 8004db2:	e7c6      	b.n	8004d42 <_printf_common+0x3e>
 8004db4:	18e1      	adds	r1, r4, r3
 8004db6:	1c5a      	adds	r2, r3, #1
 8004db8:	2030      	movs	r0, #48	; 0x30
 8004dba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004dbe:	4422      	add	r2, r4
 8004dc0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004dc4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004dc8:	3302      	adds	r3, #2
 8004dca:	e7c7      	b.n	8004d5c <_printf_common+0x58>
 8004dcc:	2301      	movs	r3, #1
 8004dce:	4622      	mov	r2, r4
 8004dd0:	4649      	mov	r1, r9
 8004dd2:	4638      	mov	r0, r7
 8004dd4:	47c0      	blx	r8
 8004dd6:	3001      	adds	r0, #1
 8004dd8:	d0e6      	beq.n	8004da8 <_printf_common+0xa4>
 8004dda:	3601      	adds	r6, #1
 8004ddc:	e7d9      	b.n	8004d92 <_printf_common+0x8e>
	...

08004de0 <_printf_i>:
 8004de0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004de4:	7e0f      	ldrb	r7, [r1, #24]
 8004de6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004de8:	2f78      	cmp	r7, #120	; 0x78
 8004dea:	4691      	mov	r9, r2
 8004dec:	4680      	mov	r8, r0
 8004dee:	460c      	mov	r4, r1
 8004df0:	469a      	mov	sl, r3
 8004df2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004df6:	d807      	bhi.n	8004e08 <_printf_i+0x28>
 8004df8:	2f62      	cmp	r7, #98	; 0x62
 8004dfa:	d80a      	bhi.n	8004e12 <_printf_i+0x32>
 8004dfc:	2f00      	cmp	r7, #0
 8004dfe:	f000 80d8 	beq.w	8004fb2 <_printf_i+0x1d2>
 8004e02:	2f58      	cmp	r7, #88	; 0x58
 8004e04:	f000 80a3 	beq.w	8004f4e <_printf_i+0x16e>
 8004e08:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004e0c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004e10:	e03a      	b.n	8004e88 <_printf_i+0xa8>
 8004e12:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004e16:	2b15      	cmp	r3, #21
 8004e18:	d8f6      	bhi.n	8004e08 <_printf_i+0x28>
 8004e1a:	a101      	add	r1, pc, #4	; (adr r1, 8004e20 <_printf_i+0x40>)
 8004e1c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004e20:	08004e79 	.word	0x08004e79
 8004e24:	08004e8d 	.word	0x08004e8d
 8004e28:	08004e09 	.word	0x08004e09
 8004e2c:	08004e09 	.word	0x08004e09
 8004e30:	08004e09 	.word	0x08004e09
 8004e34:	08004e09 	.word	0x08004e09
 8004e38:	08004e8d 	.word	0x08004e8d
 8004e3c:	08004e09 	.word	0x08004e09
 8004e40:	08004e09 	.word	0x08004e09
 8004e44:	08004e09 	.word	0x08004e09
 8004e48:	08004e09 	.word	0x08004e09
 8004e4c:	08004f99 	.word	0x08004f99
 8004e50:	08004ebd 	.word	0x08004ebd
 8004e54:	08004f7b 	.word	0x08004f7b
 8004e58:	08004e09 	.word	0x08004e09
 8004e5c:	08004e09 	.word	0x08004e09
 8004e60:	08004fbb 	.word	0x08004fbb
 8004e64:	08004e09 	.word	0x08004e09
 8004e68:	08004ebd 	.word	0x08004ebd
 8004e6c:	08004e09 	.word	0x08004e09
 8004e70:	08004e09 	.word	0x08004e09
 8004e74:	08004f83 	.word	0x08004f83
 8004e78:	682b      	ldr	r3, [r5, #0]
 8004e7a:	1d1a      	adds	r2, r3, #4
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	602a      	str	r2, [r5, #0]
 8004e80:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004e84:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004e88:	2301      	movs	r3, #1
 8004e8a:	e0a3      	b.n	8004fd4 <_printf_i+0x1f4>
 8004e8c:	6820      	ldr	r0, [r4, #0]
 8004e8e:	6829      	ldr	r1, [r5, #0]
 8004e90:	0606      	lsls	r6, r0, #24
 8004e92:	f101 0304 	add.w	r3, r1, #4
 8004e96:	d50a      	bpl.n	8004eae <_printf_i+0xce>
 8004e98:	680e      	ldr	r6, [r1, #0]
 8004e9a:	602b      	str	r3, [r5, #0]
 8004e9c:	2e00      	cmp	r6, #0
 8004e9e:	da03      	bge.n	8004ea8 <_printf_i+0xc8>
 8004ea0:	232d      	movs	r3, #45	; 0x2d
 8004ea2:	4276      	negs	r6, r6
 8004ea4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ea8:	485e      	ldr	r0, [pc, #376]	; (8005024 <_printf_i+0x244>)
 8004eaa:	230a      	movs	r3, #10
 8004eac:	e019      	b.n	8004ee2 <_printf_i+0x102>
 8004eae:	680e      	ldr	r6, [r1, #0]
 8004eb0:	602b      	str	r3, [r5, #0]
 8004eb2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004eb6:	bf18      	it	ne
 8004eb8:	b236      	sxthne	r6, r6
 8004eba:	e7ef      	b.n	8004e9c <_printf_i+0xbc>
 8004ebc:	682b      	ldr	r3, [r5, #0]
 8004ebe:	6820      	ldr	r0, [r4, #0]
 8004ec0:	1d19      	adds	r1, r3, #4
 8004ec2:	6029      	str	r1, [r5, #0]
 8004ec4:	0601      	lsls	r1, r0, #24
 8004ec6:	d501      	bpl.n	8004ecc <_printf_i+0xec>
 8004ec8:	681e      	ldr	r6, [r3, #0]
 8004eca:	e002      	b.n	8004ed2 <_printf_i+0xf2>
 8004ecc:	0646      	lsls	r6, r0, #25
 8004ece:	d5fb      	bpl.n	8004ec8 <_printf_i+0xe8>
 8004ed0:	881e      	ldrh	r6, [r3, #0]
 8004ed2:	4854      	ldr	r0, [pc, #336]	; (8005024 <_printf_i+0x244>)
 8004ed4:	2f6f      	cmp	r7, #111	; 0x6f
 8004ed6:	bf0c      	ite	eq
 8004ed8:	2308      	moveq	r3, #8
 8004eda:	230a      	movne	r3, #10
 8004edc:	2100      	movs	r1, #0
 8004ede:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004ee2:	6865      	ldr	r5, [r4, #4]
 8004ee4:	60a5      	str	r5, [r4, #8]
 8004ee6:	2d00      	cmp	r5, #0
 8004ee8:	bfa2      	ittt	ge
 8004eea:	6821      	ldrge	r1, [r4, #0]
 8004eec:	f021 0104 	bicge.w	r1, r1, #4
 8004ef0:	6021      	strge	r1, [r4, #0]
 8004ef2:	b90e      	cbnz	r6, 8004ef8 <_printf_i+0x118>
 8004ef4:	2d00      	cmp	r5, #0
 8004ef6:	d04d      	beq.n	8004f94 <_printf_i+0x1b4>
 8004ef8:	4615      	mov	r5, r2
 8004efa:	fbb6 f1f3 	udiv	r1, r6, r3
 8004efe:	fb03 6711 	mls	r7, r3, r1, r6
 8004f02:	5dc7      	ldrb	r7, [r0, r7]
 8004f04:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004f08:	4637      	mov	r7, r6
 8004f0a:	42bb      	cmp	r3, r7
 8004f0c:	460e      	mov	r6, r1
 8004f0e:	d9f4      	bls.n	8004efa <_printf_i+0x11a>
 8004f10:	2b08      	cmp	r3, #8
 8004f12:	d10b      	bne.n	8004f2c <_printf_i+0x14c>
 8004f14:	6823      	ldr	r3, [r4, #0]
 8004f16:	07de      	lsls	r6, r3, #31
 8004f18:	d508      	bpl.n	8004f2c <_printf_i+0x14c>
 8004f1a:	6923      	ldr	r3, [r4, #16]
 8004f1c:	6861      	ldr	r1, [r4, #4]
 8004f1e:	4299      	cmp	r1, r3
 8004f20:	bfde      	ittt	le
 8004f22:	2330      	movle	r3, #48	; 0x30
 8004f24:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004f28:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004f2c:	1b52      	subs	r2, r2, r5
 8004f2e:	6122      	str	r2, [r4, #16]
 8004f30:	f8cd a000 	str.w	sl, [sp]
 8004f34:	464b      	mov	r3, r9
 8004f36:	aa03      	add	r2, sp, #12
 8004f38:	4621      	mov	r1, r4
 8004f3a:	4640      	mov	r0, r8
 8004f3c:	f7ff fee2 	bl	8004d04 <_printf_common>
 8004f40:	3001      	adds	r0, #1
 8004f42:	d14c      	bne.n	8004fde <_printf_i+0x1fe>
 8004f44:	f04f 30ff 	mov.w	r0, #4294967295
 8004f48:	b004      	add	sp, #16
 8004f4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f4e:	4835      	ldr	r0, [pc, #212]	; (8005024 <_printf_i+0x244>)
 8004f50:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004f54:	6829      	ldr	r1, [r5, #0]
 8004f56:	6823      	ldr	r3, [r4, #0]
 8004f58:	f851 6b04 	ldr.w	r6, [r1], #4
 8004f5c:	6029      	str	r1, [r5, #0]
 8004f5e:	061d      	lsls	r5, r3, #24
 8004f60:	d514      	bpl.n	8004f8c <_printf_i+0x1ac>
 8004f62:	07df      	lsls	r7, r3, #31
 8004f64:	bf44      	itt	mi
 8004f66:	f043 0320 	orrmi.w	r3, r3, #32
 8004f6a:	6023      	strmi	r3, [r4, #0]
 8004f6c:	b91e      	cbnz	r6, 8004f76 <_printf_i+0x196>
 8004f6e:	6823      	ldr	r3, [r4, #0]
 8004f70:	f023 0320 	bic.w	r3, r3, #32
 8004f74:	6023      	str	r3, [r4, #0]
 8004f76:	2310      	movs	r3, #16
 8004f78:	e7b0      	b.n	8004edc <_printf_i+0xfc>
 8004f7a:	6823      	ldr	r3, [r4, #0]
 8004f7c:	f043 0320 	orr.w	r3, r3, #32
 8004f80:	6023      	str	r3, [r4, #0]
 8004f82:	2378      	movs	r3, #120	; 0x78
 8004f84:	4828      	ldr	r0, [pc, #160]	; (8005028 <_printf_i+0x248>)
 8004f86:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004f8a:	e7e3      	b.n	8004f54 <_printf_i+0x174>
 8004f8c:	0659      	lsls	r1, r3, #25
 8004f8e:	bf48      	it	mi
 8004f90:	b2b6      	uxthmi	r6, r6
 8004f92:	e7e6      	b.n	8004f62 <_printf_i+0x182>
 8004f94:	4615      	mov	r5, r2
 8004f96:	e7bb      	b.n	8004f10 <_printf_i+0x130>
 8004f98:	682b      	ldr	r3, [r5, #0]
 8004f9a:	6826      	ldr	r6, [r4, #0]
 8004f9c:	6961      	ldr	r1, [r4, #20]
 8004f9e:	1d18      	adds	r0, r3, #4
 8004fa0:	6028      	str	r0, [r5, #0]
 8004fa2:	0635      	lsls	r5, r6, #24
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	d501      	bpl.n	8004fac <_printf_i+0x1cc>
 8004fa8:	6019      	str	r1, [r3, #0]
 8004faa:	e002      	b.n	8004fb2 <_printf_i+0x1d2>
 8004fac:	0670      	lsls	r0, r6, #25
 8004fae:	d5fb      	bpl.n	8004fa8 <_printf_i+0x1c8>
 8004fb0:	8019      	strh	r1, [r3, #0]
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	6123      	str	r3, [r4, #16]
 8004fb6:	4615      	mov	r5, r2
 8004fb8:	e7ba      	b.n	8004f30 <_printf_i+0x150>
 8004fba:	682b      	ldr	r3, [r5, #0]
 8004fbc:	1d1a      	adds	r2, r3, #4
 8004fbe:	602a      	str	r2, [r5, #0]
 8004fc0:	681d      	ldr	r5, [r3, #0]
 8004fc2:	6862      	ldr	r2, [r4, #4]
 8004fc4:	2100      	movs	r1, #0
 8004fc6:	4628      	mov	r0, r5
 8004fc8:	f7fb f942 	bl	8000250 <memchr>
 8004fcc:	b108      	cbz	r0, 8004fd2 <_printf_i+0x1f2>
 8004fce:	1b40      	subs	r0, r0, r5
 8004fd0:	6060      	str	r0, [r4, #4]
 8004fd2:	6863      	ldr	r3, [r4, #4]
 8004fd4:	6123      	str	r3, [r4, #16]
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004fdc:	e7a8      	b.n	8004f30 <_printf_i+0x150>
 8004fde:	6923      	ldr	r3, [r4, #16]
 8004fe0:	462a      	mov	r2, r5
 8004fe2:	4649      	mov	r1, r9
 8004fe4:	4640      	mov	r0, r8
 8004fe6:	47d0      	blx	sl
 8004fe8:	3001      	adds	r0, #1
 8004fea:	d0ab      	beq.n	8004f44 <_printf_i+0x164>
 8004fec:	6823      	ldr	r3, [r4, #0]
 8004fee:	079b      	lsls	r3, r3, #30
 8004ff0:	d413      	bmi.n	800501a <_printf_i+0x23a>
 8004ff2:	68e0      	ldr	r0, [r4, #12]
 8004ff4:	9b03      	ldr	r3, [sp, #12]
 8004ff6:	4298      	cmp	r0, r3
 8004ff8:	bfb8      	it	lt
 8004ffa:	4618      	movlt	r0, r3
 8004ffc:	e7a4      	b.n	8004f48 <_printf_i+0x168>
 8004ffe:	2301      	movs	r3, #1
 8005000:	4632      	mov	r2, r6
 8005002:	4649      	mov	r1, r9
 8005004:	4640      	mov	r0, r8
 8005006:	47d0      	blx	sl
 8005008:	3001      	adds	r0, #1
 800500a:	d09b      	beq.n	8004f44 <_printf_i+0x164>
 800500c:	3501      	adds	r5, #1
 800500e:	68e3      	ldr	r3, [r4, #12]
 8005010:	9903      	ldr	r1, [sp, #12]
 8005012:	1a5b      	subs	r3, r3, r1
 8005014:	42ab      	cmp	r3, r5
 8005016:	dcf2      	bgt.n	8004ffe <_printf_i+0x21e>
 8005018:	e7eb      	b.n	8004ff2 <_printf_i+0x212>
 800501a:	2500      	movs	r5, #0
 800501c:	f104 0619 	add.w	r6, r4, #25
 8005020:	e7f5      	b.n	800500e <_printf_i+0x22e>
 8005022:	bf00      	nop
 8005024:	0800746e 	.word	0x0800746e
 8005028:	0800747f 	.word	0x0800747f

0800502c <siprintf>:
 800502c:	b40e      	push	{r1, r2, r3}
 800502e:	b500      	push	{lr}
 8005030:	b09c      	sub	sp, #112	; 0x70
 8005032:	ab1d      	add	r3, sp, #116	; 0x74
 8005034:	9002      	str	r0, [sp, #8]
 8005036:	9006      	str	r0, [sp, #24]
 8005038:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800503c:	4809      	ldr	r0, [pc, #36]	; (8005064 <siprintf+0x38>)
 800503e:	9107      	str	r1, [sp, #28]
 8005040:	9104      	str	r1, [sp, #16]
 8005042:	4909      	ldr	r1, [pc, #36]	; (8005068 <siprintf+0x3c>)
 8005044:	f853 2b04 	ldr.w	r2, [r3], #4
 8005048:	9105      	str	r1, [sp, #20]
 800504a:	6800      	ldr	r0, [r0, #0]
 800504c:	9301      	str	r3, [sp, #4]
 800504e:	a902      	add	r1, sp, #8
 8005050:	f001 faf8 	bl	8006644 <_svfiprintf_r>
 8005054:	9b02      	ldr	r3, [sp, #8]
 8005056:	2200      	movs	r2, #0
 8005058:	701a      	strb	r2, [r3, #0]
 800505a:	b01c      	add	sp, #112	; 0x70
 800505c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005060:	b003      	add	sp, #12
 8005062:	4770      	bx	lr
 8005064:	2000000c 	.word	0x2000000c
 8005068:	ffff0208 	.word	0xffff0208

0800506c <quorem>:
 800506c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005070:	6903      	ldr	r3, [r0, #16]
 8005072:	690c      	ldr	r4, [r1, #16]
 8005074:	42a3      	cmp	r3, r4
 8005076:	4607      	mov	r7, r0
 8005078:	f2c0 8081 	blt.w	800517e <quorem+0x112>
 800507c:	3c01      	subs	r4, #1
 800507e:	f101 0814 	add.w	r8, r1, #20
 8005082:	f100 0514 	add.w	r5, r0, #20
 8005086:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800508a:	9301      	str	r3, [sp, #4]
 800508c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005090:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005094:	3301      	adds	r3, #1
 8005096:	429a      	cmp	r2, r3
 8005098:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800509c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80050a0:	fbb2 f6f3 	udiv	r6, r2, r3
 80050a4:	d331      	bcc.n	800510a <quorem+0x9e>
 80050a6:	f04f 0e00 	mov.w	lr, #0
 80050aa:	4640      	mov	r0, r8
 80050ac:	46ac      	mov	ip, r5
 80050ae:	46f2      	mov	sl, lr
 80050b0:	f850 2b04 	ldr.w	r2, [r0], #4
 80050b4:	b293      	uxth	r3, r2
 80050b6:	fb06 e303 	mla	r3, r6, r3, lr
 80050ba:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80050be:	b29b      	uxth	r3, r3
 80050c0:	ebaa 0303 	sub.w	r3, sl, r3
 80050c4:	f8dc a000 	ldr.w	sl, [ip]
 80050c8:	0c12      	lsrs	r2, r2, #16
 80050ca:	fa13 f38a 	uxtah	r3, r3, sl
 80050ce:	fb06 e202 	mla	r2, r6, r2, lr
 80050d2:	9300      	str	r3, [sp, #0]
 80050d4:	9b00      	ldr	r3, [sp, #0]
 80050d6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80050da:	b292      	uxth	r2, r2
 80050dc:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80050e0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80050e4:	f8bd 3000 	ldrh.w	r3, [sp]
 80050e8:	4581      	cmp	r9, r0
 80050ea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80050ee:	f84c 3b04 	str.w	r3, [ip], #4
 80050f2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80050f6:	d2db      	bcs.n	80050b0 <quorem+0x44>
 80050f8:	f855 300b 	ldr.w	r3, [r5, fp]
 80050fc:	b92b      	cbnz	r3, 800510a <quorem+0x9e>
 80050fe:	9b01      	ldr	r3, [sp, #4]
 8005100:	3b04      	subs	r3, #4
 8005102:	429d      	cmp	r5, r3
 8005104:	461a      	mov	r2, r3
 8005106:	d32e      	bcc.n	8005166 <quorem+0xfa>
 8005108:	613c      	str	r4, [r7, #16]
 800510a:	4638      	mov	r0, r7
 800510c:	f001 f846 	bl	800619c <__mcmp>
 8005110:	2800      	cmp	r0, #0
 8005112:	db24      	blt.n	800515e <quorem+0xf2>
 8005114:	3601      	adds	r6, #1
 8005116:	4628      	mov	r0, r5
 8005118:	f04f 0c00 	mov.w	ip, #0
 800511c:	f858 2b04 	ldr.w	r2, [r8], #4
 8005120:	f8d0 e000 	ldr.w	lr, [r0]
 8005124:	b293      	uxth	r3, r2
 8005126:	ebac 0303 	sub.w	r3, ip, r3
 800512a:	0c12      	lsrs	r2, r2, #16
 800512c:	fa13 f38e 	uxtah	r3, r3, lr
 8005130:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005134:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005138:	b29b      	uxth	r3, r3
 800513a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800513e:	45c1      	cmp	r9, r8
 8005140:	f840 3b04 	str.w	r3, [r0], #4
 8005144:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005148:	d2e8      	bcs.n	800511c <quorem+0xb0>
 800514a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800514e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005152:	b922      	cbnz	r2, 800515e <quorem+0xf2>
 8005154:	3b04      	subs	r3, #4
 8005156:	429d      	cmp	r5, r3
 8005158:	461a      	mov	r2, r3
 800515a:	d30a      	bcc.n	8005172 <quorem+0x106>
 800515c:	613c      	str	r4, [r7, #16]
 800515e:	4630      	mov	r0, r6
 8005160:	b003      	add	sp, #12
 8005162:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005166:	6812      	ldr	r2, [r2, #0]
 8005168:	3b04      	subs	r3, #4
 800516a:	2a00      	cmp	r2, #0
 800516c:	d1cc      	bne.n	8005108 <quorem+0x9c>
 800516e:	3c01      	subs	r4, #1
 8005170:	e7c7      	b.n	8005102 <quorem+0x96>
 8005172:	6812      	ldr	r2, [r2, #0]
 8005174:	3b04      	subs	r3, #4
 8005176:	2a00      	cmp	r2, #0
 8005178:	d1f0      	bne.n	800515c <quorem+0xf0>
 800517a:	3c01      	subs	r4, #1
 800517c:	e7eb      	b.n	8005156 <quorem+0xea>
 800517e:	2000      	movs	r0, #0
 8005180:	e7ee      	b.n	8005160 <quorem+0xf4>
 8005182:	0000      	movs	r0, r0
 8005184:	0000      	movs	r0, r0
	...

08005188 <_dtoa_r>:
 8005188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800518c:	ed2d 8b02 	vpush	{d8}
 8005190:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005192:	b091      	sub	sp, #68	; 0x44
 8005194:	ed8d 0b02 	vstr	d0, [sp, #8]
 8005198:	ec59 8b10 	vmov	r8, r9, d0
 800519c:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 800519e:	9106      	str	r1, [sp, #24]
 80051a0:	4606      	mov	r6, r0
 80051a2:	9208      	str	r2, [sp, #32]
 80051a4:	930c      	str	r3, [sp, #48]	; 0x30
 80051a6:	b975      	cbnz	r5, 80051c6 <_dtoa_r+0x3e>
 80051a8:	2010      	movs	r0, #16
 80051aa:	f000 fd5f 	bl	8005c6c <malloc>
 80051ae:	4602      	mov	r2, r0
 80051b0:	6270      	str	r0, [r6, #36]	; 0x24
 80051b2:	b920      	cbnz	r0, 80051be <_dtoa_r+0x36>
 80051b4:	4baa      	ldr	r3, [pc, #680]	; (8005460 <_dtoa_r+0x2d8>)
 80051b6:	21ea      	movs	r1, #234	; 0xea
 80051b8:	48aa      	ldr	r0, [pc, #680]	; (8005464 <_dtoa_r+0x2dc>)
 80051ba:	f001 fb53 	bl	8006864 <__assert_func>
 80051be:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80051c2:	6005      	str	r5, [r0, #0]
 80051c4:	60c5      	str	r5, [r0, #12]
 80051c6:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80051c8:	6819      	ldr	r1, [r3, #0]
 80051ca:	b151      	cbz	r1, 80051e2 <_dtoa_r+0x5a>
 80051cc:	685a      	ldr	r2, [r3, #4]
 80051ce:	604a      	str	r2, [r1, #4]
 80051d0:	2301      	movs	r3, #1
 80051d2:	4093      	lsls	r3, r2
 80051d4:	608b      	str	r3, [r1, #8]
 80051d6:	4630      	mov	r0, r6
 80051d8:	f000 fd9e 	bl	8005d18 <_Bfree>
 80051dc:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80051de:	2200      	movs	r2, #0
 80051e0:	601a      	str	r2, [r3, #0]
 80051e2:	f1b9 0300 	subs.w	r3, r9, #0
 80051e6:	bfbb      	ittet	lt
 80051e8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80051ec:	9303      	strlt	r3, [sp, #12]
 80051ee:	2300      	movge	r3, #0
 80051f0:	2201      	movlt	r2, #1
 80051f2:	bfac      	ite	ge
 80051f4:	6023      	strge	r3, [r4, #0]
 80051f6:	6022      	strlt	r2, [r4, #0]
 80051f8:	4b9b      	ldr	r3, [pc, #620]	; (8005468 <_dtoa_r+0x2e0>)
 80051fa:	9c03      	ldr	r4, [sp, #12]
 80051fc:	43a3      	bics	r3, r4
 80051fe:	d11c      	bne.n	800523a <_dtoa_r+0xb2>
 8005200:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005202:	f242 730f 	movw	r3, #9999	; 0x270f
 8005206:	6013      	str	r3, [r2, #0]
 8005208:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800520c:	ea53 0308 	orrs.w	r3, r3, r8
 8005210:	f000 84fd 	beq.w	8005c0e <_dtoa_r+0xa86>
 8005214:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005216:	b963      	cbnz	r3, 8005232 <_dtoa_r+0xaa>
 8005218:	4b94      	ldr	r3, [pc, #592]	; (800546c <_dtoa_r+0x2e4>)
 800521a:	e01f      	b.n	800525c <_dtoa_r+0xd4>
 800521c:	4b94      	ldr	r3, [pc, #592]	; (8005470 <_dtoa_r+0x2e8>)
 800521e:	9301      	str	r3, [sp, #4]
 8005220:	3308      	adds	r3, #8
 8005222:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8005224:	6013      	str	r3, [r2, #0]
 8005226:	9801      	ldr	r0, [sp, #4]
 8005228:	b011      	add	sp, #68	; 0x44
 800522a:	ecbd 8b02 	vpop	{d8}
 800522e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005232:	4b8e      	ldr	r3, [pc, #568]	; (800546c <_dtoa_r+0x2e4>)
 8005234:	9301      	str	r3, [sp, #4]
 8005236:	3303      	adds	r3, #3
 8005238:	e7f3      	b.n	8005222 <_dtoa_r+0x9a>
 800523a:	ed9d 8b02 	vldr	d8, [sp, #8]
 800523e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8005242:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005246:	d10b      	bne.n	8005260 <_dtoa_r+0xd8>
 8005248:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800524a:	2301      	movs	r3, #1
 800524c:	6013      	str	r3, [r2, #0]
 800524e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005250:	2b00      	cmp	r3, #0
 8005252:	f000 84d9 	beq.w	8005c08 <_dtoa_r+0xa80>
 8005256:	4887      	ldr	r0, [pc, #540]	; (8005474 <_dtoa_r+0x2ec>)
 8005258:	6018      	str	r0, [r3, #0]
 800525a:	1e43      	subs	r3, r0, #1
 800525c:	9301      	str	r3, [sp, #4]
 800525e:	e7e2      	b.n	8005226 <_dtoa_r+0x9e>
 8005260:	a90f      	add	r1, sp, #60	; 0x3c
 8005262:	aa0e      	add	r2, sp, #56	; 0x38
 8005264:	4630      	mov	r0, r6
 8005266:	eeb0 0b48 	vmov.f64	d0, d8
 800526a:	f001 f83d 	bl	80062e8 <__d2b>
 800526e:	f3c4 510a 	ubfx	r1, r4, #20, #11
 8005272:	4605      	mov	r5, r0
 8005274:	980e      	ldr	r0, [sp, #56]	; 0x38
 8005276:	2900      	cmp	r1, #0
 8005278:	d046      	beq.n	8005308 <_dtoa_r+0x180>
 800527a:	ee18 4a90 	vmov	r4, s17
 800527e:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8005282:	ec53 2b18 	vmov	r2, r3, d8
 8005286:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 800528a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800528e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8005292:	2400      	movs	r4, #0
 8005294:	ec43 2b16 	vmov	d6, r2, r3
 8005298:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800529c:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8005448 <_dtoa_r+0x2c0>
 80052a0:	ee36 7b47 	vsub.f64	d7, d6, d7
 80052a4:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 8005450 <_dtoa_r+0x2c8>
 80052a8:	eea7 6b05 	vfma.f64	d6, d7, d5
 80052ac:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8005458 <_dtoa_r+0x2d0>
 80052b0:	ee07 1a90 	vmov	s15, r1
 80052b4:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 80052b8:	eeb0 7b46 	vmov.f64	d7, d6
 80052bc:	eea4 7b05 	vfma.f64	d7, d4, d5
 80052c0:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 80052c4:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80052c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052cc:	ee16 ba90 	vmov	fp, s13
 80052d0:	940a      	str	r4, [sp, #40]	; 0x28
 80052d2:	d508      	bpl.n	80052e6 <_dtoa_r+0x15e>
 80052d4:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80052d8:	eeb4 6b47 	vcmp.f64	d6, d7
 80052dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052e0:	bf18      	it	ne
 80052e2:	f10b 3bff 	addne.w	fp, fp, #4294967295
 80052e6:	f1bb 0f16 	cmp.w	fp, #22
 80052ea:	d82f      	bhi.n	800534c <_dtoa_r+0x1c4>
 80052ec:	4b62      	ldr	r3, [pc, #392]	; (8005478 <_dtoa_r+0x2f0>)
 80052ee:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80052f2:	ed93 7b00 	vldr	d7, [r3]
 80052f6:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80052fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052fe:	d501      	bpl.n	8005304 <_dtoa_r+0x17c>
 8005300:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005304:	2300      	movs	r3, #0
 8005306:	e022      	b.n	800534e <_dtoa_r+0x1c6>
 8005308:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800530a:	4401      	add	r1, r0
 800530c:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8005310:	2b20      	cmp	r3, #32
 8005312:	bfc1      	itttt	gt
 8005314:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005318:	fa04 f303 	lslgt.w	r3, r4, r3
 800531c:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8005320:	fa28 f804 	lsrgt.w	r8, r8, r4
 8005324:	bfd6      	itet	le
 8005326:	f1c3 0320 	rsble	r3, r3, #32
 800532a:	ea43 0808 	orrgt.w	r8, r3, r8
 800532e:	fa08 f803 	lslle.w	r8, r8, r3
 8005332:	ee07 8a90 	vmov	s15, r8
 8005336:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800533a:	3901      	subs	r1, #1
 800533c:	ee17 4a90 	vmov	r4, s15
 8005340:	ec53 2b17 	vmov	r2, r3, d7
 8005344:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8005348:	2401      	movs	r4, #1
 800534a:	e7a3      	b.n	8005294 <_dtoa_r+0x10c>
 800534c:	2301      	movs	r3, #1
 800534e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005350:	1a43      	subs	r3, r0, r1
 8005352:	1e5a      	subs	r2, r3, #1
 8005354:	bf45      	ittet	mi
 8005356:	f1c3 0301 	rsbmi	r3, r3, #1
 800535a:	9304      	strmi	r3, [sp, #16]
 800535c:	2300      	movpl	r3, #0
 800535e:	2300      	movmi	r3, #0
 8005360:	9205      	str	r2, [sp, #20]
 8005362:	bf54      	ite	pl
 8005364:	9304      	strpl	r3, [sp, #16]
 8005366:	9305      	strmi	r3, [sp, #20]
 8005368:	f1bb 0f00 	cmp.w	fp, #0
 800536c:	db18      	blt.n	80053a0 <_dtoa_r+0x218>
 800536e:	9b05      	ldr	r3, [sp, #20]
 8005370:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8005374:	445b      	add	r3, fp
 8005376:	9305      	str	r3, [sp, #20]
 8005378:	2300      	movs	r3, #0
 800537a:	9a06      	ldr	r2, [sp, #24]
 800537c:	2a09      	cmp	r2, #9
 800537e:	d849      	bhi.n	8005414 <_dtoa_r+0x28c>
 8005380:	2a05      	cmp	r2, #5
 8005382:	bfc4      	itt	gt
 8005384:	3a04      	subgt	r2, #4
 8005386:	9206      	strgt	r2, [sp, #24]
 8005388:	9a06      	ldr	r2, [sp, #24]
 800538a:	f1a2 0202 	sub.w	r2, r2, #2
 800538e:	bfcc      	ite	gt
 8005390:	2400      	movgt	r4, #0
 8005392:	2401      	movle	r4, #1
 8005394:	2a03      	cmp	r2, #3
 8005396:	d848      	bhi.n	800542a <_dtoa_r+0x2a2>
 8005398:	e8df f002 	tbb	[pc, r2]
 800539c:	3a2c2e0b 	.word	0x3a2c2e0b
 80053a0:	9b04      	ldr	r3, [sp, #16]
 80053a2:	2200      	movs	r2, #0
 80053a4:	eba3 030b 	sub.w	r3, r3, fp
 80053a8:	9304      	str	r3, [sp, #16]
 80053aa:	9209      	str	r2, [sp, #36]	; 0x24
 80053ac:	f1cb 0300 	rsb	r3, fp, #0
 80053b0:	e7e3      	b.n	800537a <_dtoa_r+0x1f2>
 80053b2:	2200      	movs	r2, #0
 80053b4:	9207      	str	r2, [sp, #28]
 80053b6:	9a08      	ldr	r2, [sp, #32]
 80053b8:	2a00      	cmp	r2, #0
 80053ba:	dc39      	bgt.n	8005430 <_dtoa_r+0x2a8>
 80053bc:	f04f 0a01 	mov.w	sl, #1
 80053c0:	46d1      	mov	r9, sl
 80053c2:	4652      	mov	r2, sl
 80053c4:	f8cd a020 	str.w	sl, [sp, #32]
 80053c8:	6a77      	ldr	r7, [r6, #36]	; 0x24
 80053ca:	2100      	movs	r1, #0
 80053cc:	6079      	str	r1, [r7, #4]
 80053ce:	2004      	movs	r0, #4
 80053d0:	f100 0c14 	add.w	ip, r0, #20
 80053d4:	4594      	cmp	ip, r2
 80053d6:	6879      	ldr	r1, [r7, #4]
 80053d8:	d92f      	bls.n	800543a <_dtoa_r+0x2b2>
 80053da:	4630      	mov	r0, r6
 80053dc:	930d      	str	r3, [sp, #52]	; 0x34
 80053de:	f000 fc5b 	bl	8005c98 <_Balloc>
 80053e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80053e4:	9001      	str	r0, [sp, #4]
 80053e6:	4602      	mov	r2, r0
 80053e8:	2800      	cmp	r0, #0
 80053ea:	d149      	bne.n	8005480 <_dtoa_r+0x2f8>
 80053ec:	4b23      	ldr	r3, [pc, #140]	; (800547c <_dtoa_r+0x2f4>)
 80053ee:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80053f2:	e6e1      	b.n	80051b8 <_dtoa_r+0x30>
 80053f4:	2201      	movs	r2, #1
 80053f6:	e7dd      	b.n	80053b4 <_dtoa_r+0x22c>
 80053f8:	2200      	movs	r2, #0
 80053fa:	9207      	str	r2, [sp, #28]
 80053fc:	9a08      	ldr	r2, [sp, #32]
 80053fe:	eb0b 0a02 	add.w	sl, fp, r2
 8005402:	f10a 0901 	add.w	r9, sl, #1
 8005406:	464a      	mov	r2, r9
 8005408:	2a01      	cmp	r2, #1
 800540a:	bfb8      	it	lt
 800540c:	2201      	movlt	r2, #1
 800540e:	e7db      	b.n	80053c8 <_dtoa_r+0x240>
 8005410:	2201      	movs	r2, #1
 8005412:	e7f2      	b.n	80053fa <_dtoa_r+0x272>
 8005414:	2401      	movs	r4, #1
 8005416:	2200      	movs	r2, #0
 8005418:	e9cd 2406 	strd	r2, r4, [sp, #24]
 800541c:	f04f 3aff 	mov.w	sl, #4294967295
 8005420:	2100      	movs	r1, #0
 8005422:	46d1      	mov	r9, sl
 8005424:	2212      	movs	r2, #18
 8005426:	9108      	str	r1, [sp, #32]
 8005428:	e7ce      	b.n	80053c8 <_dtoa_r+0x240>
 800542a:	2201      	movs	r2, #1
 800542c:	9207      	str	r2, [sp, #28]
 800542e:	e7f5      	b.n	800541c <_dtoa_r+0x294>
 8005430:	f8dd a020 	ldr.w	sl, [sp, #32]
 8005434:	46d1      	mov	r9, sl
 8005436:	4652      	mov	r2, sl
 8005438:	e7c6      	b.n	80053c8 <_dtoa_r+0x240>
 800543a:	3101      	adds	r1, #1
 800543c:	6079      	str	r1, [r7, #4]
 800543e:	0040      	lsls	r0, r0, #1
 8005440:	e7c6      	b.n	80053d0 <_dtoa_r+0x248>
 8005442:	bf00      	nop
 8005444:	f3af 8000 	nop.w
 8005448:	636f4361 	.word	0x636f4361
 800544c:	3fd287a7 	.word	0x3fd287a7
 8005450:	8b60c8b3 	.word	0x8b60c8b3
 8005454:	3fc68a28 	.word	0x3fc68a28
 8005458:	509f79fb 	.word	0x509f79fb
 800545c:	3fd34413 	.word	0x3fd34413
 8005460:	0800749d 	.word	0x0800749d
 8005464:	080074b4 	.word	0x080074b4
 8005468:	7ff00000 	.word	0x7ff00000
 800546c:	08007499 	.word	0x08007499
 8005470:	08007490 	.word	0x08007490
 8005474:	0800746d 	.word	0x0800746d
 8005478:	080075a8 	.word	0x080075a8
 800547c:	0800750f 	.word	0x0800750f
 8005480:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8005482:	9901      	ldr	r1, [sp, #4]
 8005484:	6011      	str	r1, [r2, #0]
 8005486:	f1b9 0f0e 	cmp.w	r9, #14
 800548a:	d86c      	bhi.n	8005566 <_dtoa_r+0x3de>
 800548c:	2c00      	cmp	r4, #0
 800548e:	d06a      	beq.n	8005566 <_dtoa_r+0x3de>
 8005490:	f1bb 0f00 	cmp.w	fp, #0
 8005494:	f340 80a0 	ble.w	80055d8 <_dtoa_r+0x450>
 8005498:	49c1      	ldr	r1, [pc, #772]	; (80057a0 <_dtoa_r+0x618>)
 800549a:	f00b 020f 	and.w	r2, fp, #15
 800549e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 80054a2:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80054a6:	ed92 7b00 	vldr	d7, [r2]
 80054aa:	ea4f 112b 	mov.w	r1, fp, asr #4
 80054ae:	f000 8087 	beq.w	80055c0 <_dtoa_r+0x438>
 80054b2:	4abc      	ldr	r2, [pc, #752]	; (80057a4 <_dtoa_r+0x61c>)
 80054b4:	ed92 6b08 	vldr	d6, [r2, #32]
 80054b8:	ee88 6b06 	vdiv.f64	d6, d8, d6
 80054bc:	ed8d 6b02 	vstr	d6, [sp, #8]
 80054c0:	f001 010f 	and.w	r1, r1, #15
 80054c4:	2203      	movs	r2, #3
 80054c6:	48b7      	ldr	r0, [pc, #732]	; (80057a4 <_dtoa_r+0x61c>)
 80054c8:	2900      	cmp	r1, #0
 80054ca:	d17b      	bne.n	80055c4 <_dtoa_r+0x43c>
 80054cc:	ed9d 6b02 	vldr	d6, [sp, #8]
 80054d0:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80054d4:	ed8d 7b02 	vstr	d7, [sp, #8]
 80054d8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80054da:	2900      	cmp	r1, #0
 80054dc:	f000 80a2 	beq.w	8005624 <_dtoa_r+0x49c>
 80054e0:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80054e4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80054e8:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80054ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054f0:	f140 8098 	bpl.w	8005624 <_dtoa_r+0x49c>
 80054f4:	f1b9 0f00 	cmp.w	r9, #0
 80054f8:	f000 8094 	beq.w	8005624 <_dtoa_r+0x49c>
 80054fc:	f1ba 0f00 	cmp.w	sl, #0
 8005500:	dd2f      	ble.n	8005562 <_dtoa_r+0x3da>
 8005502:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8005506:	ee27 7b06 	vmul.f64	d7, d7, d6
 800550a:	ed8d 7b02 	vstr	d7, [sp, #8]
 800550e:	f10b 37ff 	add.w	r7, fp, #4294967295
 8005512:	3201      	adds	r2, #1
 8005514:	4650      	mov	r0, sl
 8005516:	ed9d 6b02 	vldr	d6, [sp, #8]
 800551a:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800551e:	ee07 2a90 	vmov	s15, r2
 8005522:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8005526:	eea7 5b06 	vfma.f64	d5, d7, d6
 800552a:	ee15 4a90 	vmov	r4, s11
 800552e:	ec52 1b15 	vmov	r1, r2, d5
 8005532:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 8005536:	2800      	cmp	r0, #0
 8005538:	d177      	bne.n	800562a <_dtoa_r+0x4a2>
 800553a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800553e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8005542:	ec42 1b17 	vmov	d7, r1, r2
 8005546:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800554a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800554e:	f300 8263 	bgt.w	8005a18 <_dtoa_r+0x890>
 8005552:	eeb1 7b47 	vneg.f64	d7, d7
 8005556:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800555a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800555e:	f100 8258 	bmi.w	8005a12 <_dtoa_r+0x88a>
 8005562:	ed8d 8b02 	vstr	d8, [sp, #8]
 8005566:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005568:	2a00      	cmp	r2, #0
 800556a:	f2c0 811d 	blt.w	80057a8 <_dtoa_r+0x620>
 800556e:	f1bb 0f0e 	cmp.w	fp, #14
 8005572:	f300 8119 	bgt.w	80057a8 <_dtoa_r+0x620>
 8005576:	4b8a      	ldr	r3, [pc, #552]	; (80057a0 <_dtoa_r+0x618>)
 8005578:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800557c:	ed93 6b00 	vldr	d6, [r3]
 8005580:	9b08      	ldr	r3, [sp, #32]
 8005582:	2b00      	cmp	r3, #0
 8005584:	f280 80b7 	bge.w	80056f6 <_dtoa_r+0x56e>
 8005588:	f1b9 0f00 	cmp.w	r9, #0
 800558c:	f300 80b3 	bgt.w	80056f6 <_dtoa_r+0x56e>
 8005590:	f040 823f 	bne.w	8005a12 <_dtoa_r+0x88a>
 8005594:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8005598:	ee26 6b07 	vmul.f64	d6, d6, d7
 800559c:	ed9d 7b02 	vldr	d7, [sp, #8]
 80055a0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80055a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055a8:	464c      	mov	r4, r9
 80055aa:	464f      	mov	r7, r9
 80055ac:	f280 8215 	bge.w	80059da <_dtoa_r+0x852>
 80055b0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80055b4:	2331      	movs	r3, #49	; 0x31
 80055b6:	f808 3b01 	strb.w	r3, [r8], #1
 80055ba:	f10b 0b01 	add.w	fp, fp, #1
 80055be:	e211      	b.n	80059e4 <_dtoa_r+0x85c>
 80055c0:	2202      	movs	r2, #2
 80055c2:	e780      	b.n	80054c6 <_dtoa_r+0x33e>
 80055c4:	07cc      	lsls	r4, r1, #31
 80055c6:	d504      	bpl.n	80055d2 <_dtoa_r+0x44a>
 80055c8:	ed90 6b00 	vldr	d6, [r0]
 80055cc:	3201      	adds	r2, #1
 80055ce:	ee27 7b06 	vmul.f64	d7, d7, d6
 80055d2:	1049      	asrs	r1, r1, #1
 80055d4:	3008      	adds	r0, #8
 80055d6:	e777      	b.n	80054c8 <_dtoa_r+0x340>
 80055d8:	d022      	beq.n	8005620 <_dtoa_r+0x498>
 80055da:	f1cb 0100 	rsb	r1, fp, #0
 80055de:	4a70      	ldr	r2, [pc, #448]	; (80057a0 <_dtoa_r+0x618>)
 80055e0:	f001 000f 	and.w	r0, r1, #15
 80055e4:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80055e8:	ed92 7b00 	vldr	d7, [r2]
 80055ec:	ee28 7b07 	vmul.f64	d7, d8, d7
 80055f0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80055f4:	486b      	ldr	r0, [pc, #428]	; (80057a4 <_dtoa_r+0x61c>)
 80055f6:	1109      	asrs	r1, r1, #4
 80055f8:	2400      	movs	r4, #0
 80055fa:	2202      	movs	r2, #2
 80055fc:	b929      	cbnz	r1, 800560a <_dtoa_r+0x482>
 80055fe:	2c00      	cmp	r4, #0
 8005600:	f43f af6a 	beq.w	80054d8 <_dtoa_r+0x350>
 8005604:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005608:	e766      	b.n	80054d8 <_dtoa_r+0x350>
 800560a:	07cf      	lsls	r7, r1, #31
 800560c:	d505      	bpl.n	800561a <_dtoa_r+0x492>
 800560e:	ed90 6b00 	vldr	d6, [r0]
 8005612:	3201      	adds	r2, #1
 8005614:	2401      	movs	r4, #1
 8005616:	ee27 7b06 	vmul.f64	d7, d7, d6
 800561a:	1049      	asrs	r1, r1, #1
 800561c:	3008      	adds	r0, #8
 800561e:	e7ed      	b.n	80055fc <_dtoa_r+0x474>
 8005620:	2202      	movs	r2, #2
 8005622:	e759      	b.n	80054d8 <_dtoa_r+0x350>
 8005624:	465f      	mov	r7, fp
 8005626:	4648      	mov	r0, r9
 8005628:	e775      	b.n	8005516 <_dtoa_r+0x38e>
 800562a:	ec42 1b17 	vmov	d7, r1, r2
 800562e:	4a5c      	ldr	r2, [pc, #368]	; (80057a0 <_dtoa_r+0x618>)
 8005630:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8005634:	ed12 4b02 	vldr	d4, [r2, #-8]
 8005638:	9a01      	ldr	r2, [sp, #4]
 800563a:	1814      	adds	r4, r2, r0
 800563c:	9a07      	ldr	r2, [sp, #28]
 800563e:	b352      	cbz	r2, 8005696 <_dtoa_r+0x50e>
 8005640:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8005644:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8005648:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800564c:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8005650:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8005654:	ee35 7b47 	vsub.f64	d7, d5, d7
 8005658:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800565c:	ee14 2a90 	vmov	r2, s9
 8005660:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8005664:	3230      	adds	r2, #48	; 0x30
 8005666:	ee36 6b45 	vsub.f64	d6, d6, d5
 800566a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800566e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005672:	f808 2b01 	strb.w	r2, [r8], #1
 8005676:	d439      	bmi.n	80056ec <_dtoa_r+0x564>
 8005678:	ee32 5b46 	vsub.f64	d5, d2, d6
 800567c:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8005680:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005684:	d472      	bmi.n	800576c <_dtoa_r+0x5e4>
 8005686:	45a0      	cmp	r8, r4
 8005688:	f43f af6b 	beq.w	8005562 <_dtoa_r+0x3da>
 800568c:	ee27 7b03 	vmul.f64	d7, d7, d3
 8005690:	ee26 6b03 	vmul.f64	d6, d6, d3
 8005694:	e7e0      	b.n	8005658 <_dtoa_r+0x4d0>
 8005696:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800569a:	ee27 7b04 	vmul.f64	d7, d7, d4
 800569e:	4621      	mov	r1, r4
 80056a0:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80056a4:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80056a8:	ee14 2a90 	vmov	r2, s9
 80056ac:	3230      	adds	r2, #48	; 0x30
 80056ae:	f808 2b01 	strb.w	r2, [r8], #1
 80056b2:	45a0      	cmp	r8, r4
 80056b4:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80056b8:	ee36 6b45 	vsub.f64	d6, d6, d5
 80056bc:	d118      	bne.n	80056f0 <_dtoa_r+0x568>
 80056be:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 80056c2:	ee37 4b05 	vadd.f64	d4, d7, d5
 80056c6:	eeb4 6bc4 	vcmpe.f64	d6, d4
 80056ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056ce:	dc4d      	bgt.n	800576c <_dtoa_r+0x5e4>
 80056d0:	ee35 7b47 	vsub.f64	d7, d5, d7
 80056d4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80056d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056dc:	f57f af41 	bpl.w	8005562 <_dtoa_r+0x3da>
 80056e0:	4688      	mov	r8, r1
 80056e2:	3901      	subs	r1, #1
 80056e4:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 80056e8:	2b30      	cmp	r3, #48	; 0x30
 80056ea:	d0f9      	beq.n	80056e0 <_dtoa_r+0x558>
 80056ec:	46bb      	mov	fp, r7
 80056ee:	e02a      	b.n	8005746 <_dtoa_r+0x5be>
 80056f0:	ee26 6b03 	vmul.f64	d6, d6, d3
 80056f4:	e7d6      	b.n	80056a4 <_dtoa_r+0x51c>
 80056f6:	ed9d 7b02 	vldr	d7, [sp, #8]
 80056fa:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 80056fe:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8005702:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8005706:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800570a:	ee15 3a10 	vmov	r3, s10
 800570e:	3330      	adds	r3, #48	; 0x30
 8005710:	f808 3b01 	strb.w	r3, [r8], #1
 8005714:	9b01      	ldr	r3, [sp, #4]
 8005716:	eba8 0303 	sub.w	r3, r8, r3
 800571a:	4599      	cmp	r9, r3
 800571c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8005720:	eea3 7b46 	vfms.f64	d7, d3, d6
 8005724:	d133      	bne.n	800578e <_dtoa_r+0x606>
 8005726:	ee37 7b07 	vadd.f64	d7, d7, d7
 800572a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800572e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005732:	dc1a      	bgt.n	800576a <_dtoa_r+0x5e2>
 8005734:	eeb4 7b46 	vcmp.f64	d7, d6
 8005738:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800573c:	d103      	bne.n	8005746 <_dtoa_r+0x5be>
 800573e:	ee15 3a10 	vmov	r3, s10
 8005742:	07d9      	lsls	r1, r3, #31
 8005744:	d411      	bmi.n	800576a <_dtoa_r+0x5e2>
 8005746:	4629      	mov	r1, r5
 8005748:	4630      	mov	r0, r6
 800574a:	f000 fae5 	bl	8005d18 <_Bfree>
 800574e:	2300      	movs	r3, #0
 8005750:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005752:	f888 3000 	strb.w	r3, [r8]
 8005756:	f10b 0301 	add.w	r3, fp, #1
 800575a:	6013      	str	r3, [r2, #0]
 800575c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800575e:	2b00      	cmp	r3, #0
 8005760:	f43f ad61 	beq.w	8005226 <_dtoa_r+0x9e>
 8005764:	f8c3 8000 	str.w	r8, [r3]
 8005768:	e55d      	b.n	8005226 <_dtoa_r+0x9e>
 800576a:	465f      	mov	r7, fp
 800576c:	4643      	mov	r3, r8
 800576e:	4698      	mov	r8, r3
 8005770:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005774:	2a39      	cmp	r2, #57	; 0x39
 8005776:	d106      	bne.n	8005786 <_dtoa_r+0x5fe>
 8005778:	9a01      	ldr	r2, [sp, #4]
 800577a:	429a      	cmp	r2, r3
 800577c:	d1f7      	bne.n	800576e <_dtoa_r+0x5e6>
 800577e:	9901      	ldr	r1, [sp, #4]
 8005780:	2230      	movs	r2, #48	; 0x30
 8005782:	3701      	adds	r7, #1
 8005784:	700a      	strb	r2, [r1, #0]
 8005786:	781a      	ldrb	r2, [r3, #0]
 8005788:	3201      	adds	r2, #1
 800578a:	701a      	strb	r2, [r3, #0]
 800578c:	e7ae      	b.n	80056ec <_dtoa_r+0x564>
 800578e:	ee27 7b04 	vmul.f64	d7, d7, d4
 8005792:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8005796:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800579a:	d1b2      	bne.n	8005702 <_dtoa_r+0x57a>
 800579c:	e7d3      	b.n	8005746 <_dtoa_r+0x5be>
 800579e:	bf00      	nop
 80057a0:	080075a8 	.word	0x080075a8
 80057a4:	08007580 	.word	0x08007580
 80057a8:	9907      	ldr	r1, [sp, #28]
 80057aa:	2900      	cmp	r1, #0
 80057ac:	f000 80d0 	beq.w	8005950 <_dtoa_r+0x7c8>
 80057b0:	9906      	ldr	r1, [sp, #24]
 80057b2:	2901      	cmp	r1, #1
 80057b4:	f300 80b4 	bgt.w	8005920 <_dtoa_r+0x798>
 80057b8:	990a      	ldr	r1, [sp, #40]	; 0x28
 80057ba:	2900      	cmp	r1, #0
 80057bc:	f000 80ac 	beq.w	8005918 <_dtoa_r+0x790>
 80057c0:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80057c4:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80057c8:	461c      	mov	r4, r3
 80057ca:	930a      	str	r3, [sp, #40]	; 0x28
 80057cc:	9b04      	ldr	r3, [sp, #16]
 80057ce:	4413      	add	r3, r2
 80057d0:	9304      	str	r3, [sp, #16]
 80057d2:	9b05      	ldr	r3, [sp, #20]
 80057d4:	2101      	movs	r1, #1
 80057d6:	4413      	add	r3, r2
 80057d8:	4630      	mov	r0, r6
 80057da:	9305      	str	r3, [sp, #20]
 80057dc:	f000 fb54 	bl	8005e88 <__i2b>
 80057e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80057e2:	4607      	mov	r7, r0
 80057e4:	f1b8 0f00 	cmp.w	r8, #0
 80057e8:	dd0d      	ble.n	8005806 <_dtoa_r+0x67e>
 80057ea:	9a05      	ldr	r2, [sp, #20]
 80057ec:	2a00      	cmp	r2, #0
 80057ee:	dd0a      	ble.n	8005806 <_dtoa_r+0x67e>
 80057f0:	4542      	cmp	r2, r8
 80057f2:	9904      	ldr	r1, [sp, #16]
 80057f4:	bfa8      	it	ge
 80057f6:	4642      	movge	r2, r8
 80057f8:	1a89      	subs	r1, r1, r2
 80057fa:	9104      	str	r1, [sp, #16]
 80057fc:	9905      	ldr	r1, [sp, #20]
 80057fe:	eba8 0802 	sub.w	r8, r8, r2
 8005802:	1a8a      	subs	r2, r1, r2
 8005804:	9205      	str	r2, [sp, #20]
 8005806:	b303      	cbz	r3, 800584a <_dtoa_r+0x6c2>
 8005808:	9a07      	ldr	r2, [sp, #28]
 800580a:	2a00      	cmp	r2, #0
 800580c:	f000 80a5 	beq.w	800595a <_dtoa_r+0x7d2>
 8005810:	2c00      	cmp	r4, #0
 8005812:	dd13      	ble.n	800583c <_dtoa_r+0x6b4>
 8005814:	4639      	mov	r1, r7
 8005816:	4622      	mov	r2, r4
 8005818:	4630      	mov	r0, r6
 800581a:	930d      	str	r3, [sp, #52]	; 0x34
 800581c:	f000 fbf4 	bl	8006008 <__pow5mult>
 8005820:	462a      	mov	r2, r5
 8005822:	4601      	mov	r1, r0
 8005824:	4607      	mov	r7, r0
 8005826:	4630      	mov	r0, r6
 8005828:	f000 fb44 	bl	8005eb4 <__multiply>
 800582c:	4629      	mov	r1, r5
 800582e:	900a      	str	r0, [sp, #40]	; 0x28
 8005830:	4630      	mov	r0, r6
 8005832:	f000 fa71 	bl	8005d18 <_Bfree>
 8005836:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005838:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800583a:	4615      	mov	r5, r2
 800583c:	1b1a      	subs	r2, r3, r4
 800583e:	d004      	beq.n	800584a <_dtoa_r+0x6c2>
 8005840:	4629      	mov	r1, r5
 8005842:	4630      	mov	r0, r6
 8005844:	f000 fbe0 	bl	8006008 <__pow5mult>
 8005848:	4605      	mov	r5, r0
 800584a:	2101      	movs	r1, #1
 800584c:	4630      	mov	r0, r6
 800584e:	f000 fb1b 	bl	8005e88 <__i2b>
 8005852:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005854:	2b00      	cmp	r3, #0
 8005856:	4604      	mov	r4, r0
 8005858:	f340 8081 	ble.w	800595e <_dtoa_r+0x7d6>
 800585c:	461a      	mov	r2, r3
 800585e:	4601      	mov	r1, r0
 8005860:	4630      	mov	r0, r6
 8005862:	f000 fbd1 	bl	8006008 <__pow5mult>
 8005866:	9b06      	ldr	r3, [sp, #24]
 8005868:	2b01      	cmp	r3, #1
 800586a:	4604      	mov	r4, r0
 800586c:	dd7a      	ble.n	8005964 <_dtoa_r+0x7dc>
 800586e:	2300      	movs	r3, #0
 8005870:	930a      	str	r3, [sp, #40]	; 0x28
 8005872:	6922      	ldr	r2, [r4, #16]
 8005874:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8005878:	6910      	ldr	r0, [r2, #16]
 800587a:	f000 fab5 	bl	8005de8 <__hi0bits>
 800587e:	f1c0 0020 	rsb	r0, r0, #32
 8005882:	9b05      	ldr	r3, [sp, #20]
 8005884:	4418      	add	r0, r3
 8005886:	f010 001f 	ands.w	r0, r0, #31
 800588a:	f000 808c 	beq.w	80059a6 <_dtoa_r+0x81e>
 800588e:	f1c0 0220 	rsb	r2, r0, #32
 8005892:	2a04      	cmp	r2, #4
 8005894:	f340 8085 	ble.w	80059a2 <_dtoa_r+0x81a>
 8005898:	f1c0 001c 	rsb	r0, r0, #28
 800589c:	9b04      	ldr	r3, [sp, #16]
 800589e:	4403      	add	r3, r0
 80058a0:	9304      	str	r3, [sp, #16]
 80058a2:	9b05      	ldr	r3, [sp, #20]
 80058a4:	4403      	add	r3, r0
 80058a6:	4480      	add	r8, r0
 80058a8:	9305      	str	r3, [sp, #20]
 80058aa:	9b04      	ldr	r3, [sp, #16]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	dd05      	ble.n	80058bc <_dtoa_r+0x734>
 80058b0:	4629      	mov	r1, r5
 80058b2:	461a      	mov	r2, r3
 80058b4:	4630      	mov	r0, r6
 80058b6:	f000 fc01 	bl	80060bc <__lshift>
 80058ba:	4605      	mov	r5, r0
 80058bc:	9b05      	ldr	r3, [sp, #20]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	dd05      	ble.n	80058ce <_dtoa_r+0x746>
 80058c2:	4621      	mov	r1, r4
 80058c4:	461a      	mov	r2, r3
 80058c6:	4630      	mov	r0, r6
 80058c8:	f000 fbf8 	bl	80060bc <__lshift>
 80058cc:	4604      	mov	r4, r0
 80058ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d06a      	beq.n	80059aa <_dtoa_r+0x822>
 80058d4:	4621      	mov	r1, r4
 80058d6:	4628      	mov	r0, r5
 80058d8:	f000 fc60 	bl	800619c <__mcmp>
 80058dc:	2800      	cmp	r0, #0
 80058de:	da64      	bge.n	80059aa <_dtoa_r+0x822>
 80058e0:	2300      	movs	r3, #0
 80058e2:	4629      	mov	r1, r5
 80058e4:	220a      	movs	r2, #10
 80058e6:	4630      	mov	r0, r6
 80058e8:	f000 fa38 	bl	8005d5c <__multadd>
 80058ec:	9b07      	ldr	r3, [sp, #28]
 80058ee:	f10b 3bff 	add.w	fp, fp, #4294967295
 80058f2:	4605      	mov	r5, r0
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	f000 8191 	beq.w	8005c1c <_dtoa_r+0xa94>
 80058fa:	4639      	mov	r1, r7
 80058fc:	2300      	movs	r3, #0
 80058fe:	220a      	movs	r2, #10
 8005900:	4630      	mov	r0, r6
 8005902:	f000 fa2b 	bl	8005d5c <__multadd>
 8005906:	f1ba 0f00 	cmp.w	sl, #0
 800590a:	4607      	mov	r7, r0
 800590c:	f300 808d 	bgt.w	8005a2a <_dtoa_r+0x8a2>
 8005910:	9b06      	ldr	r3, [sp, #24]
 8005912:	2b02      	cmp	r3, #2
 8005914:	dc50      	bgt.n	80059b8 <_dtoa_r+0x830>
 8005916:	e088      	b.n	8005a2a <_dtoa_r+0x8a2>
 8005918:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800591a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800591e:	e751      	b.n	80057c4 <_dtoa_r+0x63c>
 8005920:	f109 34ff 	add.w	r4, r9, #4294967295
 8005924:	42a3      	cmp	r3, r4
 8005926:	bfbf      	itttt	lt
 8005928:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 800592a:	1ae3      	sublt	r3, r4, r3
 800592c:	18d2      	addlt	r2, r2, r3
 800592e:	9209      	strlt	r2, [sp, #36]	; 0x24
 8005930:	bfb6      	itet	lt
 8005932:	4623      	movlt	r3, r4
 8005934:	1b1c      	subge	r4, r3, r4
 8005936:	2400      	movlt	r4, #0
 8005938:	f1b9 0f00 	cmp.w	r9, #0
 800593c:	bfb5      	itete	lt
 800593e:	9a04      	ldrlt	r2, [sp, #16]
 8005940:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 8005944:	eba2 0809 	sublt.w	r8, r2, r9
 8005948:	464a      	movge	r2, r9
 800594a:	bfb8      	it	lt
 800594c:	2200      	movlt	r2, #0
 800594e:	e73c      	b.n	80057ca <_dtoa_r+0x642>
 8005950:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8005954:	9f07      	ldr	r7, [sp, #28]
 8005956:	461c      	mov	r4, r3
 8005958:	e744      	b.n	80057e4 <_dtoa_r+0x65c>
 800595a:	461a      	mov	r2, r3
 800595c:	e770      	b.n	8005840 <_dtoa_r+0x6b8>
 800595e:	9b06      	ldr	r3, [sp, #24]
 8005960:	2b01      	cmp	r3, #1
 8005962:	dc18      	bgt.n	8005996 <_dtoa_r+0x80e>
 8005964:	9b02      	ldr	r3, [sp, #8]
 8005966:	b9b3      	cbnz	r3, 8005996 <_dtoa_r+0x80e>
 8005968:	9b03      	ldr	r3, [sp, #12]
 800596a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800596e:	b9a2      	cbnz	r2, 800599a <_dtoa_r+0x812>
 8005970:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005974:	0d12      	lsrs	r2, r2, #20
 8005976:	0512      	lsls	r2, r2, #20
 8005978:	b18a      	cbz	r2, 800599e <_dtoa_r+0x816>
 800597a:	9b04      	ldr	r3, [sp, #16]
 800597c:	3301      	adds	r3, #1
 800597e:	9304      	str	r3, [sp, #16]
 8005980:	9b05      	ldr	r3, [sp, #20]
 8005982:	3301      	adds	r3, #1
 8005984:	9305      	str	r3, [sp, #20]
 8005986:	2301      	movs	r3, #1
 8005988:	930a      	str	r3, [sp, #40]	; 0x28
 800598a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800598c:	2b00      	cmp	r3, #0
 800598e:	f47f af70 	bne.w	8005872 <_dtoa_r+0x6ea>
 8005992:	2001      	movs	r0, #1
 8005994:	e775      	b.n	8005882 <_dtoa_r+0x6fa>
 8005996:	2300      	movs	r3, #0
 8005998:	e7f6      	b.n	8005988 <_dtoa_r+0x800>
 800599a:	9b02      	ldr	r3, [sp, #8]
 800599c:	e7f4      	b.n	8005988 <_dtoa_r+0x800>
 800599e:	920a      	str	r2, [sp, #40]	; 0x28
 80059a0:	e7f3      	b.n	800598a <_dtoa_r+0x802>
 80059a2:	d082      	beq.n	80058aa <_dtoa_r+0x722>
 80059a4:	4610      	mov	r0, r2
 80059a6:	301c      	adds	r0, #28
 80059a8:	e778      	b.n	800589c <_dtoa_r+0x714>
 80059aa:	f1b9 0f00 	cmp.w	r9, #0
 80059ae:	dc37      	bgt.n	8005a20 <_dtoa_r+0x898>
 80059b0:	9b06      	ldr	r3, [sp, #24]
 80059b2:	2b02      	cmp	r3, #2
 80059b4:	dd34      	ble.n	8005a20 <_dtoa_r+0x898>
 80059b6:	46ca      	mov	sl, r9
 80059b8:	f1ba 0f00 	cmp.w	sl, #0
 80059bc:	d10d      	bne.n	80059da <_dtoa_r+0x852>
 80059be:	4621      	mov	r1, r4
 80059c0:	4653      	mov	r3, sl
 80059c2:	2205      	movs	r2, #5
 80059c4:	4630      	mov	r0, r6
 80059c6:	f000 f9c9 	bl	8005d5c <__multadd>
 80059ca:	4601      	mov	r1, r0
 80059cc:	4604      	mov	r4, r0
 80059ce:	4628      	mov	r0, r5
 80059d0:	f000 fbe4 	bl	800619c <__mcmp>
 80059d4:	2800      	cmp	r0, #0
 80059d6:	f73f adeb 	bgt.w	80055b0 <_dtoa_r+0x428>
 80059da:	9b08      	ldr	r3, [sp, #32]
 80059dc:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80059e0:	ea6f 0b03 	mvn.w	fp, r3
 80059e4:	f04f 0900 	mov.w	r9, #0
 80059e8:	4621      	mov	r1, r4
 80059ea:	4630      	mov	r0, r6
 80059ec:	f000 f994 	bl	8005d18 <_Bfree>
 80059f0:	2f00      	cmp	r7, #0
 80059f2:	f43f aea8 	beq.w	8005746 <_dtoa_r+0x5be>
 80059f6:	f1b9 0f00 	cmp.w	r9, #0
 80059fa:	d005      	beq.n	8005a08 <_dtoa_r+0x880>
 80059fc:	45b9      	cmp	r9, r7
 80059fe:	d003      	beq.n	8005a08 <_dtoa_r+0x880>
 8005a00:	4649      	mov	r1, r9
 8005a02:	4630      	mov	r0, r6
 8005a04:	f000 f988 	bl	8005d18 <_Bfree>
 8005a08:	4639      	mov	r1, r7
 8005a0a:	4630      	mov	r0, r6
 8005a0c:	f000 f984 	bl	8005d18 <_Bfree>
 8005a10:	e699      	b.n	8005746 <_dtoa_r+0x5be>
 8005a12:	2400      	movs	r4, #0
 8005a14:	4627      	mov	r7, r4
 8005a16:	e7e0      	b.n	80059da <_dtoa_r+0x852>
 8005a18:	46bb      	mov	fp, r7
 8005a1a:	4604      	mov	r4, r0
 8005a1c:	4607      	mov	r7, r0
 8005a1e:	e5c7      	b.n	80055b0 <_dtoa_r+0x428>
 8005a20:	9b07      	ldr	r3, [sp, #28]
 8005a22:	46ca      	mov	sl, r9
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	f000 8100 	beq.w	8005c2a <_dtoa_r+0xaa2>
 8005a2a:	f1b8 0f00 	cmp.w	r8, #0
 8005a2e:	dd05      	ble.n	8005a3c <_dtoa_r+0x8b4>
 8005a30:	4639      	mov	r1, r7
 8005a32:	4642      	mov	r2, r8
 8005a34:	4630      	mov	r0, r6
 8005a36:	f000 fb41 	bl	80060bc <__lshift>
 8005a3a:	4607      	mov	r7, r0
 8005a3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d05d      	beq.n	8005afe <_dtoa_r+0x976>
 8005a42:	6879      	ldr	r1, [r7, #4]
 8005a44:	4630      	mov	r0, r6
 8005a46:	f000 f927 	bl	8005c98 <_Balloc>
 8005a4a:	4680      	mov	r8, r0
 8005a4c:	b928      	cbnz	r0, 8005a5a <_dtoa_r+0x8d2>
 8005a4e:	4b82      	ldr	r3, [pc, #520]	; (8005c58 <_dtoa_r+0xad0>)
 8005a50:	4602      	mov	r2, r0
 8005a52:	f240 21ea 	movw	r1, #746	; 0x2ea
 8005a56:	f7ff bbaf 	b.w	80051b8 <_dtoa_r+0x30>
 8005a5a:	693a      	ldr	r2, [r7, #16]
 8005a5c:	3202      	adds	r2, #2
 8005a5e:	0092      	lsls	r2, r2, #2
 8005a60:	f107 010c 	add.w	r1, r7, #12
 8005a64:	300c      	adds	r0, #12
 8005a66:	f000 f909 	bl	8005c7c <memcpy>
 8005a6a:	2201      	movs	r2, #1
 8005a6c:	4641      	mov	r1, r8
 8005a6e:	4630      	mov	r0, r6
 8005a70:	f000 fb24 	bl	80060bc <__lshift>
 8005a74:	9b01      	ldr	r3, [sp, #4]
 8005a76:	3301      	adds	r3, #1
 8005a78:	9304      	str	r3, [sp, #16]
 8005a7a:	9b01      	ldr	r3, [sp, #4]
 8005a7c:	4453      	add	r3, sl
 8005a7e:	9308      	str	r3, [sp, #32]
 8005a80:	9b02      	ldr	r3, [sp, #8]
 8005a82:	f003 0301 	and.w	r3, r3, #1
 8005a86:	46b9      	mov	r9, r7
 8005a88:	9307      	str	r3, [sp, #28]
 8005a8a:	4607      	mov	r7, r0
 8005a8c:	9b04      	ldr	r3, [sp, #16]
 8005a8e:	4621      	mov	r1, r4
 8005a90:	3b01      	subs	r3, #1
 8005a92:	4628      	mov	r0, r5
 8005a94:	9302      	str	r3, [sp, #8]
 8005a96:	f7ff fae9 	bl	800506c <quorem>
 8005a9a:	4603      	mov	r3, r0
 8005a9c:	3330      	adds	r3, #48	; 0x30
 8005a9e:	9005      	str	r0, [sp, #20]
 8005aa0:	4649      	mov	r1, r9
 8005aa2:	4628      	mov	r0, r5
 8005aa4:	9309      	str	r3, [sp, #36]	; 0x24
 8005aa6:	f000 fb79 	bl	800619c <__mcmp>
 8005aaa:	463a      	mov	r2, r7
 8005aac:	4682      	mov	sl, r0
 8005aae:	4621      	mov	r1, r4
 8005ab0:	4630      	mov	r0, r6
 8005ab2:	f000 fb8f 	bl	80061d4 <__mdiff>
 8005ab6:	68c2      	ldr	r2, [r0, #12]
 8005ab8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005aba:	4680      	mov	r8, r0
 8005abc:	bb0a      	cbnz	r2, 8005b02 <_dtoa_r+0x97a>
 8005abe:	4601      	mov	r1, r0
 8005ac0:	4628      	mov	r0, r5
 8005ac2:	f000 fb6b 	bl	800619c <__mcmp>
 8005ac6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ac8:	4602      	mov	r2, r0
 8005aca:	4641      	mov	r1, r8
 8005acc:	4630      	mov	r0, r6
 8005ace:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 8005ad2:	f000 f921 	bl	8005d18 <_Bfree>
 8005ad6:	9b06      	ldr	r3, [sp, #24]
 8005ad8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005ada:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8005ade:	ea43 0102 	orr.w	r1, r3, r2
 8005ae2:	9b07      	ldr	r3, [sp, #28]
 8005ae4:	430b      	orrs	r3, r1
 8005ae6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ae8:	d10d      	bne.n	8005b06 <_dtoa_r+0x97e>
 8005aea:	2b39      	cmp	r3, #57	; 0x39
 8005aec:	d029      	beq.n	8005b42 <_dtoa_r+0x9ba>
 8005aee:	f1ba 0f00 	cmp.w	sl, #0
 8005af2:	dd01      	ble.n	8005af8 <_dtoa_r+0x970>
 8005af4:	9b05      	ldr	r3, [sp, #20]
 8005af6:	3331      	adds	r3, #49	; 0x31
 8005af8:	9a02      	ldr	r2, [sp, #8]
 8005afa:	7013      	strb	r3, [r2, #0]
 8005afc:	e774      	b.n	80059e8 <_dtoa_r+0x860>
 8005afe:	4638      	mov	r0, r7
 8005b00:	e7b8      	b.n	8005a74 <_dtoa_r+0x8ec>
 8005b02:	2201      	movs	r2, #1
 8005b04:	e7e1      	b.n	8005aca <_dtoa_r+0x942>
 8005b06:	f1ba 0f00 	cmp.w	sl, #0
 8005b0a:	db06      	blt.n	8005b1a <_dtoa_r+0x992>
 8005b0c:	9906      	ldr	r1, [sp, #24]
 8005b0e:	ea41 0a0a 	orr.w	sl, r1, sl
 8005b12:	9907      	ldr	r1, [sp, #28]
 8005b14:	ea5a 0101 	orrs.w	r1, sl, r1
 8005b18:	d120      	bne.n	8005b5c <_dtoa_r+0x9d4>
 8005b1a:	2a00      	cmp	r2, #0
 8005b1c:	ddec      	ble.n	8005af8 <_dtoa_r+0x970>
 8005b1e:	4629      	mov	r1, r5
 8005b20:	2201      	movs	r2, #1
 8005b22:	4630      	mov	r0, r6
 8005b24:	9304      	str	r3, [sp, #16]
 8005b26:	f000 fac9 	bl	80060bc <__lshift>
 8005b2a:	4621      	mov	r1, r4
 8005b2c:	4605      	mov	r5, r0
 8005b2e:	f000 fb35 	bl	800619c <__mcmp>
 8005b32:	2800      	cmp	r0, #0
 8005b34:	9b04      	ldr	r3, [sp, #16]
 8005b36:	dc02      	bgt.n	8005b3e <_dtoa_r+0x9b6>
 8005b38:	d1de      	bne.n	8005af8 <_dtoa_r+0x970>
 8005b3a:	07da      	lsls	r2, r3, #31
 8005b3c:	d5dc      	bpl.n	8005af8 <_dtoa_r+0x970>
 8005b3e:	2b39      	cmp	r3, #57	; 0x39
 8005b40:	d1d8      	bne.n	8005af4 <_dtoa_r+0x96c>
 8005b42:	9a02      	ldr	r2, [sp, #8]
 8005b44:	2339      	movs	r3, #57	; 0x39
 8005b46:	7013      	strb	r3, [r2, #0]
 8005b48:	4643      	mov	r3, r8
 8005b4a:	4698      	mov	r8, r3
 8005b4c:	3b01      	subs	r3, #1
 8005b4e:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8005b52:	2a39      	cmp	r2, #57	; 0x39
 8005b54:	d051      	beq.n	8005bfa <_dtoa_r+0xa72>
 8005b56:	3201      	adds	r2, #1
 8005b58:	701a      	strb	r2, [r3, #0]
 8005b5a:	e745      	b.n	80059e8 <_dtoa_r+0x860>
 8005b5c:	2a00      	cmp	r2, #0
 8005b5e:	dd03      	ble.n	8005b68 <_dtoa_r+0x9e0>
 8005b60:	2b39      	cmp	r3, #57	; 0x39
 8005b62:	d0ee      	beq.n	8005b42 <_dtoa_r+0x9ba>
 8005b64:	3301      	adds	r3, #1
 8005b66:	e7c7      	b.n	8005af8 <_dtoa_r+0x970>
 8005b68:	9a04      	ldr	r2, [sp, #16]
 8005b6a:	9908      	ldr	r1, [sp, #32]
 8005b6c:	f802 3c01 	strb.w	r3, [r2, #-1]
 8005b70:	428a      	cmp	r2, r1
 8005b72:	d02b      	beq.n	8005bcc <_dtoa_r+0xa44>
 8005b74:	4629      	mov	r1, r5
 8005b76:	2300      	movs	r3, #0
 8005b78:	220a      	movs	r2, #10
 8005b7a:	4630      	mov	r0, r6
 8005b7c:	f000 f8ee 	bl	8005d5c <__multadd>
 8005b80:	45b9      	cmp	r9, r7
 8005b82:	4605      	mov	r5, r0
 8005b84:	f04f 0300 	mov.w	r3, #0
 8005b88:	f04f 020a 	mov.w	r2, #10
 8005b8c:	4649      	mov	r1, r9
 8005b8e:	4630      	mov	r0, r6
 8005b90:	d107      	bne.n	8005ba2 <_dtoa_r+0xa1a>
 8005b92:	f000 f8e3 	bl	8005d5c <__multadd>
 8005b96:	4681      	mov	r9, r0
 8005b98:	4607      	mov	r7, r0
 8005b9a:	9b04      	ldr	r3, [sp, #16]
 8005b9c:	3301      	adds	r3, #1
 8005b9e:	9304      	str	r3, [sp, #16]
 8005ba0:	e774      	b.n	8005a8c <_dtoa_r+0x904>
 8005ba2:	f000 f8db 	bl	8005d5c <__multadd>
 8005ba6:	4639      	mov	r1, r7
 8005ba8:	4681      	mov	r9, r0
 8005baa:	2300      	movs	r3, #0
 8005bac:	220a      	movs	r2, #10
 8005bae:	4630      	mov	r0, r6
 8005bb0:	f000 f8d4 	bl	8005d5c <__multadd>
 8005bb4:	4607      	mov	r7, r0
 8005bb6:	e7f0      	b.n	8005b9a <_dtoa_r+0xa12>
 8005bb8:	f1ba 0f00 	cmp.w	sl, #0
 8005bbc:	9a01      	ldr	r2, [sp, #4]
 8005bbe:	bfcc      	ite	gt
 8005bc0:	46d0      	movgt	r8, sl
 8005bc2:	f04f 0801 	movle.w	r8, #1
 8005bc6:	4490      	add	r8, r2
 8005bc8:	f04f 0900 	mov.w	r9, #0
 8005bcc:	4629      	mov	r1, r5
 8005bce:	2201      	movs	r2, #1
 8005bd0:	4630      	mov	r0, r6
 8005bd2:	9302      	str	r3, [sp, #8]
 8005bd4:	f000 fa72 	bl	80060bc <__lshift>
 8005bd8:	4621      	mov	r1, r4
 8005bda:	4605      	mov	r5, r0
 8005bdc:	f000 fade 	bl	800619c <__mcmp>
 8005be0:	2800      	cmp	r0, #0
 8005be2:	dcb1      	bgt.n	8005b48 <_dtoa_r+0x9c0>
 8005be4:	d102      	bne.n	8005bec <_dtoa_r+0xa64>
 8005be6:	9b02      	ldr	r3, [sp, #8]
 8005be8:	07db      	lsls	r3, r3, #31
 8005bea:	d4ad      	bmi.n	8005b48 <_dtoa_r+0x9c0>
 8005bec:	4643      	mov	r3, r8
 8005bee:	4698      	mov	r8, r3
 8005bf0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005bf4:	2a30      	cmp	r2, #48	; 0x30
 8005bf6:	d0fa      	beq.n	8005bee <_dtoa_r+0xa66>
 8005bf8:	e6f6      	b.n	80059e8 <_dtoa_r+0x860>
 8005bfa:	9a01      	ldr	r2, [sp, #4]
 8005bfc:	429a      	cmp	r2, r3
 8005bfe:	d1a4      	bne.n	8005b4a <_dtoa_r+0x9c2>
 8005c00:	f10b 0b01 	add.w	fp, fp, #1
 8005c04:	2331      	movs	r3, #49	; 0x31
 8005c06:	e778      	b.n	8005afa <_dtoa_r+0x972>
 8005c08:	4b14      	ldr	r3, [pc, #80]	; (8005c5c <_dtoa_r+0xad4>)
 8005c0a:	f7ff bb27 	b.w	800525c <_dtoa_r+0xd4>
 8005c0e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	f47f ab03 	bne.w	800521c <_dtoa_r+0x94>
 8005c16:	4b12      	ldr	r3, [pc, #72]	; (8005c60 <_dtoa_r+0xad8>)
 8005c18:	f7ff bb20 	b.w	800525c <_dtoa_r+0xd4>
 8005c1c:	f1ba 0f00 	cmp.w	sl, #0
 8005c20:	dc03      	bgt.n	8005c2a <_dtoa_r+0xaa2>
 8005c22:	9b06      	ldr	r3, [sp, #24]
 8005c24:	2b02      	cmp	r3, #2
 8005c26:	f73f aec7 	bgt.w	80059b8 <_dtoa_r+0x830>
 8005c2a:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8005c2e:	4621      	mov	r1, r4
 8005c30:	4628      	mov	r0, r5
 8005c32:	f7ff fa1b 	bl	800506c <quorem>
 8005c36:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8005c3a:	f808 3b01 	strb.w	r3, [r8], #1
 8005c3e:	9a01      	ldr	r2, [sp, #4]
 8005c40:	eba8 0202 	sub.w	r2, r8, r2
 8005c44:	4592      	cmp	sl, r2
 8005c46:	ddb7      	ble.n	8005bb8 <_dtoa_r+0xa30>
 8005c48:	4629      	mov	r1, r5
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	220a      	movs	r2, #10
 8005c4e:	4630      	mov	r0, r6
 8005c50:	f000 f884 	bl	8005d5c <__multadd>
 8005c54:	4605      	mov	r5, r0
 8005c56:	e7ea      	b.n	8005c2e <_dtoa_r+0xaa6>
 8005c58:	0800750f 	.word	0x0800750f
 8005c5c:	0800746c 	.word	0x0800746c
 8005c60:	08007490 	.word	0x08007490

08005c64 <_localeconv_r>:
 8005c64:	4800      	ldr	r0, [pc, #0]	; (8005c68 <_localeconv_r+0x4>)
 8005c66:	4770      	bx	lr
 8005c68:	20000160 	.word	0x20000160

08005c6c <malloc>:
 8005c6c:	4b02      	ldr	r3, [pc, #8]	; (8005c78 <malloc+0xc>)
 8005c6e:	4601      	mov	r1, r0
 8005c70:	6818      	ldr	r0, [r3, #0]
 8005c72:	f000 bc17 	b.w	80064a4 <_malloc_r>
 8005c76:	bf00      	nop
 8005c78:	2000000c 	.word	0x2000000c

08005c7c <memcpy>:
 8005c7c:	440a      	add	r2, r1
 8005c7e:	4291      	cmp	r1, r2
 8005c80:	f100 33ff 	add.w	r3, r0, #4294967295
 8005c84:	d100      	bne.n	8005c88 <memcpy+0xc>
 8005c86:	4770      	bx	lr
 8005c88:	b510      	push	{r4, lr}
 8005c8a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005c8e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005c92:	4291      	cmp	r1, r2
 8005c94:	d1f9      	bne.n	8005c8a <memcpy+0xe>
 8005c96:	bd10      	pop	{r4, pc}

08005c98 <_Balloc>:
 8005c98:	b570      	push	{r4, r5, r6, lr}
 8005c9a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005c9c:	4604      	mov	r4, r0
 8005c9e:	460d      	mov	r5, r1
 8005ca0:	b976      	cbnz	r6, 8005cc0 <_Balloc+0x28>
 8005ca2:	2010      	movs	r0, #16
 8005ca4:	f7ff ffe2 	bl	8005c6c <malloc>
 8005ca8:	4602      	mov	r2, r0
 8005caa:	6260      	str	r0, [r4, #36]	; 0x24
 8005cac:	b920      	cbnz	r0, 8005cb8 <_Balloc+0x20>
 8005cae:	4b18      	ldr	r3, [pc, #96]	; (8005d10 <_Balloc+0x78>)
 8005cb0:	4818      	ldr	r0, [pc, #96]	; (8005d14 <_Balloc+0x7c>)
 8005cb2:	2166      	movs	r1, #102	; 0x66
 8005cb4:	f000 fdd6 	bl	8006864 <__assert_func>
 8005cb8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005cbc:	6006      	str	r6, [r0, #0]
 8005cbe:	60c6      	str	r6, [r0, #12]
 8005cc0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005cc2:	68f3      	ldr	r3, [r6, #12]
 8005cc4:	b183      	cbz	r3, 8005ce8 <_Balloc+0x50>
 8005cc6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005cc8:	68db      	ldr	r3, [r3, #12]
 8005cca:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005cce:	b9b8      	cbnz	r0, 8005d00 <_Balloc+0x68>
 8005cd0:	2101      	movs	r1, #1
 8005cd2:	fa01 f605 	lsl.w	r6, r1, r5
 8005cd6:	1d72      	adds	r2, r6, #5
 8005cd8:	0092      	lsls	r2, r2, #2
 8005cda:	4620      	mov	r0, r4
 8005cdc:	f000 fb60 	bl	80063a0 <_calloc_r>
 8005ce0:	b160      	cbz	r0, 8005cfc <_Balloc+0x64>
 8005ce2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005ce6:	e00e      	b.n	8005d06 <_Balloc+0x6e>
 8005ce8:	2221      	movs	r2, #33	; 0x21
 8005cea:	2104      	movs	r1, #4
 8005cec:	4620      	mov	r0, r4
 8005cee:	f000 fb57 	bl	80063a0 <_calloc_r>
 8005cf2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005cf4:	60f0      	str	r0, [r6, #12]
 8005cf6:	68db      	ldr	r3, [r3, #12]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d1e4      	bne.n	8005cc6 <_Balloc+0x2e>
 8005cfc:	2000      	movs	r0, #0
 8005cfe:	bd70      	pop	{r4, r5, r6, pc}
 8005d00:	6802      	ldr	r2, [r0, #0]
 8005d02:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005d06:	2300      	movs	r3, #0
 8005d08:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005d0c:	e7f7      	b.n	8005cfe <_Balloc+0x66>
 8005d0e:	bf00      	nop
 8005d10:	0800749d 	.word	0x0800749d
 8005d14:	08007520 	.word	0x08007520

08005d18 <_Bfree>:
 8005d18:	b570      	push	{r4, r5, r6, lr}
 8005d1a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005d1c:	4605      	mov	r5, r0
 8005d1e:	460c      	mov	r4, r1
 8005d20:	b976      	cbnz	r6, 8005d40 <_Bfree+0x28>
 8005d22:	2010      	movs	r0, #16
 8005d24:	f7ff ffa2 	bl	8005c6c <malloc>
 8005d28:	4602      	mov	r2, r0
 8005d2a:	6268      	str	r0, [r5, #36]	; 0x24
 8005d2c:	b920      	cbnz	r0, 8005d38 <_Bfree+0x20>
 8005d2e:	4b09      	ldr	r3, [pc, #36]	; (8005d54 <_Bfree+0x3c>)
 8005d30:	4809      	ldr	r0, [pc, #36]	; (8005d58 <_Bfree+0x40>)
 8005d32:	218a      	movs	r1, #138	; 0x8a
 8005d34:	f000 fd96 	bl	8006864 <__assert_func>
 8005d38:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005d3c:	6006      	str	r6, [r0, #0]
 8005d3e:	60c6      	str	r6, [r0, #12]
 8005d40:	b13c      	cbz	r4, 8005d52 <_Bfree+0x3a>
 8005d42:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005d44:	6862      	ldr	r2, [r4, #4]
 8005d46:	68db      	ldr	r3, [r3, #12]
 8005d48:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005d4c:	6021      	str	r1, [r4, #0]
 8005d4e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005d52:	bd70      	pop	{r4, r5, r6, pc}
 8005d54:	0800749d 	.word	0x0800749d
 8005d58:	08007520 	.word	0x08007520

08005d5c <__multadd>:
 8005d5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d60:	690d      	ldr	r5, [r1, #16]
 8005d62:	4607      	mov	r7, r0
 8005d64:	460c      	mov	r4, r1
 8005d66:	461e      	mov	r6, r3
 8005d68:	f101 0c14 	add.w	ip, r1, #20
 8005d6c:	2000      	movs	r0, #0
 8005d6e:	f8dc 3000 	ldr.w	r3, [ip]
 8005d72:	b299      	uxth	r1, r3
 8005d74:	fb02 6101 	mla	r1, r2, r1, r6
 8005d78:	0c1e      	lsrs	r6, r3, #16
 8005d7a:	0c0b      	lsrs	r3, r1, #16
 8005d7c:	fb02 3306 	mla	r3, r2, r6, r3
 8005d80:	b289      	uxth	r1, r1
 8005d82:	3001      	adds	r0, #1
 8005d84:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005d88:	4285      	cmp	r5, r0
 8005d8a:	f84c 1b04 	str.w	r1, [ip], #4
 8005d8e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005d92:	dcec      	bgt.n	8005d6e <__multadd+0x12>
 8005d94:	b30e      	cbz	r6, 8005dda <__multadd+0x7e>
 8005d96:	68a3      	ldr	r3, [r4, #8]
 8005d98:	42ab      	cmp	r3, r5
 8005d9a:	dc19      	bgt.n	8005dd0 <__multadd+0x74>
 8005d9c:	6861      	ldr	r1, [r4, #4]
 8005d9e:	4638      	mov	r0, r7
 8005da0:	3101      	adds	r1, #1
 8005da2:	f7ff ff79 	bl	8005c98 <_Balloc>
 8005da6:	4680      	mov	r8, r0
 8005da8:	b928      	cbnz	r0, 8005db6 <__multadd+0x5a>
 8005daa:	4602      	mov	r2, r0
 8005dac:	4b0c      	ldr	r3, [pc, #48]	; (8005de0 <__multadd+0x84>)
 8005dae:	480d      	ldr	r0, [pc, #52]	; (8005de4 <__multadd+0x88>)
 8005db0:	21b5      	movs	r1, #181	; 0xb5
 8005db2:	f000 fd57 	bl	8006864 <__assert_func>
 8005db6:	6922      	ldr	r2, [r4, #16]
 8005db8:	3202      	adds	r2, #2
 8005dba:	f104 010c 	add.w	r1, r4, #12
 8005dbe:	0092      	lsls	r2, r2, #2
 8005dc0:	300c      	adds	r0, #12
 8005dc2:	f7ff ff5b 	bl	8005c7c <memcpy>
 8005dc6:	4621      	mov	r1, r4
 8005dc8:	4638      	mov	r0, r7
 8005dca:	f7ff ffa5 	bl	8005d18 <_Bfree>
 8005dce:	4644      	mov	r4, r8
 8005dd0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005dd4:	3501      	adds	r5, #1
 8005dd6:	615e      	str	r6, [r3, #20]
 8005dd8:	6125      	str	r5, [r4, #16]
 8005dda:	4620      	mov	r0, r4
 8005ddc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005de0:	0800750f 	.word	0x0800750f
 8005de4:	08007520 	.word	0x08007520

08005de8 <__hi0bits>:
 8005de8:	0c03      	lsrs	r3, r0, #16
 8005dea:	041b      	lsls	r3, r3, #16
 8005dec:	b9d3      	cbnz	r3, 8005e24 <__hi0bits+0x3c>
 8005dee:	0400      	lsls	r0, r0, #16
 8005df0:	2310      	movs	r3, #16
 8005df2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8005df6:	bf04      	itt	eq
 8005df8:	0200      	lsleq	r0, r0, #8
 8005dfa:	3308      	addeq	r3, #8
 8005dfc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8005e00:	bf04      	itt	eq
 8005e02:	0100      	lsleq	r0, r0, #4
 8005e04:	3304      	addeq	r3, #4
 8005e06:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8005e0a:	bf04      	itt	eq
 8005e0c:	0080      	lsleq	r0, r0, #2
 8005e0e:	3302      	addeq	r3, #2
 8005e10:	2800      	cmp	r0, #0
 8005e12:	db05      	blt.n	8005e20 <__hi0bits+0x38>
 8005e14:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8005e18:	f103 0301 	add.w	r3, r3, #1
 8005e1c:	bf08      	it	eq
 8005e1e:	2320      	moveq	r3, #32
 8005e20:	4618      	mov	r0, r3
 8005e22:	4770      	bx	lr
 8005e24:	2300      	movs	r3, #0
 8005e26:	e7e4      	b.n	8005df2 <__hi0bits+0xa>

08005e28 <__lo0bits>:
 8005e28:	6803      	ldr	r3, [r0, #0]
 8005e2a:	f013 0207 	ands.w	r2, r3, #7
 8005e2e:	4601      	mov	r1, r0
 8005e30:	d00b      	beq.n	8005e4a <__lo0bits+0x22>
 8005e32:	07da      	lsls	r2, r3, #31
 8005e34:	d423      	bmi.n	8005e7e <__lo0bits+0x56>
 8005e36:	0798      	lsls	r0, r3, #30
 8005e38:	bf49      	itett	mi
 8005e3a:	085b      	lsrmi	r3, r3, #1
 8005e3c:	089b      	lsrpl	r3, r3, #2
 8005e3e:	2001      	movmi	r0, #1
 8005e40:	600b      	strmi	r3, [r1, #0]
 8005e42:	bf5c      	itt	pl
 8005e44:	600b      	strpl	r3, [r1, #0]
 8005e46:	2002      	movpl	r0, #2
 8005e48:	4770      	bx	lr
 8005e4a:	b298      	uxth	r0, r3
 8005e4c:	b9a8      	cbnz	r0, 8005e7a <__lo0bits+0x52>
 8005e4e:	0c1b      	lsrs	r3, r3, #16
 8005e50:	2010      	movs	r0, #16
 8005e52:	b2da      	uxtb	r2, r3
 8005e54:	b90a      	cbnz	r2, 8005e5a <__lo0bits+0x32>
 8005e56:	3008      	adds	r0, #8
 8005e58:	0a1b      	lsrs	r3, r3, #8
 8005e5a:	071a      	lsls	r2, r3, #28
 8005e5c:	bf04      	itt	eq
 8005e5e:	091b      	lsreq	r3, r3, #4
 8005e60:	3004      	addeq	r0, #4
 8005e62:	079a      	lsls	r2, r3, #30
 8005e64:	bf04      	itt	eq
 8005e66:	089b      	lsreq	r3, r3, #2
 8005e68:	3002      	addeq	r0, #2
 8005e6a:	07da      	lsls	r2, r3, #31
 8005e6c:	d403      	bmi.n	8005e76 <__lo0bits+0x4e>
 8005e6e:	085b      	lsrs	r3, r3, #1
 8005e70:	f100 0001 	add.w	r0, r0, #1
 8005e74:	d005      	beq.n	8005e82 <__lo0bits+0x5a>
 8005e76:	600b      	str	r3, [r1, #0]
 8005e78:	4770      	bx	lr
 8005e7a:	4610      	mov	r0, r2
 8005e7c:	e7e9      	b.n	8005e52 <__lo0bits+0x2a>
 8005e7e:	2000      	movs	r0, #0
 8005e80:	4770      	bx	lr
 8005e82:	2020      	movs	r0, #32
 8005e84:	4770      	bx	lr
	...

08005e88 <__i2b>:
 8005e88:	b510      	push	{r4, lr}
 8005e8a:	460c      	mov	r4, r1
 8005e8c:	2101      	movs	r1, #1
 8005e8e:	f7ff ff03 	bl	8005c98 <_Balloc>
 8005e92:	4602      	mov	r2, r0
 8005e94:	b928      	cbnz	r0, 8005ea2 <__i2b+0x1a>
 8005e96:	4b05      	ldr	r3, [pc, #20]	; (8005eac <__i2b+0x24>)
 8005e98:	4805      	ldr	r0, [pc, #20]	; (8005eb0 <__i2b+0x28>)
 8005e9a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8005e9e:	f000 fce1 	bl	8006864 <__assert_func>
 8005ea2:	2301      	movs	r3, #1
 8005ea4:	6144      	str	r4, [r0, #20]
 8005ea6:	6103      	str	r3, [r0, #16]
 8005ea8:	bd10      	pop	{r4, pc}
 8005eaa:	bf00      	nop
 8005eac:	0800750f 	.word	0x0800750f
 8005eb0:	08007520 	.word	0x08007520

08005eb4 <__multiply>:
 8005eb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005eb8:	4691      	mov	r9, r2
 8005eba:	690a      	ldr	r2, [r1, #16]
 8005ebc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005ec0:	429a      	cmp	r2, r3
 8005ec2:	bfb8      	it	lt
 8005ec4:	460b      	movlt	r3, r1
 8005ec6:	460c      	mov	r4, r1
 8005ec8:	bfbc      	itt	lt
 8005eca:	464c      	movlt	r4, r9
 8005ecc:	4699      	movlt	r9, r3
 8005ece:	6927      	ldr	r7, [r4, #16]
 8005ed0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8005ed4:	68a3      	ldr	r3, [r4, #8]
 8005ed6:	6861      	ldr	r1, [r4, #4]
 8005ed8:	eb07 060a 	add.w	r6, r7, sl
 8005edc:	42b3      	cmp	r3, r6
 8005ede:	b085      	sub	sp, #20
 8005ee0:	bfb8      	it	lt
 8005ee2:	3101      	addlt	r1, #1
 8005ee4:	f7ff fed8 	bl	8005c98 <_Balloc>
 8005ee8:	b930      	cbnz	r0, 8005ef8 <__multiply+0x44>
 8005eea:	4602      	mov	r2, r0
 8005eec:	4b44      	ldr	r3, [pc, #272]	; (8006000 <__multiply+0x14c>)
 8005eee:	4845      	ldr	r0, [pc, #276]	; (8006004 <__multiply+0x150>)
 8005ef0:	f240 115d 	movw	r1, #349	; 0x15d
 8005ef4:	f000 fcb6 	bl	8006864 <__assert_func>
 8005ef8:	f100 0514 	add.w	r5, r0, #20
 8005efc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005f00:	462b      	mov	r3, r5
 8005f02:	2200      	movs	r2, #0
 8005f04:	4543      	cmp	r3, r8
 8005f06:	d321      	bcc.n	8005f4c <__multiply+0x98>
 8005f08:	f104 0314 	add.w	r3, r4, #20
 8005f0c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8005f10:	f109 0314 	add.w	r3, r9, #20
 8005f14:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8005f18:	9202      	str	r2, [sp, #8]
 8005f1a:	1b3a      	subs	r2, r7, r4
 8005f1c:	3a15      	subs	r2, #21
 8005f1e:	f022 0203 	bic.w	r2, r2, #3
 8005f22:	3204      	adds	r2, #4
 8005f24:	f104 0115 	add.w	r1, r4, #21
 8005f28:	428f      	cmp	r7, r1
 8005f2a:	bf38      	it	cc
 8005f2c:	2204      	movcc	r2, #4
 8005f2e:	9201      	str	r2, [sp, #4]
 8005f30:	9a02      	ldr	r2, [sp, #8]
 8005f32:	9303      	str	r3, [sp, #12]
 8005f34:	429a      	cmp	r2, r3
 8005f36:	d80c      	bhi.n	8005f52 <__multiply+0x9e>
 8005f38:	2e00      	cmp	r6, #0
 8005f3a:	dd03      	ble.n	8005f44 <__multiply+0x90>
 8005f3c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d05a      	beq.n	8005ffa <__multiply+0x146>
 8005f44:	6106      	str	r6, [r0, #16]
 8005f46:	b005      	add	sp, #20
 8005f48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f4c:	f843 2b04 	str.w	r2, [r3], #4
 8005f50:	e7d8      	b.n	8005f04 <__multiply+0x50>
 8005f52:	f8b3 a000 	ldrh.w	sl, [r3]
 8005f56:	f1ba 0f00 	cmp.w	sl, #0
 8005f5a:	d024      	beq.n	8005fa6 <__multiply+0xf2>
 8005f5c:	f104 0e14 	add.w	lr, r4, #20
 8005f60:	46a9      	mov	r9, r5
 8005f62:	f04f 0c00 	mov.w	ip, #0
 8005f66:	f85e 2b04 	ldr.w	r2, [lr], #4
 8005f6a:	f8d9 1000 	ldr.w	r1, [r9]
 8005f6e:	fa1f fb82 	uxth.w	fp, r2
 8005f72:	b289      	uxth	r1, r1
 8005f74:	fb0a 110b 	mla	r1, sl, fp, r1
 8005f78:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8005f7c:	f8d9 2000 	ldr.w	r2, [r9]
 8005f80:	4461      	add	r1, ip
 8005f82:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005f86:	fb0a c20b 	mla	r2, sl, fp, ip
 8005f8a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8005f8e:	b289      	uxth	r1, r1
 8005f90:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005f94:	4577      	cmp	r7, lr
 8005f96:	f849 1b04 	str.w	r1, [r9], #4
 8005f9a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005f9e:	d8e2      	bhi.n	8005f66 <__multiply+0xb2>
 8005fa0:	9a01      	ldr	r2, [sp, #4]
 8005fa2:	f845 c002 	str.w	ip, [r5, r2]
 8005fa6:	9a03      	ldr	r2, [sp, #12]
 8005fa8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005fac:	3304      	adds	r3, #4
 8005fae:	f1b9 0f00 	cmp.w	r9, #0
 8005fb2:	d020      	beq.n	8005ff6 <__multiply+0x142>
 8005fb4:	6829      	ldr	r1, [r5, #0]
 8005fb6:	f104 0c14 	add.w	ip, r4, #20
 8005fba:	46ae      	mov	lr, r5
 8005fbc:	f04f 0a00 	mov.w	sl, #0
 8005fc0:	f8bc b000 	ldrh.w	fp, [ip]
 8005fc4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8005fc8:	fb09 220b 	mla	r2, r9, fp, r2
 8005fcc:	4492      	add	sl, r2
 8005fce:	b289      	uxth	r1, r1
 8005fd0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8005fd4:	f84e 1b04 	str.w	r1, [lr], #4
 8005fd8:	f85c 2b04 	ldr.w	r2, [ip], #4
 8005fdc:	f8be 1000 	ldrh.w	r1, [lr]
 8005fe0:	0c12      	lsrs	r2, r2, #16
 8005fe2:	fb09 1102 	mla	r1, r9, r2, r1
 8005fe6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8005fea:	4567      	cmp	r7, ip
 8005fec:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005ff0:	d8e6      	bhi.n	8005fc0 <__multiply+0x10c>
 8005ff2:	9a01      	ldr	r2, [sp, #4]
 8005ff4:	50a9      	str	r1, [r5, r2]
 8005ff6:	3504      	adds	r5, #4
 8005ff8:	e79a      	b.n	8005f30 <__multiply+0x7c>
 8005ffa:	3e01      	subs	r6, #1
 8005ffc:	e79c      	b.n	8005f38 <__multiply+0x84>
 8005ffe:	bf00      	nop
 8006000:	0800750f 	.word	0x0800750f
 8006004:	08007520 	.word	0x08007520

08006008 <__pow5mult>:
 8006008:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800600c:	4615      	mov	r5, r2
 800600e:	f012 0203 	ands.w	r2, r2, #3
 8006012:	4606      	mov	r6, r0
 8006014:	460f      	mov	r7, r1
 8006016:	d007      	beq.n	8006028 <__pow5mult+0x20>
 8006018:	4c25      	ldr	r4, [pc, #148]	; (80060b0 <__pow5mult+0xa8>)
 800601a:	3a01      	subs	r2, #1
 800601c:	2300      	movs	r3, #0
 800601e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006022:	f7ff fe9b 	bl	8005d5c <__multadd>
 8006026:	4607      	mov	r7, r0
 8006028:	10ad      	asrs	r5, r5, #2
 800602a:	d03d      	beq.n	80060a8 <__pow5mult+0xa0>
 800602c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800602e:	b97c      	cbnz	r4, 8006050 <__pow5mult+0x48>
 8006030:	2010      	movs	r0, #16
 8006032:	f7ff fe1b 	bl	8005c6c <malloc>
 8006036:	4602      	mov	r2, r0
 8006038:	6270      	str	r0, [r6, #36]	; 0x24
 800603a:	b928      	cbnz	r0, 8006048 <__pow5mult+0x40>
 800603c:	4b1d      	ldr	r3, [pc, #116]	; (80060b4 <__pow5mult+0xac>)
 800603e:	481e      	ldr	r0, [pc, #120]	; (80060b8 <__pow5mult+0xb0>)
 8006040:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006044:	f000 fc0e 	bl	8006864 <__assert_func>
 8006048:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800604c:	6004      	str	r4, [r0, #0]
 800604e:	60c4      	str	r4, [r0, #12]
 8006050:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006054:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006058:	b94c      	cbnz	r4, 800606e <__pow5mult+0x66>
 800605a:	f240 2171 	movw	r1, #625	; 0x271
 800605e:	4630      	mov	r0, r6
 8006060:	f7ff ff12 	bl	8005e88 <__i2b>
 8006064:	2300      	movs	r3, #0
 8006066:	f8c8 0008 	str.w	r0, [r8, #8]
 800606a:	4604      	mov	r4, r0
 800606c:	6003      	str	r3, [r0, #0]
 800606e:	f04f 0900 	mov.w	r9, #0
 8006072:	07eb      	lsls	r3, r5, #31
 8006074:	d50a      	bpl.n	800608c <__pow5mult+0x84>
 8006076:	4639      	mov	r1, r7
 8006078:	4622      	mov	r2, r4
 800607a:	4630      	mov	r0, r6
 800607c:	f7ff ff1a 	bl	8005eb4 <__multiply>
 8006080:	4639      	mov	r1, r7
 8006082:	4680      	mov	r8, r0
 8006084:	4630      	mov	r0, r6
 8006086:	f7ff fe47 	bl	8005d18 <_Bfree>
 800608a:	4647      	mov	r7, r8
 800608c:	106d      	asrs	r5, r5, #1
 800608e:	d00b      	beq.n	80060a8 <__pow5mult+0xa0>
 8006090:	6820      	ldr	r0, [r4, #0]
 8006092:	b938      	cbnz	r0, 80060a4 <__pow5mult+0x9c>
 8006094:	4622      	mov	r2, r4
 8006096:	4621      	mov	r1, r4
 8006098:	4630      	mov	r0, r6
 800609a:	f7ff ff0b 	bl	8005eb4 <__multiply>
 800609e:	6020      	str	r0, [r4, #0]
 80060a0:	f8c0 9000 	str.w	r9, [r0]
 80060a4:	4604      	mov	r4, r0
 80060a6:	e7e4      	b.n	8006072 <__pow5mult+0x6a>
 80060a8:	4638      	mov	r0, r7
 80060aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80060ae:	bf00      	nop
 80060b0:	08007670 	.word	0x08007670
 80060b4:	0800749d 	.word	0x0800749d
 80060b8:	08007520 	.word	0x08007520

080060bc <__lshift>:
 80060bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80060c0:	460c      	mov	r4, r1
 80060c2:	6849      	ldr	r1, [r1, #4]
 80060c4:	6923      	ldr	r3, [r4, #16]
 80060c6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80060ca:	68a3      	ldr	r3, [r4, #8]
 80060cc:	4607      	mov	r7, r0
 80060ce:	4691      	mov	r9, r2
 80060d0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80060d4:	f108 0601 	add.w	r6, r8, #1
 80060d8:	42b3      	cmp	r3, r6
 80060da:	db0b      	blt.n	80060f4 <__lshift+0x38>
 80060dc:	4638      	mov	r0, r7
 80060de:	f7ff fddb 	bl	8005c98 <_Balloc>
 80060e2:	4605      	mov	r5, r0
 80060e4:	b948      	cbnz	r0, 80060fa <__lshift+0x3e>
 80060e6:	4602      	mov	r2, r0
 80060e8:	4b2a      	ldr	r3, [pc, #168]	; (8006194 <__lshift+0xd8>)
 80060ea:	482b      	ldr	r0, [pc, #172]	; (8006198 <__lshift+0xdc>)
 80060ec:	f240 11d9 	movw	r1, #473	; 0x1d9
 80060f0:	f000 fbb8 	bl	8006864 <__assert_func>
 80060f4:	3101      	adds	r1, #1
 80060f6:	005b      	lsls	r3, r3, #1
 80060f8:	e7ee      	b.n	80060d8 <__lshift+0x1c>
 80060fa:	2300      	movs	r3, #0
 80060fc:	f100 0114 	add.w	r1, r0, #20
 8006100:	f100 0210 	add.w	r2, r0, #16
 8006104:	4618      	mov	r0, r3
 8006106:	4553      	cmp	r3, sl
 8006108:	db37      	blt.n	800617a <__lshift+0xbe>
 800610a:	6920      	ldr	r0, [r4, #16]
 800610c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006110:	f104 0314 	add.w	r3, r4, #20
 8006114:	f019 091f 	ands.w	r9, r9, #31
 8006118:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800611c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006120:	d02f      	beq.n	8006182 <__lshift+0xc6>
 8006122:	f1c9 0e20 	rsb	lr, r9, #32
 8006126:	468a      	mov	sl, r1
 8006128:	f04f 0c00 	mov.w	ip, #0
 800612c:	681a      	ldr	r2, [r3, #0]
 800612e:	fa02 f209 	lsl.w	r2, r2, r9
 8006132:	ea42 020c 	orr.w	r2, r2, ip
 8006136:	f84a 2b04 	str.w	r2, [sl], #4
 800613a:	f853 2b04 	ldr.w	r2, [r3], #4
 800613e:	4298      	cmp	r0, r3
 8006140:	fa22 fc0e 	lsr.w	ip, r2, lr
 8006144:	d8f2      	bhi.n	800612c <__lshift+0x70>
 8006146:	1b03      	subs	r3, r0, r4
 8006148:	3b15      	subs	r3, #21
 800614a:	f023 0303 	bic.w	r3, r3, #3
 800614e:	3304      	adds	r3, #4
 8006150:	f104 0215 	add.w	r2, r4, #21
 8006154:	4290      	cmp	r0, r2
 8006156:	bf38      	it	cc
 8006158:	2304      	movcc	r3, #4
 800615a:	f841 c003 	str.w	ip, [r1, r3]
 800615e:	f1bc 0f00 	cmp.w	ip, #0
 8006162:	d001      	beq.n	8006168 <__lshift+0xac>
 8006164:	f108 0602 	add.w	r6, r8, #2
 8006168:	3e01      	subs	r6, #1
 800616a:	4638      	mov	r0, r7
 800616c:	612e      	str	r6, [r5, #16]
 800616e:	4621      	mov	r1, r4
 8006170:	f7ff fdd2 	bl	8005d18 <_Bfree>
 8006174:	4628      	mov	r0, r5
 8006176:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800617a:	f842 0f04 	str.w	r0, [r2, #4]!
 800617e:	3301      	adds	r3, #1
 8006180:	e7c1      	b.n	8006106 <__lshift+0x4a>
 8006182:	3904      	subs	r1, #4
 8006184:	f853 2b04 	ldr.w	r2, [r3], #4
 8006188:	f841 2f04 	str.w	r2, [r1, #4]!
 800618c:	4298      	cmp	r0, r3
 800618e:	d8f9      	bhi.n	8006184 <__lshift+0xc8>
 8006190:	e7ea      	b.n	8006168 <__lshift+0xac>
 8006192:	bf00      	nop
 8006194:	0800750f 	.word	0x0800750f
 8006198:	08007520 	.word	0x08007520

0800619c <__mcmp>:
 800619c:	b530      	push	{r4, r5, lr}
 800619e:	6902      	ldr	r2, [r0, #16]
 80061a0:	690c      	ldr	r4, [r1, #16]
 80061a2:	1b12      	subs	r2, r2, r4
 80061a4:	d10e      	bne.n	80061c4 <__mcmp+0x28>
 80061a6:	f100 0314 	add.w	r3, r0, #20
 80061aa:	3114      	adds	r1, #20
 80061ac:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80061b0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80061b4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80061b8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80061bc:	42a5      	cmp	r5, r4
 80061be:	d003      	beq.n	80061c8 <__mcmp+0x2c>
 80061c0:	d305      	bcc.n	80061ce <__mcmp+0x32>
 80061c2:	2201      	movs	r2, #1
 80061c4:	4610      	mov	r0, r2
 80061c6:	bd30      	pop	{r4, r5, pc}
 80061c8:	4283      	cmp	r3, r0
 80061ca:	d3f3      	bcc.n	80061b4 <__mcmp+0x18>
 80061cc:	e7fa      	b.n	80061c4 <__mcmp+0x28>
 80061ce:	f04f 32ff 	mov.w	r2, #4294967295
 80061d2:	e7f7      	b.n	80061c4 <__mcmp+0x28>

080061d4 <__mdiff>:
 80061d4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061d8:	460c      	mov	r4, r1
 80061da:	4606      	mov	r6, r0
 80061dc:	4611      	mov	r1, r2
 80061de:	4620      	mov	r0, r4
 80061e0:	4690      	mov	r8, r2
 80061e2:	f7ff ffdb 	bl	800619c <__mcmp>
 80061e6:	1e05      	subs	r5, r0, #0
 80061e8:	d110      	bne.n	800620c <__mdiff+0x38>
 80061ea:	4629      	mov	r1, r5
 80061ec:	4630      	mov	r0, r6
 80061ee:	f7ff fd53 	bl	8005c98 <_Balloc>
 80061f2:	b930      	cbnz	r0, 8006202 <__mdiff+0x2e>
 80061f4:	4b3a      	ldr	r3, [pc, #232]	; (80062e0 <__mdiff+0x10c>)
 80061f6:	4602      	mov	r2, r0
 80061f8:	f240 2132 	movw	r1, #562	; 0x232
 80061fc:	4839      	ldr	r0, [pc, #228]	; (80062e4 <__mdiff+0x110>)
 80061fe:	f000 fb31 	bl	8006864 <__assert_func>
 8006202:	2301      	movs	r3, #1
 8006204:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006208:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800620c:	bfa4      	itt	ge
 800620e:	4643      	movge	r3, r8
 8006210:	46a0      	movge	r8, r4
 8006212:	4630      	mov	r0, r6
 8006214:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006218:	bfa6      	itte	ge
 800621a:	461c      	movge	r4, r3
 800621c:	2500      	movge	r5, #0
 800621e:	2501      	movlt	r5, #1
 8006220:	f7ff fd3a 	bl	8005c98 <_Balloc>
 8006224:	b920      	cbnz	r0, 8006230 <__mdiff+0x5c>
 8006226:	4b2e      	ldr	r3, [pc, #184]	; (80062e0 <__mdiff+0x10c>)
 8006228:	4602      	mov	r2, r0
 800622a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800622e:	e7e5      	b.n	80061fc <__mdiff+0x28>
 8006230:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006234:	6926      	ldr	r6, [r4, #16]
 8006236:	60c5      	str	r5, [r0, #12]
 8006238:	f104 0914 	add.w	r9, r4, #20
 800623c:	f108 0514 	add.w	r5, r8, #20
 8006240:	f100 0e14 	add.w	lr, r0, #20
 8006244:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8006248:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800624c:	f108 0210 	add.w	r2, r8, #16
 8006250:	46f2      	mov	sl, lr
 8006252:	2100      	movs	r1, #0
 8006254:	f859 3b04 	ldr.w	r3, [r9], #4
 8006258:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800625c:	fa1f f883 	uxth.w	r8, r3
 8006260:	fa11 f18b 	uxtah	r1, r1, fp
 8006264:	0c1b      	lsrs	r3, r3, #16
 8006266:	eba1 0808 	sub.w	r8, r1, r8
 800626a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800626e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8006272:	fa1f f888 	uxth.w	r8, r8
 8006276:	1419      	asrs	r1, r3, #16
 8006278:	454e      	cmp	r6, r9
 800627a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800627e:	f84a 3b04 	str.w	r3, [sl], #4
 8006282:	d8e7      	bhi.n	8006254 <__mdiff+0x80>
 8006284:	1b33      	subs	r3, r6, r4
 8006286:	3b15      	subs	r3, #21
 8006288:	f023 0303 	bic.w	r3, r3, #3
 800628c:	3304      	adds	r3, #4
 800628e:	3415      	adds	r4, #21
 8006290:	42a6      	cmp	r6, r4
 8006292:	bf38      	it	cc
 8006294:	2304      	movcc	r3, #4
 8006296:	441d      	add	r5, r3
 8006298:	4473      	add	r3, lr
 800629a:	469e      	mov	lr, r3
 800629c:	462e      	mov	r6, r5
 800629e:	4566      	cmp	r6, ip
 80062a0:	d30e      	bcc.n	80062c0 <__mdiff+0xec>
 80062a2:	f10c 0203 	add.w	r2, ip, #3
 80062a6:	1b52      	subs	r2, r2, r5
 80062a8:	f022 0203 	bic.w	r2, r2, #3
 80062ac:	3d03      	subs	r5, #3
 80062ae:	45ac      	cmp	ip, r5
 80062b0:	bf38      	it	cc
 80062b2:	2200      	movcc	r2, #0
 80062b4:	441a      	add	r2, r3
 80062b6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80062ba:	b17b      	cbz	r3, 80062dc <__mdiff+0x108>
 80062bc:	6107      	str	r7, [r0, #16]
 80062be:	e7a3      	b.n	8006208 <__mdiff+0x34>
 80062c0:	f856 8b04 	ldr.w	r8, [r6], #4
 80062c4:	fa11 f288 	uxtah	r2, r1, r8
 80062c8:	1414      	asrs	r4, r2, #16
 80062ca:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80062ce:	b292      	uxth	r2, r2
 80062d0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80062d4:	f84e 2b04 	str.w	r2, [lr], #4
 80062d8:	1421      	asrs	r1, r4, #16
 80062da:	e7e0      	b.n	800629e <__mdiff+0xca>
 80062dc:	3f01      	subs	r7, #1
 80062de:	e7ea      	b.n	80062b6 <__mdiff+0xe2>
 80062e0:	0800750f 	.word	0x0800750f
 80062e4:	08007520 	.word	0x08007520

080062e8 <__d2b>:
 80062e8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80062ec:	4689      	mov	r9, r1
 80062ee:	2101      	movs	r1, #1
 80062f0:	ec57 6b10 	vmov	r6, r7, d0
 80062f4:	4690      	mov	r8, r2
 80062f6:	f7ff fccf 	bl	8005c98 <_Balloc>
 80062fa:	4604      	mov	r4, r0
 80062fc:	b930      	cbnz	r0, 800630c <__d2b+0x24>
 80062fe:	4602      	mov	r2, r0
 8006300:	4b25      	ldr	r3, [pc, #148]	; (8006398 <__d2b+0xb0>)
 8006302:	4826      	ldr	r0, [pc, #152]	; (800639c <__d2b+0xb4>)
 8006304:	f240 310a 	movw	r1, #778	; 0x30a
 8006308:	f000 faac 	bl	8006864 <__assert_func>
 800630c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8006310:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006314:	bb35      	cbnz	r5, 8006364 <__d2b+0x7c>
 8006316:	2e00      	cmp	r6, #0
 8006318:	9301      	str	r3, [sp, #4]
 800631a:	d028      	beq.n	800636e <__d2b+0x86>
 800631c:	4668      	mov	r0, sp
 800631e:	9600      	str	r6, [sp, #0]
 8006320:	f7ff fd82 	bl	8005e28 <__lo0bits>
 8006324:	9900      	ldr	r1, [sp, #0]
 8006326:	b300      	cbz	r0, 800636a <__d2b+0x82>
 8006328:	9a01      	ldr	r2, [sp, #4]
 800632a:	f1c0 0320 	rsb	r3, r0, #32
 800632e:	fa02 f303 	lsl.w	r3, r2, r3
 8006332:	430b      	orrs	r3, r1
 8006334:	40c2      	lsrs	r2, r0
 8006336:	6163      	str	r3, [r4, #20]
 8006338:	9201      	str	r2, [sp, #4]
 800633a:	9b01      	ldr	r3, [sp, #4]
 800633c:	61a3      	str	r3, [r4, #24]
 800633e:	2b00      	cmp	r3, #0
 8006340:	bf14      	ite	ne
 8006342:	2202      	movne	r2, #2
 8006344:	2201      	moveq	r2, #1
 8006346:	6122      	str	r2, [r4, #16]
 8006348:	b1d5      	cbz	r5, 8006380 <__d2b+0x98>
 800634a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800634e:	4405      	add	r5, r0
 8006350:	f8c9 5000 	str.w	r5, [r9]
 8006354:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006358:	f8c8 0000 	str.w	r0, [r8]
 800635c:	4620      	mov	r0, r4
 800635e:	b003      	add	sp, #12
 8006360:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006364:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006368:	e7d5      	b.n	8006316 <__d2b+0x2e>
 800636a:	6161      	str	r1, [r4, #20]
 800636c:	e7e5      	b.n	800633a <__d2b+0x52>
 800636e:	a801      	add	r0, sp, #4
 8006370:	f7ff fd5a 	bl	8005e28 <__lo0bits>
 8006374:	9b01      	ldr	r3, [sp, #4]
 8006376:	6163      	str	r3, [r4, #20]
 8006378:	2201      	movs	r2, #1
 800637a:	6122      	str	r2, [r4, #16]
 800637c:	3020      	adds	r0, #32
 800637e:	e7e3      	b.n	8006348 <__d2b+0x60>
 8006380:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006384:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006388:	f8c9 0000 	str.w	r0, [r9]
 800638c:	6918      	ldr	r0, [r3, #16]
 800638e:	f7ff fd2b 	bl	8005de8 <__hi0bits>
 8006392:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006396:	e7df      	b.n	8006358 <__d2b+0x70>
 8006398:	0800750f 	.word	0x0800750f
 800639c:	08007520 	.word	0x08007520

080063a0 <_calloc_r>:
 80063a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80063a2:	fba1 2402 	umull	r2, r4, r1, r2
 80063a6:	b94c      	cbnz	r4, 80063bc <_calloc_r+0x1c>
 80063a8:	4611      	mov	r1, r2
 80063aa:	9201      	str	r2, [sp, #4]
 80063ac:	f000 f87a 	bl	80064a4 <_malloc_r>
 80063b0:	9a01      	ldr	r2, [sp, #4]
 80063b2:	4605      	mov	r5, r0
 80063b4:	b930      	cbnz	r0, 80063c4 <_calloc_r+0x24>
 80063b6:	4628      	mov	r0, r5
 80063b8:	b003      	add	sp, #12
 80063ba:	bd30      	pop	{r4, r5, pc}
 80063bc:	220c      	movs	r2, #12
 80063be:	6002      	str	r2, [r0, #0]
 80063c0:	2500      	movs	r5, #0
 80063c2:	e7f8      	b.n	80063b6 <_calloc_r+0x16>
 80063c4:	4621      	mov	r1, r4
 80063c6:	f7fe f9e5 	bl	8004794 <memset>
 80063ca:	e7f4      	b.n	80063b6 <_calloc_r+0x16>

080063cc <_free_r>:
 80063cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80063ce:	2900      	cmp	r1, #0
 80063d0:	d044      	beq.n	800645c <_free_r+0x90>
 80063d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80063d6:	9001      	str	r0, [sp, #4]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	f1a1 0404 	sub.w	r4, r1, #4
 80063de:	bfb8      	it	lt
 80063e0:	18e4      	addlt	r4, r4, r3
 80063e2:	f000 fa9b 	bl	800691c <__malloc_lock>
 80063e6:	4a1e      	ldr	r2, [pc, #120]	; (8006460 <_free_r+0x94>)
 80063e8:	9801      	ldr	r0, [sp, #4]
 80063ea:	6813      	ldr	r3, [r2, #0]
 80063ec:	b933      	cbnz	r3, 80063fc <_free_r+0x30>
 80063ee:	6063      	str	r3, [r4, #4]
 80063f0:	6014      	str	r4, [r2, #0]
 80063f2:	b003      	add	sp, #12
 80063f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80063f8:	f000 ba96 	b.w	8006928 <__malloc_unlock>
 80063fc:	42a3      	cmp	r3, r4
 80063fe:	d908      	bls.n	8006412 <_free_r+0x46>
 8006400:	6825      	ldr	r5, [r4, #0]
 8006402:	1961      	adds	r1, r4, r5
 8006404:	428b      	cmp	r3, r1
 8006406:	bf01      	itttt	eq
 8006408:	6819      	ldreq	r1, [r3, #0]
 800640a:	685b      	ldreq	r3, [r3, #4]
 800640c:	1949      	addeq	r1, r1, r5
 800640e:	6021      	streq	r1, [r4, #0]
 8006410:	e7ed      	b.n	80063ee <_free_r+0x22>
 8006412:	461a      	mov	r2, r3
 8006414:	685b      	ldr	r3, [r3, #4]
 8006416:	b10b      	cbz	r3, 800641c <_free_r+0x50>
 8006418:	42a3      	cmp	r3, r4
 800641a:	d9fa      	bls.n	8006412 <_free_r+0x46>
 800641c:	6811      	ldr	r1, [r2, #0]
 800641e:	1855      	adds	r5, r2, r1
 8006420:	42a5      	cmp	r5, r4
 8006422:	d10b      	bne.n	800643c <_free_r+0x70>
 8006424:	6824      	ldr	r4, [r4, #0]
 8006426:	4421      	add	r1, r4
 8006428:	1854      	adds	r4, r2, r1
 800642a:	42a3      	cmp	r3, r4
 800642c:	6011      	str	r1, [r2, #0]
 800642e:	d1e0      	bne.n	80063f2 <_free_r+0x26>
 8006430:	681c      	ldr	r4, [r3, #0]
 8006432:	685b      	ldr	r3, [r3, #4]
 8006434:	6053      	str	r3, [r2, #4]
 8006436:	4421      	add	r1, r4
 8006438:	6011      	str	r1, [r2, #0]
 800643a:	e7da      	b.n	80063f2 <_free_r+0x26>
 800643c:	d902      	bls.n	8006444 <_free_r+0x78>
 800643e:	230c      	movs	r3, #12
 8006440:	6003      	str	r3, [r0, #0]
 8006442:	e7d6      	b.n	80063f2 <_free_r+0x26>
 8006444:	6825      	ldr	r5, [r4, #0]
 8006446:	1961      	adds	r1, r4, r5
 8006448:	428b      	cmp	r3, r1
 800644a:	bf04      	itt	eq
 800644c:	6819      	ldreq	r1, [r3, #0]
 800644e:	685b      	ldreq	r3, [r3, #4]
 8006450:	6063      	str	r3, [r4, #4]
 8006452:	bf04      	itt	eq
 8006454:	1949      	addeq	r1, r1, r5
 8006456:	6021      	streq	r1, [r4, #0]
 8006458:	6054      	str	r4, [r2, #4]
 800645a:	e7ca      	b.n	80063f2 <_free_r+0x26>
 800645c:	b003      	add	sp, #12
 800645e:	bd30      	pop	{r4, r5, pc}
 8006460:	20000364 	.word	0x20000364

08006464 <sbrk_aligned>:
 8006464:	b570      	push	{r4, r5, r6, lr}
 8006466:	4e0e      	ldr	r6, [pc, #56]	; (80064a0 <sbrk_aligned+0x3c>)
 8006468:	460c      	mov	r4, r1
 800646a:	6831      	ldr	r1, [r6, #0]
 800646c:	4605      	mov	r5, r0
 800646e:	b911      	cbnz	r1, 8006476 <sbrk_aligned+0x12>
 8006470:	f000 f9e8 	bl	8006844 <_sbrk_r>
 8006474:	6030      	str	r0, [r6, #0]
 8006476:	4621      	mov	r1, r4
 8006478:	4628      	mov	r0, r5
 800647a:	f000 f9e3 	bl	8006844 <_sbrk_r>
 800647e:	1c43      	adds	r3, r0, #1
 8006480:	d00a      	beq.n	8006498 <sbrk_aligned+0x34>
 8006482:	1cc4      	adds	r4, r0, #3
 8006484:	f024 0403 	bic.w	r4, r4, #3
 8006488:	42a0      	cmp	r0, r4
 800648a:	d007      	beq.n	800649c <sbrk_aligned+0x38>
 800648c:	1a21      	subs	r1, r4, r0
 800648e:	4628      	mov	r0, r5
 8006490:	f000 f9d8 	bl	8006844 <_sbrk_r>
 8006494:	3001      	adds	r0, #1
 8006496:	d101      	bne.n	800649c <sbrk_aligned+0x38>
 8006498:	f04f 34ff 	mov.w	r4, #4294967295
 800649c:	4620      	mov	r0, r4
 800649e:	bd70      	pop	{r4, r5, r6, pc}
 80064a0:	20000368 	.word	0x20000368

080064a4 <_malloc_r>:
 80064a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80064a8:	1ccd      	adds	r5, r1, #3
 80064aa:	f025 0503 	bic.w	r5, r5, #3
 80064ae:	3508      	adds	r5, #8
 80064b0:	2d0c      	cmp	r5, #12
 80064b2:	bf38      	it	cc
 80064b4:	250c      	movcc	r5, #12
 80064b6:	2d00      	cmp	r5, #0
 80064b8:	4607      	mov	r7, r0
 80064ba:	db01      	blt.n	80064c0 <_malloc_r+0x1c>
 80064bc:	42a9      	cmp	r1, r5
 80064be:	d905      	bls.n	80064cc <_malloc_r+0x28>
 80064c0:	230c      	movs	r3, #12
 80064c2:	603b      	str	r3, [r7, #0]
 80064c4:	2600      	movs	r6, #0
 80064c6:	4630      	mov	r0, r6
 80064c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80064cc:	4e2e      	ldr	r6, [pc, #184]	; (8006588 <_malloc_r+0xe4>)
 80064ce:	f000 fa25 	bl	800691c <__malloc_lock>
 80064d2:	6833      	ldr	r3, [r6, #0]
 80064d4:	461c      	mov	r4, r3
 80064d6:	bb34      	cbnz	r4, 8006526 <_malloc_r+0x82>
 80064d8:	4629      	mov	r1, r5
 80064da:	4638      	mov	r0, r7
 80064dc:	f7ff ffc2 	bl	8006464 <sbrk_aligned>
 80064e0:	1c43      	adds	r3, r0, #1
 80064e2:	4604      	mov	r4, r0
 80064e4:	d14d      	bne.n	8006582 <_malloc_r+0xde>
 80064e6:	6834      	ldr	r4, [r6, #0]
 80064e8:	4626      	mov	r6, r4
 80064ea:	2e00      	cmp	r6, #0
 80064ec:	d140      	bne.n	8006570 <_malloc_r+0xcc>
 80064ee:	6823      	ldr	r3, [r4, #0]
 80064f0:	4631      	mov	r1, r6
 80064f2:	4638      	mov	r0, r7
 80064f4:	eb04 0803 	add.w	r8, r4, r3
 80064f8:	f000 f9a4 	bl	8006844 <_sbrk_r>
 80064fc:	4580      	cmp	r8, r0
 80064fe:	d13a      	bne.n	8006576 <_malloc_r+0xd2>
 8006500:	6821      	ldr	r1, [r4, #0]
 8006502:	3503      	adds	r5, #3
 8006504:	1a6d      	subs	r5, r5, r1
 8006506:	f025 0503 	bic.w	r5, r5, #3
 800650a:	3508      	adds	r5, #8
 800650c:	2d0c      	cmp	r5, #12
 800650e:	bf38      	it	cc
 8006510:	250c      	movcc	r5, #12
 8006512:	4629      	mov	r1, r5
 8006514:	4638      	mov	r0, r7
 8006516:	f7ff ffa5 	bl	8006464 <sbrk_aligned>
 800651a:	3001      	adds	r0, #1
 800651c:	d02b      	beq.n	8006576 <_malloc_r+0xd2>
 800651e:	6823      	ldr	r3, [r4, #0]
 8006520:	442b      	add	r3, r5
 8006522:	6023      	str	r3, [r4, #0]
 8006524:	e00e      	b.n	8006544 <_malloc_r+0xa0>
 8006526:	6822      	ldr	r2, [r4, #0]
 8006528:	1b52      	subs	r2, r2, r5
 800652a:	d41e      	bmi.n	800656a <_malloc_r+0xc6>
 800652c:	2a0b      	cmp	r2, #11
 800652e:	d916      	bls.n	800655e <_malloc_r+0xba>
 8006530:	1961      	adds	r1, r4, r5
 8006532:	42a3      	cmp	r3, r4
 8006534:	6025      	str	r5, [r4, #0]
 8006536:	bf18      	it	ne
 8006538:	6059      	strne	r1, [r3, #4]
 800653a:	6863      	ldr	r3, [r4, #4]
 800653c:	bf08      	it	eq
 800653e:	6031      	streq	r1, [r6, #0]
 8006540:	5162      	str	r2, [r4, r5]
 8006542:	604b      	str	r3, [r1, #4]
 8006544:	4638      	mov	r0, r7
 8006546:	f104 060b 	add.w	r6, r4, #11
 800654a:	f000 f9ed 	bl	8006928 <__malloc_unlock>
 800654e:	f026 0607 	bic.w	r6, r6, #7
 8006552:	1d23      	adds	r3, r4, #4
 8006554:	1af2      	subs	r2, r6, r3
 8006556:	d0b6      	beq.n	80064c6 <_malloc_r+0x22>
 8006558:	1b9b      	subs	r3, r3, r6
 800655a:	50a3      	str	r3, [r4, r2]
 800655c:	e7b3      	b.n	80064c6 <_malloc_r+0x22>
 800655e:	6862      	ldr	r2, [r4, #4]
 8006560:	42a3      	cmp	r3, r4
 8006562:	bf0c      	ite	eq
 8006564:	6032      	streq	r2, [r6, #0]
 8006566:	605a      	strne	r2, [r3, #4]
 8006568:	e7ec      	b.n	8006544 <_malloc_r+0xa0>
 800656a:	4623      	mov	r3, r4
 800656c:	6864      	ldr	r4, [r4, #4]
 800656e:	e7b2      	b.n	80064d6 <_malloc_r+0x32>
 8006570:	4634      	mov	r4, r6
 8006572:	6876      	ldr	r6, [r6, #4]
 8006574:	e7b9      	b.n	80064ea <_malloc_r+0x46>
 8006576:	230c      	movs	r3, #12
 8006578:	603b      	str	r3, [r7, #0]
 800657a:	4638      	mov	r0, r7
 800657c:	f000 f9d4 	bl	8006928 <__malloc_unlock>
 8006580:	e7a1      	b.n	80064c6 <_malloc_r+0x22>
 8006582:	6025      	str	r5, [r4, #0]
 8006584:	e7de      	b.n	8006544 <_malloc_r+0xa0>
 8006586:	bf00      	nop
 8006588:	20000364 	.word	0x20000364

0800658c <__ssputs_r>:
 800658c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006590:	688e      	ldr	r6, [r1, #8]
 8006592:	429e      	cmp	r6, r3
 8006594:	4682      	mov	sl, r0
 8006596:	460c      	mov	r4, r1
 8006598:	4690      	mov	r8, r2
 800659a:	461f      	mov	r7, r3
 800659c:	d838      	bhi.n	8006610 <__ssputs_r+0x84>
 800659e:	898a      	ldrh	r2, [r1, #12]
 80065a0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80065a4:	d032      	beq.n	800660c <__ssputs_r+0x80>
 80065a6:	6825      	ldr	r5, [r4, #0]
 80065a8:	6909      	ldr	r1, [r1, #16]
 80065aa:	eba5 0901 	sub.w	r9, r5, r1
 80065ae:	6965      	ldr	r5, [r4, #20]
 80065b0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80065b4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80065b8:	3301      	adds	r3, #1
 80065ba:	444b      	add	r3, r9
 80065bc:	106d      	asrs	r5, r5, #1
 80065be:	429d      	cmp	r5, r3
 80065c0:	bf38      	it	cc
 80065c2:	461d      	movcc	r5, r3
 80065c4:	0553      	lsls	r3, r2, #21
 80065c6:	d531      	bpl.n	800662c <__ssputs_r+0xa0>
 80065c8:	4629      	mov	r1, r5
 80065ca:	f7ff ff6b 	bl	80064a4 <_malloc_r>
 80065ce:	4606      	mov	r6, r0
 80065d0:	b950      	cbnz	r0, 80065e8 <__ssputs_r+0x5c>
 80065d2:	230c      	movs	r3, #12
 80065d4:	f8ca 3000 	str.w	r3, [sl]
 80065d8:	89a3      	ldrh	r3, [r4, #12]
 80065da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80065de:	81a3      	strh	r3, [r4, #12]
 80065e0:	f04f 30ff 	mov.w	r0, #4294967295
 80065e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065e8:	6921      	ldr	r1, [r4, #16]
 80065ea:	464a      	mov	r2, r9
 80065ec:	f7ff fb46 	bl	8005c7c <memcpy>
 80065f0:	89a3      	ldrh	r3, [r4, #12]
 80065f2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80065f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065fa:	81a3      	strh	r3, [r4, #12]
 80065fc:	6126      	str	r6, [r4, #16]
 80065fe:	6165      	str	r5, [r4, #20]
 8006600:	444e      	add	r6, r9
 8006602:	eba5 0509 	sub.w	r5, r5, r9
 8006606:	6026      	str	r6, [r4, #0]
 8006608:	60a5      	str	r5, [r4, #8]
 800660a:	463e      	mov	r6, r7
 800660c:	42be      	cmp	r6, r7
 800660e:	d900      	bls.n	8006612 <__ssputs_r+0x86>
 8006610:	463e      	mov	r6, r7
 8006612:	6820      	ldr	r0, [r4, #0]
 8006614:	4632      	mov	r2, r6
 8006616:	4641      	mov	r1, r8
 8006618:	f000 f966 	bl	80068e8 <memmove>
 800661c:	68a3      	ldr	r3, [r4, #8]
 800661e:	1b9b      	subs	r3, r3, r6
 8006620:	60a3      	str	r3, [r4, #8]
 8006622:	6823      	ldr	r3, [r4, #0]
 8006624:	4433      	add	r3, r6
 8006626:	6023      	str	r3, [r4, #0]
 8006628:	2000      	movs	r0, #0
 800662a:	e7db      	b.n	80065e4 <__ssputs_r+0x58>
 800662c:	462a      	mov	r2, r5
 800662e:	f000 f981 	bl	8006934 <_realloc_r>
 8006632:	4606      	mov	r6, r0
 8006634:	2800      	cmp	r0, #0
 8006636:	d1e1      	bne.n	80065fc <__ssputs_r+0x70>
 8006638:	6921      	ldr	r1, [r4, #16]
 800663a:	4650      	mov	r0, sl
 800663c:	f7ff fec6 	bl	80063cc <_free_r>
 8006640:	e7c7      	b.n	80065d2 <__ssputs_r+0x46>
	...

08006644 <_svfiprintf_r>:
 8006644:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006648:	4698      	mov	r8, r3
 800664a:	898b      	ldrh	r3, [r1, #12]
 800664c:	061b      	lsls	r3, r3, #24
 800664e:	b09d      	sub	sp, #116	; 0x74
 8006650:	4607      	mov	r7, r0
 8006652:	460d      	mov	r5, r1
 8006654:	4614      	mov	r4, r2
 8006656:	d50e      	bpl.n	8006676 <_svfiprintf_r+0x32>
 8006658:	690b      	ldr	r3, [r1, #16]
 800665a:	b963      	cbnz	r3, 8006676 <_svfiprintf_r+0x32>
 800665c:	2140      	movs	r1, #64	; 0x40
 800665e:	f7ff ff21 	bl	80064a4 <_malloc_r>
 8006662:	6028      	str	r0, [r5, #0]
 8006664:	6128      	str	r0, [r5, #16]
 8006666:	b920      	cbnz	r0, 8006672 <_svfiprintf_r+0x2e>
 8006668:	230c      	movs	r3, #12
 800666a:	603b      	str	r3, [r7, #0]
 800666c:	f04f 30ff 	mov.w	r0, #4294967295
 8006670:	e0d1      	b.n	8006816 <_svfiprintf_r+0x1d2>
 8006672:	2340      	movs	r3, #64	; 0x40
 8006674:	616b      	str	r3, [r5, #20]
 8006676:	2300      	movs	r3, #0
 8006678:	9309      	str	r3, [sp, #36]	; 0x24
 800667a:	2320      	movs	r3, #32
 800667c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006680:	f8cd 800c 	str.w	r8, [sp, #12]
 8006684:	2330      	movs	r3, #48	; 0x30
 8006686:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006830 <_svfiprintf_r+0x1ec>
 800668a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800668e:	f04f 0901 	mov.w	r9, #1
 8006692:	4623      	mov	r3, r4
 8006694:	469a      	mov	sl, r3
 8006696:	f813 2b01 	ldrb.w	r2, [r3], #1
 800669a:	b10a      	cbz	r2, 80066a0 <_svfiprintf_r+0x5c>
 800669c:	2a25      	cmp	r2, #37	; 0x25
 800669e:	d1f9      	bne.n	8006694 <_svfiprintf_r+0x50>
 80066a0:	ebba 0b04 	subs.w	fp, sl, r4
 80066a4:	d00b      	beq.n	80066be <_svfiprintf_r+0x7a>
 80066a6:	465b      	mov	r3, fp
 80066a8:	4622      	mov	r2, r4
 80066aa:	4629      	mov	r1, r5
 80066ac:	4638      	mov	r0, r7
 80066ae:	f7ff ff6d 	bl	800658c <__ssputs_r>
 80066b2:	3001      	adds	r0, #1
 80066b4:	f000 80aa 	beq.w	800680c <_svfiprintf_r+0x1c8>
 80066b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80066ba:	445a      	add	r2, fp
 80066bc:	9209      	str	r2, [sp, #36]	; 0x24
 80066be:	f89a 3000 	ldrb.w	r3, [sl]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	f000 80a2 	beq.w	800680c <_svfiprintf_r+0x1c8>
 80066c8:	2300      	movs	r3, #0
 80066ca:	f04f 32ff 	mov.w	r2, #4294967295
 80066ce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80066d2:	f10a 0a01 	add.w	sl, sl, #1
 80066d6:	9304      	str	r3, [sp, #16]
 80066d8:	9307      	str	r3, [sp, #28]
 80066da:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80066de:	931a      	str	r3, [sp, #104]	; 0x68
 80066e0:	4654      	mov	r4, sl
 80066e2:	2205      	movs	r2, #5
 80066e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80066e8:	4851      	ldr	r0, [pc, #324]	; (8006830 <_svfiprintf_r+0x1ec>)
 80066ea:	f7f9 fdb1 	bl	8000250 <memchr>
 80066ee:	9a04      	ldr	r2, [sp, #16]
 80066f0:	b9d8      	cbnz	r0, 800672a <_svfiprintf_r+0xe6>
 80066f2:	06d0      	lsls	r0, r2, #27
 80066f4:	bf44      	itt	mi
 80066f6:	2320      	movmi	r3, #32
 80066f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80066fc:	0711      	lsls	r1, r2, #28
 80066fe:	bf44      	itt	mi
 8006700:	232b      	movmi	r3, #43	; 0x2b
 8006702:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006706:	f89a 3000 	ldrb.w	r3, [sl]
 800670a:	2b2a      	cmp	r3, #42	; 0x2a
 800670c:	d015      	beq.n	800673a <_svfiprintf_r+0xf6>
 800670e:	9a07      	ldr	r2, [sp, #28]
 8006710:	4654      	mov	r4, sl
 8006712:	2000      	movs	r0, #0
 8006714:	f04f 0c0a 	mov.w	ip, #10
 8006718:	4621      	mov	r1, r4
 800671a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800671e:	3b30      	subs	r3, #48	; 0x30
 8006720:	2b09      	cmp	r3, #9
 8006722:	d94e      	bls.n	80067c2 <_svfiprintf_r+0x17e>
 8006724:	b1b0      	cbz	r0, 8006754 <_svfiprintf_r+0x110>
 8006726:	9207      	str	r2, [sp, #28]
 8006728:	e014      	b.n	8006754 <_svfiprintf_r+0x110>
 800672a:	eba0 0308 	sub.w	r3, r0, r8
 800672e:	fa09 f303 	lsl.w	r3, r9, r3
 8006732:	4313      	orrs	r3, r2
 8006734:	9304      	str	r3, [sp, #16]
 8006736:	46a2      	mov	sl, r4
 8006738:	e7d2      	b.n	80066e0 <_svfiprintf_r+0x9c>
 800673a:	9b03      	ldr	r3, [sp, #12]
 800673c:	1d19      	adds	r1, r3, #4
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	9103      	str	r1, [sp, #12]
 8006742:	2b00      	cmp	r3, #0
 8006744:	bfbb      	ittet	lt
 8006746:	425b      	neglt	r3, r3
 8006748:	f042 0202 	orrlt.w	r2, r2, #2
 800674c:	9307      	strge	r3, [sp, #28]
 800674e:	9307      	strlt	r3, [sp, #28]
 8006750:	bfb8      	it	lt
 8006752:	9204      	strlt	r2, [sp, #16]
 8006754:	7823      	ldrb	r3, [r4, #0]
 8006756:	2b2e      	cmp	r3, #46	; 0x2e
 8006758:	d10c      	bne.n	8006774 <_svfiprintf_r+0x130>
 800675a:	7863      	ldrb	r3, [r4, #1]
 800675c:	2b2a      	cmp	r3, #42	; 0x2a
 800675e:	d135      	bne.n	80067cc <_svfiprintf_r+0x188>
 8006760:	9b03      	ldr	r3, [sp, #12]
 8006762:	1d1a      	adds	r2, r3, #4
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	9203      	str	r2, [sp, #12]
 8006768:	2b00      	cmp	r3, #0
 800676a:	bfb8      	it	lt
 800676c:	f04f 33ff 	movlt.w	r3, #4294967295
 8006770:	3402      	adds	r4, #2
 8006772:	9305      	str	r3, [sp, #20]
 8006774:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006840 <_svfiprintf_r+0x1fc>
 8006778:	7821      	ldrb	r1, [r4, #0]
 800677a:	2203      	movs	r2, #3
 800677c:	4650      	mov	r0, sl
 800677e:	f7f9 fd67 	bl	8000250 <memchr>
 8006782:	b140      	cbz	r0, 8006796 <_svfiprintf_r+0x152>
 8006784:	2340      	movs	r3, #64	; 0x40
 8006786:	eba0 000a 	sub.w	r0, r0, sl
 800678a:	fa03 f000 	lsl.w	r0, r3, r0
 800678e:	9b04      	ldr	r3, [sp, #16]
 8006790:	4303      	orrs	r3, r0
 8006792:	3401      	adds	r4, #1
 8006794:	9304      	str	r3, [sp, #16]
 8006796:	f814 1b01 	ldrb.w	r1, [r4], #1
 800679a:	4826      	ldr	r0, [pc, #152]	; (8006834 <_svfiprintf_r+0x1f0>)
 800679c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80067a0:	2206      	movs	r2, #6
 80067a2:	f7f9 fd55 	bl	8000250 <memchr>
 80067a6:	2800      	cmp	r0, #0
 80067a8:	d038      	beq.n	800681c <_svfiprintf_r+0x1d8>
 80067aa:	4b23      	ldr	r3, [pc, #140]	; (8006838 <_svfiprintf_r+0x1f4>)
 80067ac:	bb1b      	cbnz	r3, 80067f6 <_svfiprintf_r+0x1b2>
 80067ae:	9b03      	ldr	r3, [sp, #12]
 80067b0:	3307      	adds	r3, #7
 80067b2:	f023 0307 	bic.w	r3, r3, #7
 80067b6:	3308      	adds	r3, #8
 80067b8:	9303      	str	r3, [sp, #12]
 80067ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067bc:	4433      	add	r3, r6
 80067be:	9309      	str	r3, [sp, #36]	; 0x24
 80067c0:	e767      	b.n	8006692 <_svfiprintf_r+0x4e>
 80067c2:	fb0c 3202 	mla	r2, ip, r2, r3
 80067c6:	460c      	mov	r4, r1
 80067c8:	2001      	movs	r0, #1
 80067ca:	e7a5      	b.n	8006718 <_svfiprintf_r+0xd4>
 80067cc:	2300      	movs	r3, #0
 80067ce:	3401      	adds	r4, #1
 80067d0:	9305      	str	r3, [sp, #20]
 80067d2:	4619      	mov	r1, r3
 80067d4:	f04f 0c0a 	mov.w	ip, #10
 80067d8:	4620      	mov	r0, r4
 80067da:	f810 2b01 	ldrb.w	r2, [r0], #1
 80067de:	3a30      	subs	r2, #48	; 0x30
 80067e0:	2a09      	cmp	r2, #9
 80067e2:	d903      	bls.n	80067ec <_svfiprintf_r+0x1a8>
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d0c5      	beq.n	8006774 <_svfiprintf_r+0x130>
 80067e8:	9105      	str	r1, [sp, #20]
 80067ea:	e7c3      	b.n	8006774 <_svfiprintf_r+0x130>
 80067ec:	fb0c 2101 	mla	r1, ip, r1, r2
 80067f0:	4604      	mov	r4, r0
 80067f2:	2301      	movs	r3, #1
 80067f4:	e7f0      	b.n	80067d8 <_svfiprintf_r+0x194>
 80067f6:	ab03      	add	r3, sp, #12
 80067f8:	9300      	str	r3, [sp, #0]
 80067fa:	462a      	mov	r2, r5
 80067fc:	4b0f      	ldr	r3, [pc, #60]	; (800683c <_svfiprintf_r+0x1f8>)
 80067fe:	a904      	add	r1, sp, #16
 8006800:	4638      	mov	r0, r7
 8006802:	f7fe f861 	bl	80048c8 <_printf_float>
 8006806:	1c42      	adds	r2, r0, #1
 8006808:	4606      	mov	r6, r0
 800680a:	d1d6      	bne.n	80067ba <_svfiprintf_r+0x176>
 800680c:	89ab      	ldrh	r3, [r5, #12]
 800680e:	065b      	lsls	r3, r3, #25
 8006810:	f53f af2c 	bmi.w	800666c <_svfiprintf_r+0x28>
 8006814:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006816:	b01d      	add	sp, #116	; 0x74
 8006818:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800681c:	ab03      	add	r3, sp, #12
 800681e:	9300      	str	r3, [sp, #0]
 8006820:	462a      	mov	r2, r5
 8006822:	4b06      	ldr	r3, [pc, #24]	; (800683c <_svfiprintf_r+0x1f8>)
 8006824:	a904      	add	r1, sp, #16
 8006826:	4638      	mov	r0, r7
 8006828:	f7fe fada 	bl	8004de0 <_printf_i>
 800682c:	e7eb      	b.n	8006806 <_svfiprintf_r+0x1c2>
 800682e:	bf00      	nop
 8006830:	0800767c 	.word	0x0800767c
 8006834:	08007686 	.word	0x08007686
 8006838:	080048c9 	.word	0x080048c9
 800683c:	0800658d 	.word	0x0800658d
 8006840:	08007682 	.word	0x08007682

08006844 <_sbrk_r>:
 8006844:	b538      	push	{r3, r4, r5, lr}
 8006846:	4d06      	ldr	r5, [pc, #24]	; (8006860 <_sbrk_r+0x1c>)
 8006848:	2300      	movs	r3, #0
 800684a:	4604      	mov	r4, r0
 800684c:	4608      	mov	r0, r1
 800684e:	602b      	str	r3, [r5, #0]
 8006850:	f7fa fc10 	bl	8001074 <_sbrk>
 8006854:	1c43      	adds	r3, r0, #1
 8006856:	d102      	bne.n	800685e <_sbrk_r+0x1a>
 8006858:	682b      	ldr	r3, [r5, #0]
 800685a:	b103      	cbz	r3, 800685e <_sbrk_r+0x1a>
 800685c:	6023      	str	r3, [r4, #0]
 800685e:	bd38      	pop	{r3, r4, r5, pc}
 8006860:	2000036c 	.word	0x2000036c

08006864 <__assert_func>:
 8006864:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006866:	4614      	mov	r4, r2
 8006868:	461a      	mov	r2, r3
 800686a:	4b09      	ldr	r3, [pc, #36]	; (8006890 <__assert_func+0x2c>)
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	4605      	mov	r5, r0
 8006870:	68d8      	ldr	r0, [r3, #12]
 8006872:	b14c      	cbz	r4, 8006888 <__assert_func+0x24>
 8006874:	4b07      	ldr	r3, [pc, #28]	; (8006894 <__assert_func+0x30>)
 8006876:	9100      	str	r1, [sp, #0]
 8006878:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800687c:	4906      	ldr	r1, [pc, #24]	; (8006898 <__assert_func+0x34>)
 800687e:	462b      	mov	r3, r5
 8006880:	f000 f80e 	bl	80068a0 <fiprintf>
 8006884:	f000 faac 	bl	8006de0 <abort>
 8006888:	4b04      	ldr	r3, [pc, #16]	; (800689c <__assert_func+0x38>)
 800688a:	461c      	mov	r4, r3
 800688c:	e7f3      	b.n	8006876 <__assert_func+0x12>
 800688e:	bf00      	nop
 8006890:	2000000c 	.word	0x2000000c
 8006894:	0800768d 	.word	0x0800768d
 8006898:	0800769a 	.word	0x0800769a
 800689c:	080076c8 	.word	0x080076c8

080068a0 <fiprintf>:
 80068a0:	b40e      	push	{r1, r2, r3}
 80068a2:	b503      	push	{r0, r1, lr}
 80068a4:	4601      	mov	r1, r0
 80068a6:	ab03      	add	r3, sp, #12
 80068a8:	4805      	ldr	r0, [pc, #20]	; (80068c0 <fiprintf+0x20>)
 80068aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80068ae:	6800      	ldr	r0, [r0, #0]
 80068b0:	9301      	str	r3, [sp, #4]
 80068b2:	f000 f897 	bl	80069e4 <_vfiprintf_r>
 80068b6:	b002      	add	sp, #8
 80068b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80068bc:	b003      	add	sp, #12
 80068be:	4770      	bx	lr
 80068c0:	2000000c 	.word	0x2000000c

080068c4 <__ascii_mbtowc>:
 80068c4:	b082      	sub	sp, #8
 80068c6:	b901      	cbnz	r1, 80068ca <__ascii_mbtowc+0x6>
 80068c8:	a901      	add	r1, sp, #4
 80068ca:	b142      	cbz	r2, 80068de <__ascii_mbtowc+0x1a>
 80068cc:	b14b      	cbz	r3, 80068e2 <__ascii_mbtowc+0x1e>
 80068ce:	7813      	ldrb	r3, [r2, #0]
 80068d0:	600b      	str	r3, [r1, #0]
 80068d2:	7812      	ldrb	r2, [r2, #0]
 80068d4:	1e10      	subs	r0, r2, #0
 80068d6:	bf18      	it	ne
 80068d8:	2001      	movne	r0, #1
 80068da:	b002      	add	sp, #8
 80068dc:	4770      	bx	lr
 80068de:	4610      	mov	r0, r2
 80068e0:	e7fb      	b.n	80068da <__ascii_mbtowc+0x16>
 80068e2:	f06f 0001 	mvn.w	r0, #1
 80068e6:	e7f8      	b.n	80068da <__ascii_mbtowc+0x16>

080068e8 <memmove>:
 80068e8:	4288      	cmp	r0, r1
 80068ea:	b510      	push	{r4, lr}
 80068ec:	eb01 0402 	add.w	r4, r1, r2
 80068f0:	d902      	bls.n	80068f8 <memmove+0x10>
 80068f2:	4284      	cmp	r4, r0
 80068f4:	4623      	mov	r3, r4
 80068f6:	d807      	bhi.n	8006908 <memmove+0x20>
 80068f8:	1e43      	subs	r3, r0, #1
 80068fa:	42a1      	cmp	r1, r4
 80068fc:	d008      	beq.n	8006910 <memmove+0x28>
 80068fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006902:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006906:	e7f8      	b.n	80068fa <memmove+0x12>
 8006908:	4402      	add	r2, r0
 800690a:	4601      	mov	r1, r0
 800690c:	428a      	cmp	r2, r1
 800690e:	d100      	bne.n	8006912 <memmove+0x2a>
 8006910:	bd10      	pop	{r4, pc}
 8006912:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006916:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800691a:	e7f7      	b.n	800690c <memmove+0x24>

0800691c <__malloc_lock>:
 800691c:	4801      	ldr	r0, [pc, #4]	; (8006924 <__malloc_lock+0x8>)
 800691e:	f000 bc1f 	b.w	8007160 <__retarget_lock_acquire_recursive>
 8006922:	bf00      	nop
 8006924:	20000370 	.word	0x20000370

08006928 <__malloc_unlock>:
 8006928:	4801      	ldr	r0, [pc, #4]	; (8006930 <__malloc_unlock+0x8>)
 800692a:	f000 bc1a 	b.w	8007162 <__retarget_lock_release_recursive>
 800692e:	bf00      	nop
 8006930:	20000370 	.word	0x20000370

08006934 <_realloc_r>:
 8006934:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006938:	4680      	mov	r8, r0
 800693a:	4614      	mov	r4, r2
 800693c:	460e      	mov	r6, r1
 800693e:	b921      	cbnz	r1, 800694a <_realloc_r+0x16>
 8006940:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006944:	4611      	mov	r1, r2
 8006946:	f7ff bdad 	b.w	80064a4 <_malloc_r>
 800694a:	b92a      	cbnz	r2, 8006958 <_realloc_r+0x24>
 800694c:	f7ff fd3e 	bl	80063cc <_free_r>
 8006950:	4625      	mov	r5, r4
 8006952:	4628      	mov	r0, r5
 8006954:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006958:	f000 fc6a 	bl	8007230 <_malloc_usable_size_r>
 800695c:	4284      	cmp	r4, r0
 800695e:	4607      	mov	r7, r0
 8006960:	d802      	bhi.n	8006968 <_realloc_r+0x34>
 8006962:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006966:	d812      	bhi.n	800698e <_realloc_r+0x5a>
 8006968:	4621      	mov	r1, r4
 800696a:	4640      	mov	r0, r8
 800696c:	f7ff fd9a 	bl	80064a4 <_malloc_r>
 8006970:	4605      	mov	r5, r0
 8006972:	2800      	cmp	r0, #0
 8006974:	d0ed      	beq.n	8006952 <_realloc_r+0x1e>
 8006976:	42bc      	cmp	r4, r7
 8006978:	4622      	mov	r2, r4
 800697a:	4631      	mov	r1, r6
 800697c:	bf28      	it	cs
 800697e:	463a      	movcs	r2, r7
 8006980:	f7ff f97c 	bl	8005c7c <memcpy>
 8006984:	4631      	mov	r1, r6
 8006986:	4640      	mov	r0, r8
 8006988:	f7ff fd20 	bl	80063cc <_free_r>
 800698c:	e7e1      	b.n	8006952 <_realloc_r+0x1e>
 800698e:	4635      	mov	r5, r6
 8006990:	e7df      	b.n	8006952 <_realloc_r+0x1e>

08006992 <__sfputc_r>:
 8006992:	6893      	ldr	r3, [r2, #8]
 8006994:	3b01      	subs	r3, #1
 8006996:	2b00      	cmp	r3, #0
 8006998:	b410      	push	{r4}
 800699a:	6093      	str	r3, [r2, #8]
 800699c:	da08      	bge.n	80069b0 <__sfputc_r+0x1e>
 800699e:	6994      	ldr	r4, [r2, #24]
 80069a0:	42a3      	cmp	r3, r4
 80069a2:	db01      	blt.n	80069a8 <__sfputc_r+0x16>
 80069a4:	290a      	cmp	r1, #10
 80069a6:	d103      	bne.n	80069b0 <__sfputc_r+0x1e>
 80069a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80069ac:	f000 b94a 	b.w	8006c44 <__swbuf_r>
 80069b0:	6813      	ldr	r3, [r2, #0]
 80069b2:	1c58      	adds	r0, r3, #1
 80069b4:	6010      	str	r0, [r2, #0]
 80069b6:	7019      	strb	r1, [r3, #0]
 80069b8:	4608      	mov	r0, r1
 80069ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 80069be:	4770      	bx	lr

080069c0 <__sfputs_r>:
 80069c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069c2:	4606      	mov	r6, r0
 80069c4:	460f      	mov	r7, r1
 80069c6:	4614      	mov	r4, r2
 80069c8:	18d5      	adds	r5, r2, r3
 80069ca:	42ac      	cmp	r4, r5
 80069cc:	d101      	bne.n	80069d2 <__sfputs_r+0x12>
 80069ce:	2000      	movs	r0, #0
 80069d0:	e007      	b.n	80069e2 <__sfputs_r+0x22>
 80069d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80069d6:	463a      	mov	r2, r7
 80069d8:	4630      	mov	r0, r6
 80069da:	f7ff ffda 	bl	8006992 <__sfputc_r>
 80069de:	1c43      	adds	r3, r0, #1
 80069e0:	d1f3      	bne.n	80069ca <__sfputs_r+0xa>
 80069e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080069e4 <_vfiprintf_r>:
 80069e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069e8:	460d      	mov	r5, r1
 80069ea:	b09d      	sub	sp, #116	; 0x74
 80069ec:	4614      	mov	r4, r2
 80069ee:	4698      	mov	r8, r3
 80069f0:	4606      	mov	r6, r0
 80069f2:	b118      	cbz	r0, 80069fc <_vfiprintf_r+0x18>
 80069f4:	6983      	ldr	r3, [r0, #24]
 80069f6:	b90b      	cbnz	r3, 80069fc <_vfiprintf_r+0x18>
 80069f8:	f000 fb14 	bl	8007024 <__sinit>
 80069fc:	4b89      	ldr	r3, [pc, #548]	; (8006c24 <_vfiprintf_r+0x240>)
 80069fe:	429d      	cmp	r5, r3
 8006a00:	d11b      	bne.n	8006a3a <_vfiprintf_r+0x56>
 8006a02:	6875      	ldr	r5, [r6, #4]
 8006a04:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006a06:	07d9      	lsls	r1, r3, #31
 8006a08:	d405      	bmi.n	8006a16 <_vfiprintf_r+0x32>
 8006a0a:	89ab      	ldrh	r3, [r5, #12]
 8006a0c:	059a      	lsls	r2, r3, #22
 8006a0e:	d402      	bmi.n	8006a16 <_vfiprintf_r+0x32>
 8006a10:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006a12:	f000 fba5 	bl	8007160 <__retarget_lock_acquire_recursive>
 8006a16:	89ab      	ldrh	r3, [r5, #12]
 8006a18:	071b      	lsls	r3, r3, #28
 8006a1a:	d501      	bpl.n	8006a20 <_vfiprintf_r+0x3c>
 8006a1c:	692b      	ldr	r3, [r5, #16]
 8006a1e:	b9eb      	cbnz	r3, 8006a5c <_vfiprintf_r+0x78>
 8006a20:	4629      	mov	r1, r5
 8006a22:	4630      	mov	r0, r6
 8006a24:	f000 f96e 	bl	8006d04 <__swsetup_r>
 8006a28:	b1c0      	cbz	r0, 8006a5c <_vfiprintf_r+0x78>
 8006a2a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006a2c:	07dc      	lsls	r4, r3, #31
 8006a2e:	d50e      	bpl.n	8006a4e <_vfiprintf_r+0x6a>
 8006a30:	f04f 30ff 	mov.w	r0, #4294967295
 8006a34:	b01d      	add	sp, #116	; 0x74
 8006a36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a3a:	4b7b      	ldr	r3, [pc, #492]	; (8006c28 <_vfiprintf_r+0x244>)
 8006a3c:	429d      	cmp	r5, r3
 8006a3e:	d101      	bne.n	8006a44 <_vfiprintf_r+0x60>
 8006a40:	68b5      	ldr	r5, [r6, #8]
 8006a42:	e7df      	b.n	8006a04 <_vfiprintf_r+0x20>
 8006a44:	4b79      	ldr	r3, [pc, #484]	; (8006c2c <_vfiprintf_r+0x248>)
 8006a46:	429d      	cmp	r5, r3
 8006a48:	bf08      	it	eq
 8006a4a:	68f5      	ldreq	r5, [r6, #12]
 8006a4c:	e7da      	b.n	8006a04 <_vfiprintf_r+0x20>
 8006a4e:	89ab      	ldrh	r3, [r5, #12]
 8006a50:	0598      	lsls	r0, r3, #22
 8006a52:	d4ed      	bmi.n	8006a30 <_vfiprintf_r+0x4c>
 8006a54:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006a56:	f000 fb84 	bl	8007162 <__retarget_lock_release_recursive>
 8006a5a:	e7e9      	b.n	8006a30 <_vfiprintf_r+0x4c>
 8006a5c:	2300      	movs	r3, #0
 8006a5e:	9309      	str	r3, [sp, #36]	; 0x24
 8006a60:	2320      	movs	r3, #32
 8006a62:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006a66:	f8cd 800c 	str.w	r8, [sp, #12]
 8006a6a:	2330      	movs	r3, #48	; 0x30
 8006a6c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006c30 <_vfiprintf_r+0x24c>
 8006a70:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006a74:	f04f 0901 	mov.w	r9, #1
 8006a78:	4623      	mov	r3, r4
 8006a7a:	469a      	mov	sl, r3
 8006a7c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006a80:	b10a      	cbz	r2, 8006a86 <_vfiprintf_r+0xa2>
 8006a82:	2a25      	cmp	r2, #37	; 0x25
 8006a84:	d1f9      	bne.n	8006a7a <_vfiprintf_r+0x96>
 8006a86:	ebba 0b04 	subs.w	fp, sl, r4
 8006a8a:	d00b      	beq.n	8006aa4 <_vfiprintf_r+0xc0>
 8006a8c:	465b      	mov	r3, fp
 8006a8e:	4622      	mov	r2, r4
 8006a90:	4629      	mov	r1, r5
 8006a92:	4630      	mov	r0, r6
 8006a94:	f7ff ff94 	bl	80069c0 <__sfputs_r>
 8006a98:	3001      	adds	r0, #1
 8006a9a:	f000 80aa 	beq.w	8006bf2 <_vfiprintf_r+0x20e>
 8006a9e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006aa0:	445a      	add	r2, fp
 8006aa2:	9209      	str	r2, [sp, #36]	; 0x24
 8006aa4:	f89a 3000 	ldrb.w	r3, [sl]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	f000 80a2 	beq.w	8006bf2 <_vfiprintf_r+0x20e>
 8006aae:	2300      	movs	r3, #0
 8006ab0:	f04f 32ff 	mov.w	r2, #4294967295
 8006ab4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006ab8:	f10a 0a01 	add.w	sl, sl, #1
 8006abc:	9304      	str	r3, [sp, #16]
 8006abe:	9307      	str	r3, [sp, #28]
 8006ac0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006ac4:	931a      	str	r3, [sp, #104]	; 0x68
 8006ac6:	4654      	mov	r4, sl
 8006ac8:	2205      	movs	r2, #5
 8006aca:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ace:	4858      	ldr	r0, [pc, #352]	; (8006c30 <_vfiprintf_r+0x24c>)
 8006ad0:	f7f9 fbbe 	bl	8000250 <memchr>
 8006ad4:	9a04      	ldr	r2, [sp, #16]
 8006ad6:	b9d8      	cbnz	r0, 8006b10 <_vfiprintf_r+0x12c>
 8006ad8:	06d1      	lsls	r1, r2, #27
 8006ada:	bf44      	itt	mi
 8006adc:	2320      	movmi	r3, #32
 8006ade:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006ae2:	0713      	lsls	r3, r2, #28
 8006ae4:	bf44      	itt	mi
 8006ae6:	232b      	movmi	r3, #43	; 0x2b
 8006ae8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006aec:	f89a 3000 	ldrb.w	r3, [sl]
 8006af0:	2b2a      	cmp	r3, #42	; 0x2a
 8006af2:	d015      	beq.n	8006b20 <_vfiprintf_r+0x13c>
 8006af4:	9a07      	ldr	r2, [sp, #28]
 8006af6:	4654      	mov	r4, sl
 8006af8:	2000      	movs	r0, #0
 8006afa:	f04f 0c0a 	mov.w	ip, #10
 8006afe:	4621      	mov	r1, r4
 8006b00:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006b04:	3b30      	subs	r3, #48	; 0x30
 8006b06:	2b09      	cmp	r3, #9
 8006b08:	d94e      	bls.n	8006ba8 <_vfiprintf_r+0x1c4>
 8006b0a:	b1b0      	cbz	r0, 8006b3a <_vfiprintf_r+0x156>
 8006b0c:	9207      	str	r2, [sp, #28]
 8006b0e:	e014      	b.n	8006b3a <_vfiprintf_r+0x156>
 8006b10:	eba0 0308 	sub.w	r3, r0, r8
 8006b14:	fa09 f303 	lsl.w	r3, r9, r3
 8006b18:	4313      	orrs	r3, r2
 8006b1a:	9304      	str	r3, [sp, #16]
 8006b1c:	46a2      	mov	sl, r4
 8006b1e:	e7d2      	b.n	8006ac6 <_vfiprintf_r+0xe2>
 8006b20:	9b03      	ldr	r3, [sp, #12]
 8006b22:	1d19      	adds	r1, r3, #4
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	9103      	str	r1, [sp, #12]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	bfbb      	ittet	lt
 8006b2c:	425b      	neglt	r3, r3
 8006b2e:	f042 0202 	orrlt.w	r2, r2, #2
 8006b32:	9307      	strge	r3, [sp, #28]
 8006b34:	9307      	strlt	r3, [sp, #28]
 8006b36:	bfb8      	it	lt
 8006b38:	9204      	strlt	r2, [sp, #16]
 8006b3a:	7823      	ldrb	r3, [r4, #0]
 8006b3c:	2b2e      	cmp	r3, #46	; 0x2e
 8006b3e:	d10c      	bne.n	8006b5a <_vfiprintf_r+0x176>
 8006b40:	7863      	ldrb	r3, [r4, #1]
 8006b42:	2b2a      	cmp	r3, #42	; 0x2a
 8006b44:	d135      	bne.n	8006bb2 <_vfiprintf_r+0x1ce>
 8006b46:	9b03      	ldr	r3, [sp, #12]
 8006b48:	1d1a      	adds	r2, r3, #4
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	9203      	str	r2, [sp, #12]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	bfb8      	it	lt
 8006b52:	f04f 33ff 	movlt.w	r3, #4294967295
 8006b56:	3402      	adds	r4, #2
 8006b58:	9305      	str	r3, [sp, #20]
 8006b5a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006c40 <_vfiprintf_r+0x25c>
 8006b5e:	7821      	ldrb	r1, [r4, #0]
 8006b60:	2203      	movs	r2, #3
 8006b62:	4650      	mov	r0, sl
 8006b64:	f7f9 fb74 	bl	8000250 <memchr>
 8006b68:	b140      	cbz	r0, 8006b7c <_vfiprintf_r+0x198>
 8006b6a:	2340      	movs	r3, #64	; 0x40
 8006b6c:	eba0 000a 	sub.w	r0, r0, sl
 8006b70:	fa03 f000 	lsl.w	r0, r3, r0
 8006b74:	9b04      	ldr	r3, [sp, #16]
 8006b76:	4303      	orrs	r3, r0
 8006b78:	3401      	adds	r4, #1
 8006b7a:	9304      	str	r3, [sp, #16]
 8006b7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b80:	482c      	ldr	r0, [pc, #176]	; (8006c34 <_vfiprintf_r+0x250>)
 8006b82:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006b86:	2206      	movs	r2, #6
 8006b88:	f7f9 fb62 	bl	8000250 <memchr>
 8006b8c:	2800      	cmp	r0, #0
 8006b8e:	d03f      	beq.n	8006c10 <_vfiprintf_r+0x22c>
 8006b90:	4b29      	ldr	r3, [pc, #164]	; (8006c38 <_vfiprintf_r+0x254>)
 8006b92:	bb1b      	cbnz	r3, 8006bdc <_vfiprintf_r+0x1f8>
 8006b94:	9b03      	ldr	r3, [sp, #12]
 8006b96:	3307      	adds	r3, #7
 8006b98:	f023 0307 	bic.w	r3, r3, #7
 8006b9c:	3308      	adds	r3, #8
 8006b9e:	9303      	str	r3, [sp, #12]
 8006ba0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ba2:	443b      	add	r3, r7
 8006ba4:	9309      	str	r3, [sp, #36]	; 0x24
 8006ba6:	e767      	b.n	8006a78 <_vfiprintf_r+0x94>
 8006ba8:	fb0c 3202 	mla	r2, ip, r2, r3
 8006bac:	460c      	mov	r4, r1
 8006bae:	2001      	movs	r0, #1
 8006bb0:	e7a5      	b.n	8006afe <_vfiprintf_r+0x11a>
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	3401      	adds	r4, #1
 8006bb6:	9305      	str	r3, [sp, #20]
 8006bb8:	4619      	mov	r1, r3
 8006bba:	f04f 0c0a 	mov.w	ip, #10
 8006bbe:	4620      	mov	r0, r4
 8006bc0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006bc4:	3a30      	subs	r2, #48	; 0x30
 8006bc6:	2a09      	cmp	r2, #9
 8006bc8:	d903      	bls.n	8006bd2 <_vfiprintf_r+0x1ee>
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d0c5      	beq.n	8006b5a <_vfiprintf_r+0x176>
 8006bce:	9105      	str	r1, [sp, #20]
 8006bd0:	e7c3      	b.n	8006b5a <_vfiprintf_r+0x176>
 8006bd2:	fb0c 2101 	mla	r1, ip, r1, r2
 8006bd6:	4604      	mov	r4, r0
 8006bd8:	2301      	movs	r3, #1
 8006bda:	e7f0      	b.n	8006bbe <_vfiprintf_r+0x1da>
 8006bdc:	ab03      	add	r3, sp, #12
 8006bde:	9300      	str	r3, [sp, #0]
 8006be0:	462a      	mov	r2, r5
 8006be2:	4b16      	ldr	r3, [pc, #88]	; (8006c3c <_vfiprintf_r+0x258>)
 8006be4:	a904      	add	r1, sp, #16
 8006be6:	4630      	mov	r0, r6
 8006be8:	f7fd fe6e 	bl	80048c8 <_printf_float>
 8006bec:	4607      	mov	r7, r0
 8006bee:	1c78      	adds	r0, r7, #1
 8006bf0:	d1d6      	bne.n	8006ba0 <_vfiprintf_r+0x1bc>
 8006bf2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006bf4:	07d9      	lsls	r1, r3, #31
 8006bf6:	d405      	bmi.n	8006c04 <_vfiprintf_r+0x220>
 8006bf8:	89ab      	ldrh	r3, [r5, #12]
 8006bfa:	059a      	lsls	r2, r3, #22
 8006bfc:	d402      	bmi.n	8006c04 <_vfiprintf_r+0x220>
 8006bfe:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006c00:	f000 faaf 	bl	8007162 <__retarget_lock_release_recursive>
 8006c04:	89ab      	ldrh	r3, [r5, #12]
 8006c06:	065b      	lsls	r3, r3, #25
 8006c08:	f53f af12 	bmi.w	8006a30 <_vfiprintf_r+0x4c>
 8006c0c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006c0e:	e711      	b.n	8006a34 <_vfiprintf_r+0x50>
 8006c10:	ab03      	add	r3, sp, #12
 8006c12:	9300      	str	r3, [sp, #0]
 8006c14:	462a      	mov	r2, r5
 8006c16:	4b09      	ldr	r3, [pc, #36]	; (8006c3c <_vfiprintf_r+0x258>)
 8006c18:	a904      	add	r1, sp, #16
 8006c1a:	4630      	mov	r0, r6
 8006c1c:	f7fe f8e0 	bl	8004de0 <_printf_i>
 8006c20:	e7e4      	b.n	8006bec <_vfiprintf_r+0x208>
 8006c22:	bf00      	nop
 8006c24:	080077f4 	.word	0x080077f4
 8006c28:	08007814 	.word	0x08007814
 8006c2c:	080077d4 	.word	0x080077d4
 8006c30:	0800767c 	.word	0x0800767c
 8006c34:	08007686 	.word	0x08007686
 8006c38:	080048c9 	.word	0x080048c9
 8006c3c:	080069c1 	.word	0x080069c1
 8006c40:	08007682 	.word	0x08007682

08006c44 <__swbuf_r>:
 8006c44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c46:	460e      	mov	r6, r1
 8006c48:	4614      	mov	r4, r2
 8006c4a:	4605      	mov	r5, r0
 8006c4c:	b118      	cbz	r0, 8006c56 <__swbuf_r+0x12>
 8006c4e:	6983      	ldr	r3, [r0, #24]
 8006c50:	b90b      	cbnz	r3, 8006c56 <__swbuf_r+0x12>
 8006c52:	f000 f9e7 	bl	8007024 <__sinit>
 8006c56:	4b21      	ldr	r3, [pc, #132]	; (8006cdc <__swbuf_r+0x98>)
 8006c58:	429c      	cmp	r4, r3
 8006c5a:	d12b      	bne.n	8006cb4 <__swbuf_r+0x70>
 8006c5c:	686c      	ldr	r4, [r5, #4]
 8006c5e:	69a3      	ldr	r3, [r4, #24]
 8006c60:	60a3      	str	r3, [r4, #8]
 8006c62:	89a3      	ldrh	r3, [r4, #12]
 8006c64:	071a      	lsls	r2, r3, #28
 8006c66:	d52f      	bpl.n	8006cc8 <__swbuf_r+0x84>
 8006c68:	6923      	ldr	r3, [r4, #16]
 8006c6a:	b36b      	cbz	r3, 8006cc8 <__swbuf_r+0x84>
 8006c6c:	6923      	ldr	r3, [r4, #16]
 8006c6e:	6820      	ldr	r0, [r4, #0]
 8006c70:	1ac0      	subs	r0, r0, r3
 8006c72:	6963      	ldr	r3, [r4, #20]
 8006c74:	b2f6      	uxtb	r6, r6
 8006c76:	4283      	cmp	r3, r0
 8006c78:	4637      	mov	r7, r6
 8006c7a:	dc04      	bgt.n	8006c86 <__swbuf_r+0x42>
 8006c7c:	4621      	mov	r1, r4
 8006c7e:	4628      	mov	r0, r5
 8006c80:	f000 f93c 	bl	8006efc <_fflush_r>
 8006c84:	bb30      	cbnz	r0, 8006cd4 <__swbuf_r+0x90>
 8006c86:	68a3      	ldr	r3, [r4, #8]
 8006c88:	3b01      	subs	r3, #1
 8006c8a:	60a3      	str	r3, [r4, #8]
 8006c8c:	6823      	ldr	r3, [r4, #0]
 8006c8e:	1c5a      	adds	r2, r3, #1
 8006c90:	6022      	str	r2, [r4, #0]
 8006c92:	701e      	strb	r6, [r3, #0]
 8006c94:	6963      	ldr	r3, [r4, #20]
 8006c96:	3001      	adds	r0, #1
 8006c98:	4283      	cmp	r3, r0
 8006c9a:	d004      	beq.n	8006ca6 <__swbuf_r+0x62>
 8006c9c:	89a3      	ldrh	r3, [r4, #12]
 8006c9e:	07db      	lsls	r3, r3, #31
 8006ca0:	d506      	bpl.n	8006cb0 <__swbuf_r+0x6c>
 8006ca2:	2e0a      	cmp	r6, #10
 8006ca4:	d104      	bne.n	8006cb0 <__swbuf_r+0x6c>
 8006ca6:	4621      	mov	r1, r4
 8006ca8:	4628      	mov	r0, r5
 8006caa:	f000 f927 	bl	8006efc <_fflush_r>
 8006cae:	b988      	cbnz	r0, 8006cd4 <__swbuf_r+0x90>
 8006cb0:	4638      	mov	r0, r7
 8006cb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006cb4:	4b0a      	ldr	r3, [pc, #40]	; (8006ce0 <__swbuf_r+0x9c>)
 8006cb6:	429c      	cmp	r4, r3
 8006cb8:	d101      	bne.n	8006cbe <__swbuf_r+0x7a>
 8006cba:	68ac      	ldr	r4, [r5, #8]
 8006cbc:	e7cf      	b.n	8006c5e <__swbuf_r+0x1a>
 8006cbe:	4b09      	ldr	r3, [pc, #36]	; (8006ce4 <__swbuf_r+0xa0>)
 8006cc0:	429c      	cmp	r4, r3
 8006cc2:	bf08      	it	eq
 8006cc4:	68ec      	ldreq	r4, [r5, #12]
 8006cc6:	e7ca      	b.n	8006c5e <__swbuf_r+0x1a>
 8006cc8:	4621      	mov	r1, r4
 8006cca:	4628      	mov	r0, r5
 8006ccc:	f000 f81a 	bl	8006d04 <__swsetup_r>
 8006cd0:	2800      	cmp	r0, #0
 8006cd2:	d0cb      	beq.n	8006c6c <__swbuf_r+0x28>
 8006cd4:	f04f 37ff 	mov.w	r7, #4294967295
 8006cd8:	e7ea      	b.n	8006cb0 <__swbuf_r+0x6c>
 8006cda:	bf00      	nop
 8006cdc:	080077f4 	.word	0x080077f4
 8006ce0:	08007814 	.word	0x08007814
 8006ce4:	080077d4 	.word	0x080077d4

08006ce8 <__ascii_wctomb>:
 8006ce8:	b149      	cbz	r1, 8006cfe <__ascii_wctomb+0x16>
 8006cea:	2aff      	cmp	r2, #255	; 0xff
 8006cec:	bf85      	ittet	hi
 8006cee:	238a      	movhi	r3, #138	; 0x8a
 8006cf0:	6003      	strhi	r3, [r0, #0]
 8006cf2:	700a      	strbls	r2, [r1, #0]
 8006cf4:	f04f 30ff 	movhi.w	r0, #4294967295
 8006cf8:	bf98      	it	ls
 8006cfa:	2001      	movls	r0, #1
 8006cfc:	4770      	bx	lr
 8006cfe:	4608      	mov	r0, r1
 8006d00:	4770      	bx	lr
	...

08006d04 <__swsetup_r>:
 8006d04:	4b32      	ldr	r3, [pc, #200]	; (8006dd0 <__swsetup_r+0xcc>)
 8006d06:	b570      	push	{r4, r5, r6, lr}
 8006d08:	681d      	ldr	r5, [r3, #0]
 8006d0a:	4606      	mov	r6, r0
 8006d0c:	460c      	mov	r4, r1
 8006d0e:	b125      	cbz	r5, 8006d1a <__swsetup_r+0x16>
 8006d10:	69ab      	ldr	r3, [r5, #24]
 8006d12:	b913      	cbnz	r3, 8006d1a <__swsetup_r+0x16>
 8006d14:	4628      	mov	r0, r5
 8006d16:	f000 f985 	bl	8007024 <__sinit>
 8006d1a:	4b2e      	ldr	r3, [pc, #184]	; (8006dd4 <__swsetup_r+0xd0>)
 8006d1c:	429c      	cmp	r4, r3
 8006d1e:	d10f      	bne.n	8006d40 <__swsetup_r+0x3c>
 8006d20:	686c      	ldr	r4, [r5, #4]
 8006d22:	89a3      	ldrh	r3, [r4, #12]
 8006d24:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006d28:	0719      	lsls	r1, r3, #28
 8006d2a:	d42c      	bmi.n	8006d86 <__swsetup_r+0x82>
 8006d2c:	06dd      	lsls	r5, r3, #27
 8006d2e:	d411      	bmi.n	8006d54 <__swsetup_r+0x50>
 8006d30:	2309      	movs	r3, #9
 8006d32:	6033      	str	r3, [r6, #0]
 8006d34:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006d38:	81a3      	strh	r3, [r4, #12]
 8006d3a:	f04f 30ff 	mov.w	r0, #4294967295
 8006d3e:	e03e      	b.n	8006dbe <__swsetup_r+0xba>
 8006d40:	4b25      	ldr	r3, [pc, #148]	; (8006dd8 <__swsetup_r+0xd4>)
 8006d42:	429c      	cmp	r4, r3
 8006d44:	d101      	bne.n	8006d4a <__swsetup_r+0x46>
 8006d46:	68ac      	ldr	r4, [r5, #8]
 8006d48:	e7eb      	b.n	8006d22 <__swsetup_r+0x1e>
 8006d4a:	4b24      	ldr	r3, [pc, #144]	; (8006ddc <__swsetup_r+0xd8>)
 8006d4c:	429c      	cmp	r4, r3
 8006d4e:	bf08      	it	eq
 8006d50:	68ec      	ldreq	r4, [r5, #12]
 8006d52:	e7e6      	b.n	8006d22 <__swsetup_r+0x1e>
 8006d54:	0758      	lsls	r0, r3, #29
 8006d56:	d512      	bpl.n	8006d7e <__swsetup_r+0x7a>
 8006d58:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006d5a:	b141      	cbz	r1, 8006d6e <__swsetup_r+0x6a>
 8006d5c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006d60:	4299      	cmp	r1, r3
 8006d62:	d002      	beq.n	8006d6a <__swsetup_r+0x66>
 8006d64:	4630      	mov	r0, r6
 8006d66:	f7ff fb31 	bl	80063cc <_free_r>
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	6363      	str	r3, [r4, #52]	; 0x34
 8006d6e:	89a3      	ldrh	r3, [r4, #12]
 8006d70:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006d74:	81a3      	strh	r3, [r4, #12]
 8006d76:	2300      	movs	r3, #0
 8006d78:	6063      	str	r3, [r4, #4]
 8006d7a:	6923      	ldr	r3, [r4, #16]
 8006d7c:	6023      	str	r3, [r4, #0]
 8006d7e:	89a3      	ldrh	r3, [r4, #12]
 8006d80:	f043 0308 	orr.w	r3, r3, #8
 8006d84:	81a3      	strh	r3, [r4, #12]
 8006d86:	6923      	ldr	r3, [r4, #16]
 8006d88:	b94b      	cbnz	r3, 8006d9e <__swsetup_r+0x9a>
 8006d8a:	89a3      	ldrh	r3, [r4, #12]
 8006d8c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006d90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d94:	d003      	beq.n	8006d9e <__swsetup_r+0x9a>
 8006d96:	4621      	mov	r1, r4
 8006d98:	4630      	mov	r0, r6
 8006d9a:	f000 fa09 	bl	80071b0 <__smakebuf_r>
 8006d9e:	89a0      	ldrh	r0, [r4, #12]
 8006da0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006da4:	f010 0301 	ands.w	r3, r0, #1
 8006da8:	d00a      	beq.n	8006dc0 <__swsetup_r+0xbc>
 8006daa:	2300      	movs	r3, #0
 8006dac:	60a3      	str	r3, [r4, #8]
 8006dae:	6963      	ldr	r3, [r4, #20]
 8006db0:	425b      	negs	r3, r3
 8006db2:	61a3      	str	r3, [r4, #24]
 8006db4:	6923      	ldr	r3, [r4, #16]
 8006db6:	b943      	cbnz	r3, 8006dca <__swsetup_r+0xc6>
 8006db8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006dbc:	d1ba      	bne.n	8006d34 <__swsetup_r+0x30>
 8006dbe:	bd70      	pop	{r4, r5, r6, pc}
 8006dc0:	0781      	lsls	r1, r0, #30
 8006dc2:	bf58      	it	pl
 8006dc4:	6963      	ldrpl	r3, [r4, #20]
 8006dc6:	60a3      	str	r3, [r4, #8]
 8006dc8:	e7f4      	b.n	8006db4 <__swsetup_r+0xb0>
 8006dca:	2000      	movs	r0, #0
 8006dcc:	e7f7      	b.n	8006dbe <__swsetup_r+0xba>
 8006dce:	bf00      	nop
 8006dd0:	2000000c 	.word	0x2000000c
 8006dd4:	080077f4 	.word	0x080077f4
 8006dd8:	08007814 	.word	0x08007814
 8006ddc:	080077d4 	.word	0x080077d4

08006de0 <abort>:
 8006de0:	b508      	push	{r3, lr}
 8006de2:	2006      	movs	r0, #6
 8006de4:	f000 fa54 	bl	8007290 <raise>
 8006de8:	2001      	movs	r0, #1
 8006dea:	f7fa f8cb 	bl	8000f84 <_exit>
	...

08006df0 <__sflush_r>:
 8006df0:	898a      	ldrh	r2, [r1, #12]
 8006df2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006df6:	4605      	mov	r5, r0
 8006df8:	0710      	lsls	r0, r2, #28
 8006dfa:	460c      	mov	r4, r1
 8006dfc:	d458      	bmi.n	8006eb0 <__sflush_r+0xc0>
 8006dfe:	684b      	ldr	r3, [r1, #4]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	dc05      	bgt.n	8006e10 <__sflush_r+0x20>
 8006e04:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	dc02      	bgt.n	8006e10 <__sflush_r+0x20>
 8006e0a:	2000      	movs	r0, #0
 8006e0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e10:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006e12:	2e00      	cmp	r6, #0
 8006e14:	d0f9      	beq.n	8006e0a <__sflush_r+0x1a>
 8006e16:	2300      	movs	r3, #0
 8006e18:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006e1c:	682f      	ldr	r7, [r5, #0]
 8006e1e:	602b      	str	r3, [r5, #0]
 8006e20:	d032      	beq.n	8006e88 <__sflush_r+0x98>
 8006e22:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006e24:	89a3      	ldrh	r3, [r4, #12]
 8006e26:	075a      	lsls	r2, r3, #29
 8006e28:	d505      	bpl.n	8006e36 <__sflush_r+0x46>
 8006e2a:	6863      	ldr	r3, [r4, #4]
 8006e2c:	1ac0      	subs	r0, r0, r3
 8006e2e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006e30:	b10b      	cbz	r3, 8006e36 <__sflush_r+0x46>
 8006e32:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006e34:	1ac0      	subs	r0, r0, r3
 8006e36:	2300      	movs	r3, #0
 8006e38:	4602      	mov	r2, r0
 8006e3a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006e3c:	6a21      	ldr	r1, [r4, #32]
 8006e3e:	4628      	mov	r0, r5
 8006e40:	47b0      	blx	r6
 8006e42:	1c43      	adds	r3, r0, #1
 8006e44:	89a3      	ldrh	r3, [r4, #12]
 8006e46:	d106      	bne.n	8006e56 <__sflush_r+0x66>
 8006e48:	6829      	ldr	r1, [r5, #0]
 8006e4a:	291d      	cmp	r1, #29
 8006e4c:	d82c      	bhi.n	8006ea8 <__sflush_r+0xb8>
 8006e4e:	4a2a      	ldr	r2, [pc, #168]	; (8006ef8 <__sflush_r+0x108>)
 8006e50:	40ca      	lsrs	r2, r1
 8006e52:	07d6      	lsls	r6, r2, #31
 8006e54:	d528      	bpl.n	8006ea8 <__sflush_r+0xb8>
 8006e56:	2200      	movs	r2, #0
 8006e58:	6062      	str	r2, [r4, #4]
 8006e5a:	04d9      	lsls	r1, r3, #19
 8006e5c:	6922      	ldr	r2, [r4, #16]
 8006e5e:	6022      	str	r2, [r4, #0]
 8006e60:	d504      	bpl.n	8006e6c <__sflush_r+0x7c>
 8006e62:	1c42      	adds	r2, r0, #1
 8006e64:	d101      	bne.n	8006e6a <__sflush_r+0x7a>
 8006e66:	682b      	ldr	r3, [r5, #0]
 8006e68:	b903      	cbnz	r3, 8006e6c <__sflush_r+0x7c>
 8006e6a:	6560      	str	r0, [r4, #84]	; 0x54
 8006e6c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006e6e:	602f      	str	r7, [r5, #0]
 8006e70:	2900      	cmp	r1, #0
 8006e72:	d0ca      	beq.n	8006e0a <__sflush_r+0x1a>
 8006e74:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006e78:	4299      	cmp	r1, r3
 8006e7a:	d002      	beq.n	8006e82 <__sflush_r+0x92>
 8006e7c:	4628      	mov	r0, r5
 8006e7e:	f7ff faa5 	bl	80063cc <_free_r>
 8006e82:	2000      	movs	r0, #0
 8006e84:	6360      	str	r0, [r4, #52]	; 0x34
 8006e86:	e7c1      	b.n	8006e0c <__sflush_r+0x1c>
 8006e88:	6a21      	ldr	r1, [r4, #32]
 8006e8a:	2301      	movs	r3, #1
 8006e8c:	4628      	mov	r0, r5
 8006e8e:	47b0      	blx	r6
 8006e90:	1c41      	adds	r1, r0, #1
 8006e92:	d1c7      	bne.n	8006e24 <__sflush_r+0x34>
 8006e94:	682b      	ldr	r3, [r5, #0]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d0c4      	beq.n	8006e24 <__sflush_r+0x34>
 8006e9a:	2b1d      	cmp	r3, #29
 8006e9c:	d001      	beq.n	8006ea2 <__sflush_r+0xb2>
 8006e9e:	2b16      	cmp	r3, #22
 8006ea0:	d101      	bne.n	8006ea6 <__sflush_r+0xb6>
 8006ea2:	602f      	str	r7, [r5, #0]
 8006ea4:	e7b1      	b.n	8006e0a <__sflush_r+0x1a>
 8006ea6:	89a3      	ldrh	r3, [r4, #12]
 8006ea8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006eac:	81a3      	strh	r3, [r4, #12]
 8006eae:	e7ad      	b.n	8006e0c <__sflush_r+0x1c>
 8006eb0:	690f      	ldr	r7, [r1, #16]
 8006eb2:	2f00      	cmp	r7, #0
 8006eb4:	d0a9      	beq.n	8006e0a <__sflush_r+0x1a>
 8006eb6:	0793      	lsls	r3, r2, #30
 8006eb8:	680e      	ldr	r6, [r1, #0]
 8006eba:	bf08      	it	eq
 8006ebc:	694b      	ldreq	r3, [r1, #20]
 8006ebe:	600f      	str	r7, [r1, #0]
 8006ec0:	bf18      	it	ne
 8006ec2:	2300      	movne	r3, #0
 8006ec4:	eba6 0807 	sub.w	r8, r6, r7
 8006ec8:	608b      	str	r3, [r1, #8]
 8006eca:	f1b8 0f00 	cmp.w	r8, #0
 8006ece:	dd9c      	ble.n	8006e0a <__sflush_r+0x1a>
 8006ed0:	6a21      	ldr	r1, [r4, #32]
 8006ed2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006ed4:	4643      	mov	r3, r8
 8006ed6:	463a      	mov	r2, r7
 8006ed8:	4628      	mov	r0, r5
 8006eda:	47b0      	blx	r6
 8006edc:	2800      	cmp	r0, #0
 8006ede:	dc06      	bgt.n	8006eee <__sflush_r+0xfe>
 8006ee0:	89a3      	ldrh	r3, [r4, #12]
 8006ee2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006ee6:	81a3      	strh	r3, [r4, #12]
 8006ee8:	f04f 30ff 	mov.w	r0, #4294967295
 8006eec:	e78e      	b.n	8006e0c <__sflush_r+0x1c>
 8006eee:	4407      	add	r7, r0
 8006ef0:	eba8 0800 	sub.w	r8, r8, r0
 8006ef4:	e7e9      	b.n	8006eca <__sflush_r+0xda>
 8006ef6:	bf00      	nop
 8006ef8:	20400001 	.word	0x20400001

08006efc <_fflush_r>:
 8006efc:	b538      	push	{r3, r4, r5, lr}
 8006efe:	690b      	ldr	r3, [r1, #16]
 8006f00:	4605      	mov	r5, r0
 8006f02:	460c      	mov	r4, r1
 8006f04:	b913      	cbnz	r3, 8006f0c <_fflush_r+0x10>
 8006f06:	2500      	movs	r5, #0
 8006f08:	4628      	mov	r0, r5
 8006f0a:	bd38      	pop	{r3, r4, r5, pc}
 8006f0c:	b118      	cbz	r0, 8006f16 <_fflush_r+0x1a>
 8006f0e:	6983      	ldr	r3, [r0, #24]
 8006f10:	b90b      	cbnz	r3, 8006f16 <_fflush_r+0x1a>
 8006f12:	f000 f887 	bl	8007024 <__sinit>
 8006f16:	4b14      	ldr	r3, [pc, #80]	; (8006f68 <_fflush_r+0x6c>)
 8006f18:	429c      	cmp	r4, r3
 8006f1a:	d11b      	bne.n	8006f54 <_fflush_r+0x58>
 8006f1c:	686c      	ldr	r4, [r5, #4]
 8006f1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d0ef      	beq.n	8006f06 <_fflush_r+0xa>
 8006f26:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006f28:	07d0      	lsls	r0, r2, #31
 8006f2a:	d404      	bmi.n	8006f36 <_fflush_r+0x3a>
 8006f2c:	0599      	lsls	r1, r3, #22
 8006f2e:	d402      	bmi.n	8006f36 <_fflush_r+0x3a>
 8006f30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006f32:	f000 f915 	bl	8007160 <__retarget_lock_acquire_recursive>
 8006f36:	4628      	mov	r0, r5
 8006f38:	4621      	mov	r1, r4
 8006f3a:	f7ff ff59 	bl	8006df0 <__sflush_r>
 8006f3e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006f40:	07da      	lsls	r2, r3, #31
 8006f42:	4605      	mov	r5, r0
 8006f44:	d4e0      	bmi.n	8006f08 <_fflush_r+0xc>
 8006f46:	89a3      	ldrh	r3, [r4, #12]
 8006f48:	059b      	lsls	r3, r3, #22
 8006f4a:	d4dd      	bmi.n	8006f08 <_fflush_r+0xc>
 8006f4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006f4e:	f000 f908 	bl	8007162 <__retarget_lock_release_recursive>
 8006f52:	e7d9      	b.n	8006f08 <_fflush_r+0xc>
 8006f54:	4b05      	ldr	r3, [pc, #20]	; (8006f6c <_fflush_r+0x70>)
 8006f56:	429c      	cmp	r4, r3
 8006f58:	d101      	bne.n	8006f5e <_fflush_r+0x62>
 8006f5a:	68ac      	ldr	r4, [r5, #8]
 8006f5c:	e7df      	b.n	8006f1e <_fflush_r+0x22>
 8006f5e:	4b04      	ldr	r3, [pc, #16]	; (8006f70 <_fflush_r+0x74>)
 8006f60:	429c      	cmp	r4, r3
 8006f62:	bf08      	it	eq
 8006f64:	68ec      	ldreq	r4, [r5, #12]
 8006f66:	e7da      	b.n	8006f1e <_fflush_r+0x22>
 8006f68:	080077f4 	.word	0x080077f4
 8006f6c:	08007814 	.word	0x08007814
 8006f70:	080077d4 	.word	0x080077d4

08006f74 <std>:
 8006f74:	2300      	movs	r3, #0
 8006f76:	b510      	push	{r4, lr}
 8006f78:	4604      	mov	r4, r0
 8006f7a:	e9c0 3300 	strd	r3, r3, [r0]
 8006f7e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006f82:	6083      	str	r3, [r0, #8]
 8006f84:	8181      	strh	r1, [r0, #12]
 8006f86:	6643      	str	r3, [r0, #100]	; 0x64
 8006f88:	81c2      	strh	r2, [r0, #14]
 8006f8a:	6183      	str	r3, [r0, #24]
 8006f8c:	4619      	mov	r1, r3
 8006f8e:	2208      	movs	r2, #8
 8006f90:	305c      	adds	r0, #92	; 0x5c
 8006f92:	f7fd fbff 	bl	8004794 <memset>
 8006f96:	4b05      	ldr	r3, [pc, #20]	; (8006fac <std+0x38>)
 8006f98:	6263      	str	r3, [r4, #36]	; 0x24
 8006f9a:	4b05      	ldr	r3, [pc, #20]	; (8006fb0 <std+0x3c>)
 8006f9c:	62a3      	str	r3, [r4, #40]	; 0x28
 8006f9e:	4b05      	ldr	r3, [pc, #20]	; (8006fb4 <std+0x40>)
 8006fa0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006fa2:	4b05      	ldr	r3, [pc, #20]	; (8006fb8 <std+0x44>)
 8006fa4:	6224      	str	r4, [r4, #32]
 8006fa6:	6323      	str	r3, [r4, #48]	; 0x30
 8006fa8:	bd10      	pop	{r4, pc}
 8006faa:	bf00      	nop
 8006fac:	080072c9 	.word	0x080072c9
 8006fb0:	080072eb 	.word	0x080072eb
 8006fb4:	08007323 	.word	0x08007323
 8006fb8:	08007347 	.word	0x08007347

08006fbc <_cleanup_r>:
 8006fbc:	4901      	ldr	r1, [pc, #4]	; (8006fc4 <_cleanup_r+0x8>)
 8006fbe:	f000 b8af 	b.w	8007120 <_fwalk_reent>
 8006fc2:	bf00      	nop
 8006fc4:	08006efd 	.word	0x08006efd

08006fc8 <__sfmoreglue>:
 8006fc8:	b570      	push	{r4, r5, r6, lr}
 8006fca:	2268      	movs	r2, #104	; 0x68
 8006fcc:	1e4d      	subs	r5, r1, #1
 8006fce:	4355      	muls	r5, r2
 8006fd0:	460e      	mov	r6, r1
 8006fd2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006fd6:	f7ff fa65 	bl	80064a4 <_malloc_r>
 8006fda:	4604      	mov	r4, r0
 8006fdc:	b140      	cbz	r0, 8006ff0 <__sfmoreglue+0x28>
 8006fde:	2100      	movs	r1, #0
 8006fe0:	e9c0 1600 	strd	r1, r6, [r0]
 8006fe4:	300c      	adds	r0, #12
 8006fe6:	60a0      	str	r0, [r4, #8]
 8006fe8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006fec:	f7fd fbd2 	bl	8004794 <memset>
 8006ff0:	4620      	mov	r0, r4
 8006ff2:	bd70      	pop	{r4, r5, r6, pc}

08006ff4 <__sfp_lock_acquire>:
 8006ff4:	4801      	ldr	r0, [pc, #4]	; (8006ffc <__sfp_lock_acquire+0x8>)
 8006ff6:	f000 b8b3 	b.w	8007160 <__retarget_lock_acquire_recursive>
 8006ffa:	bf00      	nop
 8006ffc:	20000371 	.word	0x20000371

08007000 <__sfp_lock_release>:
 8007000:	4801      	ldr	r0, [pc, #4]	; (8007008 <__sfp_lock_release+0x8>)
 8007002:	f000 b8ae 	b.w	8007162 <__retarget_lock_release_recursive>
 8007006:	bf00      	nop
 8007008:	20000371 	.word	0x20000371

0800700c <__sinit_lock_acquire>:
 800700c:	4801      	ldr	r0, [pc, #4]	; (8007014 <__sinit_lock_acquire+0x8>)
 800700e:	f000 b8a7 	b.w	8007160 <__retarget_lock_acquire_recursive>
 8007012:	bf00      	nop
 8007014:	20000372 	.word	0x20000372

08007018 <__sinit_lock_release>:
 8007018:	4801      	ldr	r0, [pc, #4]	; (8007020 <__sinit_lock_release+0x8>)
 800701a:	f000 b8a2 	b.w	8007162 <__retarget_lock_release_recursive>
 800701e:	bf00      	nop
 8007020:	20000372 	.word	0x20000372

08007024 <__sinit>:
 8007024:	b510      	push	{r4, lr}
 8007026:	4604      	mov	r4, r0
 8007028:	f7ff fff0 	bl	800700c <__sinit_lock_acquire>
 800702c:	69a3      	ldr	r3, [r4, #24]
 800702e:	b11b      	cbz	r3, 8007038 <__sinit+0x14>
 8007030:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007034:	f7ff bff0 	b.w	8007018 <__sinit_lock_release>
 8007038:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800703c:	6523      	str	r3, [r4, #80]	; 0x50
 800703e:	4b13      	ldr	r3, [pc, #76]	; (800708c <__sinit+0x68>)
 8007040:	4a13      	ldr	r2, [pc, #76]	; (8007090 <__sinit+0x6c>)
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	62a2      	str	r2, [r4, #40]	; 0x28
 8007046:	42a3      	cmp	r3, r4
 8007048:	bf04      	itt	eq
 800704a:	2301      	moveq	r3, #1
 800704c:	61a3      	streq	r3, [r4, #24]
 800704e:	4620      	mov	r0, r4
 8007050:	f000 f820 	bl	8007094 <__sfp>
 8007054:	6060      	str	r0, [r4, #4]
 8007056:	4620      	mov	r0, r4
 8007058:	f000 f81c 	bl	8007094 <__sfp>
 800705c:	60a0      	str	r0, [r4, #8]
 800705e:	4620      	mov	r0, r4
 8007060:	f000 f818 	bl	8007094 <__sfp>
 8007064:	2200      	movs	r2, #0
 8007066:	60e0      	str	r0, [r4, #12]
 8007068:	2104      	movs	r1, #4
 800706a:	6860      	ldr	r0, [r4, #4]
 800706c:	f7ff ff82 	bl	8006f74 <std>
 8007070:	68a0      	ldr	r0, [r4, #8]
 8007072:	2201      	movs	r2, #1
 8007074:	2109      	movs	r1, #9
 8007076:	f7ff ff7d 	bl	8006f74 <std>
 800707a:	68e0      	ldr	r0, [r4, #12]
 800707c:	2202      	movs	r2, #2
 800707e:	2112      	movs	r1, #18
 8007080:	f7ff ff78 	bl	8006f74 <std>
 8007084:	2301      	movs	r3, #1
 8007086:	61a3      	str	r3, [r4, #24]
 8007088:	e7d2      	b.n	8007030 <__sinit+0xc>
 800708a:	bf00      	nop
 800708c:	08007458 	.word	0x08007458
 8007090:	08006fbd 	.word	0x08006fbd

08007094 <__sfp>:
 8007094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007096:	4607      	mov	r7, r0
 8007098:	f7ff ffac 	bl	8006ff4 <__sfp_lock_acquire>
 800709c:	4b1e      	ldr	r3, [pc, #120]	; (8007118 <__sfp+0x84>)
 800709e:	681e      	ldr	r6, [r3, #0]
 80070a0:	69b3      	ldr	r3, [r6, #24]
 80070a2:	b913      	cbnz	r3, 80070aa <__sfp+0x16>
 80070a4:	4630      	mov	r0, r6
 80070a6:	f7ff ffbd 	bl	8007024 <__sinit>
 80070aa:	3648      	adds	r6, #72	; 0x48
 80070ac:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80070b0:	3b01      	subs	r3, #1
 80070b2:	d503      	bpl.n	80070bc <__sfp+0x28>
 80070b4:	6833      	ldr	r3, [r6, #0]
 80070b6:	b30b      	cbz	r3, 80070fc <__sfp+0x68>
 80070b8:	6836      	ldr	r6, [r6, #0]
 80070ba:	e7f7      	b.n	80070ac <__sfp+0x18>
 80070bc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80070c0:	b9d5      	cbnz	r5, 80070f8 <__sfp+0x64>
 80070c2:	4b16      	ldr	r3, [pc, #88]	; (800711c <__sfp+0x88>)
 80070c4:	60e3      	str	r3, [r4, #12]
 80070c6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80070ca:	6665      	str	r5, [r4, #100]	; 0x64
 80070cc:	f000 f847 	bl	800715e <__retarget_lock_init_recursive>
 80070d0:	f7ff ff96 	bl	8007000 <__sfp_lock_release>
 80070d4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80070d8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80070dc:	6025      	str	r5, [r4, #0]
 80070de:	61a5      	str	r5, [r4, #24]
 80070e0:	2208      	movs	r2, #8
 80070e2:	4629      	mov	r1, r5
 80070e4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80070e8:	f7fd fb54 	bl	8004794 <memset>
 80070ec:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80070f0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80070f4:	4620      	mov	r0, r4
 80070f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80070f8:	3468      	adds	r4, #104	; 0x68
 80070fa:	e7d9      	b.n	80070b0 <__sfp+0x1c>
 80070fc:	2104      	movs	r1, #4
 80070fe:	4638      	mov	r0, r7
 8007100:	f7ff ff62 	bl	8006fc8 <__sfmoreglue>
 8007104:	4604      	mov	r4, r0
 8007106:	6030      	str	r0, [r6, #0]
 8007108:	2800      	cmp	r0, #0
 800710a:	d1d5      	bne.n	80070b8 <__sfp+0x24>
 800710c:	f7ff ff78 	bl	8007000 <__sfp_lock_release>
 8007110:	230c      	movs	r3, #12
 8007112:	603b      	str	r3, [r7, #0]
 8007114:	e7ee      	b.n	80070f4 <__sfp+0x60>
 8007116:	bf00      	nop
 8007118:	08007458 	.word	0x08007458
 800711c:	ffff0001 	.word	0xffff0001

08007120 <_fwalk_reent>:
 8007120:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007124:	4606      	mov	r6, r0
 8007126:	4688      	mov	r8, r1
 8007128:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800712c:	2700      	movs	r7, #0
 800712e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007132:	f1b9 0901 	subs.w	r9, r9, #1
 8007136:	d505      	bpl.n	8007144 <_fwalk_reent+0x24>
 8007138:	6824      	ldr	r4, [r4, #0]
 800713a:	2c00      	cmp	r4, #0
 800713c:	d1f7      	bne.n	800712e <_fwalk_reent+0xe>
 800713e:	4638      	mov	r0, r7
 8007140:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007144:	89ab      	ldrh	r3, [r5, #12]
 8007146:	2b01      	cmp	r3, #1
 8007148:	d907      	bls.n	800715a <_fwalk_reent+0x3a>
 800714a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800714e:	3301      	adds	r3, #1
 8007150:	d003      	beq.n	800715a <_fwalk_reent+0x3a>
 8007152:	4629      	mov	r1, r5
 8007154:	4630      	mov	r0, r6
 8007156:	47c0      	blx	r8
 8007158:	4307      	orrs	r7, r0
 800715a:	3568      	adds	r5, #104	; 0x68
 800715c:	e7e9      	b.n	8007132 <_fwalk_reent+0x12>

0800715e <__retarget_lock_init_recursive>:
 800715e:	4770      	bx	lr

08007160 <__retarget_lock_acquire_recursive>:
 8007160:	4770      	bx	lr

08007162 <__retarget_lock_release_recursive>:
 8007162:	4770      	bx	lr

08007164 <__swhatbuf_r>:
 8007164:	b570      	push	{r4, r5, r6, lr}
 8007166:	460e      	mov	r6, r1
 8007168:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800716c:	2900      	cmp	r1, #0
 800716e:	b096      	sub	sp, #88	; 0x58
 8007170:	4614      	mov	r4, r2
 8007172:	461d      	mov	r5, r3
 8007174:	da08      	bge.n	8007188 <__swhatbuf_r+0x24>
 8007176:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800717a:	2200      	movs	r2, #0
 800717c:	602a      	str	r2, [r5, #0]
 800717e:	061a      	lsls	r2, r3, #24
 8007180:	d410      	bmi.n	80071a4 <__swhatbuf_r+0x40>
 8007182:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007186:	e00e      	b.n	80071a6 <__swhatbuf_r+0x42>
 8007188:	466a      	mov	r2, sp
 800718a:	f000 f903 	bl	8007394 <_fstat_r>
 800718e:	2800      	cmp	r0, #0
 8007190:	dbf1      	blt.n	8007176 <__swhatbuf_r+0x12>
 8007192:	9a01      	ldr	r2, [sp, #4]
 8007194:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007198:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800719c:	425a      	negs	r2, r3
 800719e:	415a      	adcs	r2, r3
 80071a0:	602a      	str	r2, [r5, #0]
 80071a2:	e7ee      	b.n	8007182 <__swhatbuf_r+0x1e>
 80071a4:	2340      	movs	r3, #64	; 0x40
 80071a6:	2000      	movs	r0, #0
 80071a8:	6023      	str	r3, [r4, #0]
 80071aa:	b016      	add	sp, #88	; 0x58
 80071ac:	bd70      	pop	{r4, r5, r6, pc}
	...

080071b0 <__smakebuf_r>:
 80071b0:	898b      	ldrh	r3, [r1, #12]
 80071b2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80071b4:	079d      	lsls	r5, r3, #30
 80071b6:	4606      	mov	r6, r0
 80071b8:	460c      	mov	r4, r1
 80071ba:	d507      	bpl.n	80071cc <__smakebuf_r+0x1c>
 80071bc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80071c0:	6023      	str	r3, [r4, #0]
 80071c2:	6123      	str	r3, [r4, #16]
 80071c4:	2301      	movs	r3, #1
 80071c6:	6163      	str	r3, [r4, #20]
 80071c8:	b002      	add	sp, #8
 80071ca:	bd70      	pop	{r4, r5, r6, pc}
 80071cc:	ab01      	add	r3, sp, #4
 80071ce:	466a      	mov	r2, sp
 80071d0:	f7ff ffc8 	bl	8007164 <__swhatbuf_r>
 80071d4:	9900      	ldr	r1, [sp, #0]
 80071d6:	4605      	mov	r5, r0
 80071d8:	4630      	mov	r0, r6
 80071da:	f7ff f963 	bl	80064a4 <_malloc_r>
 80071de:	b948      	cbnz	r0, 80071f4 <__smakebuf_r+0x44>
 80071e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80071e4:	059a      	lsls	r2, r3, #22
 80071e6:	d4ef      	bmi.n	80071c8 <__smakebuf_r+0x18>
 80071e8:	f023 0303 	bic.w	r3, r3, #3
 80071ec:	f043 0302 	orr.w	r3, r3, #2
 80071f0:	81a3      	strh	r3, [r4, #12]
 80071f2:	e7e3      	b.n	80071bc <__smakebuf_r+0xc>
 80071f4:	4b0d      	ldr	r3, [pc, #52]	; (800722c <__smakebuf_r+0x7c>)
 80071f6:	62b3      	str	r3, [r6, #40]	; 0x28
 80071f8:	89a3      	ldrh	r3, [r4, #12]
 80071fa:	6020      	str	r0, [r4, #0]
 80071fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007200:	81a3      	strh	r3, [r4, #12]
 8007202:	9b00      	ldr	r3, [sp, #0]
 8007204:	6163      	str	r3, [r4, #20]
 8007206:	9b01      	ldr	r3, [sp, #4]
 8007208:	6120      	str	r0, [r4, #16]
 800720a:	b15b      	cbz	r3, 8007224 <__smakebuf_r+0x74>
 800720c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007210:	4630      	mov	r0, r6
 8007212:	f000 f8d1 	bl	80073b8 <_isatty_r>
 8007216:	b128      	cbz	r0, 8007224 <__smakebuf_r+0x74>
 8007218:	89a3      	ldrh	r3, [r4, #12]
 800721a:	f023 0303 	bic.w	r3, r3, #3
 800721e:	f043 0301 	orr.w	r3, r3, #1
 8007222:	81a3      	strh	r3, [r4, #12]
 8007224:	89a0      	ldrh	r0, [r4, #12]
 8007226:	4305      	orrs	r5, r0
 8007228:	81a5      	strh	r5, [r4, #12]
 800722a:	e7cd      	b.n	80071c8 <__smakebuf_r+0x18>
 800722c:	08006fbd 	.word	0x08006fbd

08007230 <_malloc_usable_size_r>:
 8007230:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007234:	1f18      	subs	r0, r3, #4
 8007236:	2b00      	cmp	r3, #0
 8007238:	bfbc      	itt	lt
 800723a:	580b      	ldrlt	r3, [r1, r0]
 800723c:	18c0      	addlt	r0, r0, r3
 800723e:	4770      	bx	lr

08007240 <_raise_r>:
 8007240:	291f      	cmp	r1, #31
 8007242:	b538      	push	{r3, r4, r5, lr}
 8007244:	4604      	mov	r4, r0
 8007246:	460d      	mov	r5, r1
 8007248:	d904      	bls.n	8007254 <_raise_r+0x14>
 800724a:	2316      	movs	r3, #22
 800724c:	6003      	str	r3, [r0, #0]
 800724e:	f04f 30ff 	mov.w	r0, #4294967295
 8007252:	bd38      	pop	{r3, r4, r5, pc}
 8007254:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007256:	b112      	cbz	r2, 800725e <_raise_r+0x1e>
 8007258:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800725c:	b94b      	cbnz	r3, 8007272 <_raise_r+0x32>
 800725e:	4620      	mov	r0, r4
 8007260:	f000 f830 	bl	80072c4 <_getpid_r>
 8007264:	462a      	mov	r2, r5
 8007266:	4601      	mov	r1, r0
 8007268:	4620      	mov	r0, r4
 800726a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800726e:	f000 b817 	b.w	80072a0 <_kill_r>
 8007272:	2b01      	cmp	r3, #1
 8007274:	d00a      	beq.n	800728c <_raise_r+0x4c>
 8007276:	1c59      	adds	r1, r3, #1
 8007278:	d103      	bne.n	8007282 <_raise_r+0x42>
 800727a:	2316      	movs	r3, #22
 800727c:	6003      	str	r3, [r0, #0]
 800727e:	2001      	movs	r0, #1
 8007280:	e7e7      	b.n	8007252 <_raise_r+0x12>
 8007282:	2400      	movs	r4, #0
 8007284:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007288:	4628      	mov	r0, r5
 800728a:	4798      	blx	r3
 800728c:	2000      	movs	r0, #0
 800728e:	e7e0      	b.n	8007252 <_raise_r+0x12>

08007290 <raise>:
 8007290:	4b02      	ldr	r3, [pc, #8]	; (800729c <raise+0xc>)
 8007292:	4601      	mov	r1, r0
 8007294:	6818      	ldr	r0, [r3, #0]
 8007296:	f7ff bfd3 	b.w	8007240 <_raise_r>
 800729a:	bf00      	nop
 800729c:	2000000c 	.word	0x2000000c

080072a0 <_kill_r>:
 80072a0:	b538      	push	{r3, r4, r5, lr}
 80072a2:	4d07      	ldr	r5, [pc, #28]	; (80072c0 <_kill_r+0x20>)
 80072a4:	2300      	movs	r3, #0
 80072a6:	4604      	mov	r4, r0
 80072a8:	4608      	mov	r0, r1
 80072aa:	4611      	mov	r1, r2
 80072ac:	602b      	str	r3, [r5, #0]
 80072ae:	f7f9 fe59 	bl	8000f64 <_kill>
 80072b2:	1c43      	adds	r3, r0, #1
 80072b4:	d102      	bne.n	80072bc <_kill_r+0x1c>
 80072b6:	682b      	ldr	r3, [r5, #0]
 80072b8:	b103      	cbz	r3, 80072bc <_kill_r+0x1c>
 80072ba:	6023      	str	r3, [r4, #0]
 80072bc:	bd38      	pop	{r3, r4, r5, pc}
 80072be:	bf00      	nop
 80072c0:	2000036c 	.word	0x2000036c

080072c4 <_getpid_r>:
 80072c4:	f7f9 be46 	b.w	8000f54 <_getpid>

080072c8 <__sread>:
 80072c8:	b510      	push	{r4, lr}
 80072ca:	460c      	mov	r4, r1
 80072cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80072d0:	f000 f894 	bl	80073fc <_read_r>
 80072d4:	2800      	cmp	r0, #0
 80072d6:	bfab      	itete	ge
 80072d8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80072da:	89a3      	ldrhlt	r3, [r4, #12]
 80072dc:	181b      	addge	r3, r3, r0
 80072de:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80072e2:	bfac      	ite	ge
 80072e4:	6563      	strge	r3, [r4, #84]	; 0x54
 80072e6:	81a3      	strhlt	r3, [r4, #12]
 80072e8:	bd10      	pop	{r4, pc}

080072ea <__swrite>:
 80072ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80072ee:	461f      	mov	r7, r3
 80072f0:	898b      	ldrh	r3, [r1, #12]
 80072f2:	05db      	lsls	r3, r3, #23
 80072f4:	4605      	mov	r5, r0
 80072f6:	460c      	mov	r4, r1
 80072f8:	4616      	mov	r6, r2
 80072fa:	d505      	bpl.n	8007308 <__swrite+0x1e>
 80072fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007300:	2302      	movs	r3, #2
 8007302:	2200      	movs	r2, #0
 8007304:	f000 f868 	bl	80073d8 <_lseek_r>
 8007308:	89a3      	ldrh	r3, [r4, #12]
 800730a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800730e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007312:	81a3      	strh	r3, [r4, #12]
 8007314:	4632      	mov	r2, r6
 8007316:	463b      	mov	r3, r7
 8007318:	4628      	mov	r0, r5
 800731a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800731e:	f000 b817 	b.w	8007350 <_write_r>

08007322 <__sseek>:
 8007322:	b510      	push	{r4, lr}
 8007324:	460c      	mov	r4, r1
 8007326:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800732a:	f000 f855 	bl	80073d8 <_lseek_r>
 800732e:	1c43      	adds	r3, r0, #1
 8007330:	89a3      	ldrh	r3, [r4, #12]
 8007332:	bf15      	itete	ne
 8007334:	6560      	strne	r0, [r4, #84]	; 0x54
 8007336:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800733a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800733e:	81a3      	strheq	r3, [r4, #12]
 8007340:	bf18      	it	ne
 8007342:	81a3      	strhne	r3, [r4, #12]
 8007344:	bd10      	pop	{r4, pc}

08007346 <__sclose>:
 8007346:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800734a:	f000 b813 	b.w	8007374 <_close_r>
	...

08007350 <_write_r>:
 8007350:	b538      	push	{r3, r4, r5, lr}
 8007352:	4d07      	ldr	r5, [pc, #28]	; (8007370 <_write_r+0x20>)
 8007354:	4604      	mov	r4, r0
 8007356:	4608      	mov	r0, r1
 8007358:	4611      	mov	r1, r2
 800735a:	2200      	movs	r2, #0
 800735c:	602a      	str	r2, [r5, #0]
 800735e:	461a      	mov	r2, r3
 8007360:	f7f9 fe37 	bl	8000fd2 <_write>
 8007364:	1c43      	adds	r3, r0, #1
 8007366:	d102      	bne.n	800736e <_write_r+0x1e>
 8007368:	682b      	ldr	r3, [r5, #0]
 800736a:	b103      	cbz	r3, 800736e <_write_r+0x1e>
 800736c:	6023      	str	r3, [r4, #0]
 800736e:	bd38      	pop	{r3, r4, r5, pc}
 8007370:	2000036c 	.word	0x2000036c

08007374 <_close_r>:
 8007374:	b538      	push	{r3, r4, r5, lr}
 8007376:	4d06      	ldr	r5, [pc, #24]	; (8007390 <_close_r+0x1c>)
 8007378:	2300      	movs	r3, #0
 800737a:	4604      	mov	r4, r0
 800737c:	4608      	mov	r0, r1
 800737e:	602b      	str	r3, [r5, #0]
 8007380:	f7f9 fe43 	bl	800100a <_close>
 8007384:	1c43      	adds	r3, r0, #1
 8007386:	d102      	bne.n	800738e <_close_r+0x1a>
 8007388:	682b      	ldr	r3, [r5, #0]
 800738a:	b103      	cbz	r3, 800738e <_close_r+0x1a>
 800738c:	6023      	str	r3, [r4, #0]
 800738e:	bd38      	pop	{r3, r4, r5, pc}
 8007390:	2000036c 	.word	0x2000036c

08007394 <_fstat_r>:
 8007394:	b538      	push	{r3, r4, r5, lr}
 8007396:	4d07      	ldr	r5, [pc, #28]	; (80073b4 <_fstat_r+0x20>)
 8007398:	2300      	movs	r3, #0
 800739a:	4604      	mov	r4, r0
 800739c:	4608      	mov	r0, r1
 800739e:	4611      	mov	r1, r2
 80073a0:	602b      	str	r3, [r5, #0]
 80073a2:	f7f9 fe3e 	bl	8001022 <_fstat>
 80073a6:	1c43      	adds	r3, r0, #1
 80073a8:	d102      	bne.n	80073b0 <_fstat_r+0x1c>
 80073aa:	682b      	ldr	r3, [r5, #0]
 80073ac:	b103      	cbz	r3, 80073b0 <_fstat_r+0x1c>
 80073ae:	6023      	str	r3, [r4, #0]
 80073b0:	bd38      	pop	{r3, r4, r5, pc}
 80073b2:	bf00      	nop
 80073b4:	2000036c 	.word	0x2000036c

080073b8 <_isatty_r>:
 80073b8:	b538      	push	{r3, r4, r5, lr}
 80073ba:	4d06      	ldr	r5, [pc, #24]	; (80073d4 <_isatty_r+0x1c>)
 80073bc:	2300      	movs	r3, #0
 80073be:	4604      	mov	r4, r0
 80073c0:	4608      	mov	r0, r1
 80073c2:	602b      	str	r3, [r5, #0]
 80073c4:	f7f9 fe3d 	bl	8001042 <_isatty>
 80073c8:	1c43      	adds	r3, r0, #1
 80073ca:	d102      	bne.n	80073d2 <_isatty_r+0x1a>
 80073cc:	682b      	ldr	r3, [r5, #0]
 80073ce:	b103      	cbz	r3, 80073d2 <_isatty_r+0x1a>
 80073d0:	6023      	str	r3, [r4, #0]
 80073d2:	bd38      	pop	{r3, r4, r5, pc}
 80073d4:	2000036c 	.word	0x2000036c

080073d8 <_lseek_r>:
 80073d8:	b538      	push	{r3, r4, r5, lr}
 80073da:	4d07      	ldr	r5, [pc, #28]	; (80073f8 <_lseek_r+0x20>)
 80073dc:	4604      	mov	r4, r0
 80073de:	4608      	mov	r0, r1
 80073e0:	4611      	mov	r1, r2
 80073e2:	2200      	movs	r2, #0
 80073e4:	602a      	str	r2, [r5, #0]
 80073e6:	461a      	mov	r2, r3
 80073e8:	f7f9 fe36 	bl	8001058 <_lseek>
 80073ec:	1c43      	adds	r3, r0, #1
 80073ee:	d102      	bne.n	80073f6 <_lseek_r+0x1e>
 80073f0:	682b      	ldr	r3, [r5, #0]
 80073f2:	b103      	cbz	r3, 80073f6 <_lseek_r+0x1e>
 80073f4:	6023      	str	r3, [r4, #0]
 80073f6:	bd38      	pop	{r3, r4, r5, pc}
 80073f8:	2000036c 	.word	0x2000036c

080073fc <_read_r>:
 80073fc:	b538      	push	{r3, r4, r5, lr}
 80073fe:	4d07      	ldr	r5, [pc, #28]	; (800741c <_read_r+0x20>)
 8007400:	4604      	mov	r4, r0
 8007402:	4608      	mov	r0, r1
 8007404:	4611      	mov	r1, r2
 8007406:	2200      	movs	r2, #0
 8007408:	602a      	str	r2, [r5, #0]
 800740a:	461a      	mov	r2, r3
 800740c:	f7f9 fdc4 	bl	8000f98 <_read>
 8007410:	1c43      	adds	r3, r0, #1
 8007412:	d102      	bne.n	800741a <_read_r+0x1e>
 8007414:	682b      	ldr	r3, [r5, #0]
 8007416:	b103      	cbz	r3, 800741a <_read_r+0x1e>
 8007418:	6023      	str	r3, [r4, #0]
 800741a:	bd38      	pop	{r3, r4, r5, pc}
 800741c:	2000036c 	.word	0x2000036c

08007420 <_init>:
 8007420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007422:	bf00      	nop
 8007424:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007426:	bc08      	pop	{r3}
 8007428:	469e      	mov	lr, r3
 800742a:	4770      	bx	lr

0800742c <_fini>:
 800742c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800742e:	bf00      	nop
 8007430:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007432:	bc08      	pop	{r3}
 8007434:	469e      	mov	lr, r3
 8007436:	4770      	bx	lr
